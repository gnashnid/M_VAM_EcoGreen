
M_VAM_EcoGreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a08  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004b14  08004b14  00005b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b40  08004b40  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004b40  08004b40  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004b40  08004b40  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b40  08004b40  00005b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b44  08004b44  00005b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004b48  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08004b54  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004b54  000061c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e848  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d8  00000000  00000000  0001487d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00016a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae9  00000000  00000000  00017850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001835d  00000000  00000000  00018339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f777  00000000  00000000  00030696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d4fd  00000000  00000000  0003fe0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd30a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a5c  00000000  00000000  000cd350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000d0dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004afc 	.word	0x08004afc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08004afc 	.word	0x08004afc

0800014c <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	460b      	mov	r3, r1
 8000158:	71bb      	strb	r3, [r7, #6]
 800015a:	4613      	mov	r3, r2
 800015c:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	b29a      	uxth	r2, r3
 8000162:	79bb      	ldrb	r3, [r7, #6]
 8000164:	b29b      	uxth	r3, r3
 8000166:	4413      	add	r3, r2
 8000168:	b29a      	uxth	r2, r3
 800016a:	797b      	ldrb	r3, [r7, #5]
 800016c:	b29b      	uxth	r3, r3
 800016e:	4413      	add	r3, r2
 8000170:	b29b      	uxth	r3, r3
 8000172:	f203 1305 	addw	r3, r3, #261	@ 0x105
 8000176:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 8000178:	8afb      	ldrh	r3, [r7, #22]
 800017a:	425b      	negs	r3, r3
 800017c:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 800017e:	237e      	movs	r3, #126	@ 0x7e
 8000180:	733b      	strb	r3, [r7, #12]
 8000182:	23ff      	movs	r3, #255	@ 0xff
 8000184:	737b      	strb	r3, [r7, #13]
 8000186:	2306      	movs	r3, #6
 8000188:	73bb      	strb	r3, [r7, #14]
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	73fb      	strb	r3, [r7, #15]
 800018e:	2300      	movs	r3, #0
 8000190:	743b      	strb	r3, [r7, #16]
 8000192:	79bb      	ldrb	r3, [r7, #6]
 8000194:	747b      	strb	r3, [r7, #17]
 8000196:	797b      	ldrb	r3, [r7, #5]
 8000198:	74bb      	strb	r3, [r7, #18]
 800019a:	8afb      	ldrh	r3, [r7, #22]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	b29b      	uxth	r3, r3
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	74fb      	strb	r3, [r7, #19]
 80001a4:	8afb      	ldrh	r3, [r7, #22]
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	753b      	strb	r3, [r7, #20]
 80001aa:	23ef      	movs	r3, #239	@ 0xef
 80001ac:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 80001ae:	f107 010c 	add.w	r1, r7, #12
 80001b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001b6:	220a      	movs	r2, #10
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <Send_cmd+0x7c>)
 80001ba:	f003 fc97 	bl	8003aec <HAL_UART_Transmit>
}
 80001be:	bf00      	nop
 80001c0:	3718      	adds	r7, #24
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	200000a4 	.word	0x200000a4

080001cc <DF_Init>:
  HAL_Delay(200);
}


void DF_Init (uint8_t volume)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 80001d6:	2202      	movs	r2, #2
 80001d8:	2100      	movs	r1, #0
 80001da:	203f      	movs	r0, #63	@ 0x3f
 80001dc:	f7ff ffb6 	bl	800014c <Send_cmd>
	HAL_Delay(200);
 80001e0:	20c8      	movs	r0, #200	@ 0xc8
 80001e2:	f001 f8df 	bl	80013a4 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	461a      	mov	r2, r3
 80001ea:	2100      	movs	r1, #0
 80001ec:	2006      	movs	r0, #6
 80001ee:	f7ff ffad 	bl	800014c <Send_cmd>
	HAL_Delay(500);
 80001f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001f6:	f001 f8d5 	bl	80013a4 <HAL_Delay>
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <DF_Play>:
		while (HAL_GPIO_ReadPin(Next_Port, Next_Key));
		DF_Next();
	}
}
void DF_Play(uint8_t data)
{
 8000202:	b580      	push	{r7, lr}
 8000204:	b082      	sub	sp, #8
 8000206:	af00      	add	r7, sp, #0
 8000208:	4603      	mov	r3, r0
 800020a:	71fb      	strb	r3, [r7, #7]
  Send_cmd(0x03, 0, data);
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	461a      	mov	r2, r3
 8000210:	2100      	movs	r1, #0
 8000212:	2003      	movs	r0, #3
 8000214:	f7ff ff9a 	bl	800014c <Send_cmd>
  HAL_Delay(200);
 8000218:	20c8      	movs	r0, #200	@ 0xc8
 800021a:	f001 f8c3 	bl	80013a4 <HAL_Delay>
}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b086      	sub	sp, #24
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000230:	4b9c      	ldr	r3, [pc, #624]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000232:	4a9d      	ldr	r2, [pc, #628]	@ (80004a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 8000234:	2100      	movs	r1, #0
 8000236:	6878      	ldr	r0, [r7, #4]
 8000238:	f001 fae0 	bl	80017fc <HAL_CAN_GetRxMessage>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		HAL_NVIC_SystemReset();
 8000242:	f001 ff5c 	bl	80020fe <HAL_NVIC_SystemReset>
	}
	read_speed = true;
 8000246:	4b99      	ldr	r3, [pc, #612]	@ (80004ac <HAL_CAN_RxFifo0MsgPendingCallback+0x284>)
 8000248:	2201      	movs	r2, #1
 800024a:	701a      	strb	r2, [r3, #0]
	if (RxHeader.StdId == 0x501)
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x280>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f240 5201 	movw	r2, #1281	@ 0x501
 8000254:	4293      	cmp	r3, r2
 8000256:	f040 816e 	bne.w	8000536 <HAL_CAN_RxFifo0MsgPendingCallback+0x30e>
	{
		if ((RxData[0] & 0x04) == 0x04)
 800025a:	4b92      	ldr	r3, [pc, #584]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	f003 0304 	and.w	r3, r3, #4
 8000262:	2b00      	cmp	r3, #0
 8000264:	f000 815d 	beq.w	8000522 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fa>
		{
			if (RxData[2] == 0x01)
 8000268:	4b8e      	ldr	r3, [pc, #568]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800026a:	789b      	ldrb	r3, [r3, #2]
 800026c:	2b01      	cmp	r3, #1
 800026e:	d11f      	bne.n	80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
			{
				rxDataSave[2] = RxData[2];
 8000270:	4b8c      	ldr	r3, [pc, #560]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000272:	789a      	ldrb	r2, [r3, #2]
 8000274:	4b8e      	ldr	r3, [pc, #568]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000276:	709a      	strb	r2, [r3, #2]
				rxDataSave[4] = 0;
 8000278:	4b8d      	ldr	r3, [pc, #564]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800027a:	2200      	movs	r2, #0
 800027c:	711a      	strb	r2, [r3, #4]
				rxDataSave[3] = 0;
 800027e:	4b8c      	ldr	r3, [pc, #560]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000280:	2200      	movs	r2, #0
 8000282:	70da      	strb	r2, [r3, #3]
				for (uint8_t i=0; i<5; i++)
 8000284:	2300      	movs	r3, #0
 8000286:	75fb      	strb	r3, [r7, #23]
 8000288:	e00e      	b.n	80002a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
				{
					if (speakerState[i][0] == 0)
 800028a:	7dfb      	ldrb	r3, [r7, #23]
 800028c:	4a89      	ldr	r2, [pc, #548]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 800028e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d105      	bne.n	80002a2 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
					{
						speakerState[i][0] = speak_state_fire;
 8000296:	7dfb      	ldrb	r3, [r7, #23]
 8000298:	4a86      	ldr	r2, [pc, #536]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 800029a:	2101      	movs	r1, #1
 800029c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
						return;
 80002a0:	e1ba      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
				for (uint8_t i=0; i<5; i++)
 80002a2:	7dfb      	ldrb	r3, [r7, #23]
 80002a4:	3301      	adds	r3, #1
 80002a6:	75fb      	strb	r3, [r7, #23]
 80002a8:	7dfb      	ldrb	r3, [r7, #23]
 80002aa:	2b04      	cmp	r3, #4
 80002ac:	d9ed      	bls.n	800028a <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 80002ae:	e1b3      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
					}
				}
			} else if (RxData[2] == 0x04)
 80002b0:	4b7c      	ldr	r3, [pc, #496]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80002b2:	789b      	ldrb	r3, [r3, #2]
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	d12f      	bne.n	8000318 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
			{
				if (RxData[4] != rxDataSave[4])
 80002b8:	4b7a      	ldr	r3, [pc, #488]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80002ba:	791a      	ldrb	r2, [r3, #4]
 80002bc:	4b7c      	ldr	r3, [pc, #496]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80002be:	791b      	ldrb	r3, [r3, #4]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f000 81a9 	beq.w	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
				{
					rxDataSave[2] = RxData[2];
 80002c6:	4b77      	ldr	r3, [pc, #476]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80002c8:	789a      	ldrb	r2, [r3, #2]
 80002ca:	4b79      	ldr	r3, [pc, #484]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80002cc:	709a      	strb	r2, [r3, #2]
					rxDataSave[4] = RxData[4];
 80002ce:	4b75      	ldr	r3, [pc, #468]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80002d0:	791a      	ldrb	r2, [r3, #4]
 80002d2:	4b77      	ldr	r3, [pc, #476]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80002d4:	711a      	strb	r2, [r3, #4]
					rxDataSave[3] = 0;
 80002d6:	4b76      	ldr	r3, [pc, #472]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80002d8:	2200      	movs	r2, #0
 80002da:	70da      	strb	r2, [r3, #3]
					for (uint8_t i=0; i<5; i++)
 80002dc:	2300      	movs	r3, #0
 80002de:	75bb      	strb	r3, [r7, #22]
 80002e0:	e016      	b.n	8000310 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
					{
						if (speakerState[i][0] == 0)
 80002e2:	7dbb      	ldrb	r3, [r7, #22]
 80002e4:	4a73      	ldr	r2, [pc, #460]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80002e6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d10d      	bne.n	800030a <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
						{
							speakerState[i][0] = speak_state_door;
 80002ee:	7dbb      	ldrb	r3, [r7, #22]
 80002f0:	4a70      	ldr	r2, [pc, #448]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80002f2:	2104      	movs	r1, #4
 80002f4:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
							speakerState[i][1] = RxData[4];
 80002f8:	7dbb      	ldrb	r3, [r7, #22]
 80002fa:	4a6a      	ldr	r2, [pc, #424]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80002fc:	7911      	ldrb	r1, [r2, #4]
 80002fe:	4a6d      	ldr	r2, [pc, #436]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000300:	005b      	lsls	r3, r3, #1
 8000302:	4413      	add	r3, r2
 8000304:	460a      	mov	r2, r1
 8000306:	705a      	strb	r2, [r3, #1]
							return;
 8000308:	e186      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
					for (uint8_t i=0; i<5; i++)
 800030a:	7dbb      	ldrb	r3, [r7, #22]
 800030c:	3301      	adds	r3, #1
 800030e:	75bb      	strb	r3, [r7, #22]
 8000310:	7dbb      	ldrb	r3, [r7, #22]
 8000312:	2b04      	cmp	r3, #4
 8000314:	d9e5      	bls.n	80002e2 <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
 8000316:	e17f      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
						}
					}
				}
			} else if (RxData[2] == 0x05)
 8000318:	4b62      	ldr	r3, [pc, #392]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800031a:	789b      	ldrb	r3, [r3, #2]
 800031c:	2b05      	cmp	r3, #5
 800031e:	d11f      	bne.n	8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
			{
				rxDataSave[2] = RxData[2];
 8000320:	4b60      	ldr	r3, [pc, #384]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000322:	789a      	ldrb	r2, [r3, #2]
 8000324:	4b62      	ldr	r3, [pc, #392]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000326:	709a      	strb	r2, [r3, #2]
				rxDataSave[4] = 0;
 8000328:	4b61      	ldr	r3, [pc, #388]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800032a:	2200      	movs	r2, #0
 800032c:	711a      	strb	r2, [r3, #4]
				rxDataSave[3] = 0;
 800032e:	4b60      	ldr	r3, [pc, #384]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000330:	2200      	movs	r2, #0
 8000332:	70da      	strb	r2, [r3, #3]
				for (uint8_t i=0; i<5; i++)
 8000334:	2300      	movs	r3, #0
 8000336:	757b      	strb	r3, [r7, #21]
 8000338:	e00e      	b.n	8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>
				{
					if (speakerState[i][0] == 0)
 800033a:	7d7b      	ldrb	r3, [r7, #21]
 800033c:	4a5d      	ldr	r2, [pc, #372]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 800033e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d105      	bne.n	8000352 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
					{
						speakerState[i][0] = speak_state_overload;
 8000346:	7d7b      	ldrb	r3, [r7, #21]
 8000348:	4a5a      	ldr	r2, [pc, #360]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 800034a:	2105      	movs	r1, #5
 800034c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
						return;
 8000350:	e162      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
				for (uint8_t i=0; i<5; i++)
 8000352:	7d7b      	ldrb	r3, [r7, #21]
 8000354:	3301      	adds	r3, #1
 8000356:	757b      	strb	r3, [r7, #21]
 8000358:	7d7b      	ldrb	r3, [r7, #21]
 800035a:	2b04      	cmp	r3, #4
 800035c:	d9ed      	bls.n	800033a <HAL_CAN_RxFifo0MsgPendingCallback+0x112>
 800035e:	e15b      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
					}
				}
			} else if (RxData[2] == 0x06)
 8000360:	4b50      	ldr	r3, [pc, #320]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000362:	789b      	ldrb	r3, [r3, #2]
 8000364:	2b06      	cmp	r3, #6
 8000366:	d11f      	bne.n	80003a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
			{
				rxDataSave[2] = RxData[2];
 8000368:	4b4e      	ldr	r3, [pc, #312]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 800036a:	789a      	ldrb	r2, [r3, #2]
 800036c:	4b50      	ldr	r3, [pc, #320]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800036e:	709a      	strb	r2, [r3, #2]
				rxDataSave[4] = 0;
 8000370:	4b4f      	ldr	r3, [pc, #316]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000372:	2200      	movs	r2, #0
 8000374:	711a      	strb	r2, [r3, #4]
				rxDataSave[3] = 0;
 8000376:	4b4e      	ldr	r3, [pc, #312]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000378:	2200      	movs	r2, #0
 800037a:	70da      	strb	r2, [r3, #3]
				for (uint8_t i=0; i<5; i++)
 800037c:	2300      	movs	r3, #0
 800037e:	753b      	strb	r3, [r7, #20]
 8000380:	e00e      	b.n	80003a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>
				{
					if (speakerState[i][0] == 0)
 8000382:	7d3b      	ldrb	r3, [r7, #20]
 8000384:	4a4b      	ldr	r2, [pc, #300]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000386:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d105      	bne.n	800039a <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
					{
						speakerState[i][0] = speak_state_recue;
 800038e:	7d3b      	ldrb	r3, [r7, #20]
 8000390:	4a48      	ldr	r2, [pc, #288]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000392:	2106      	movs	r1, #6
 8000394:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
						return;
 8000398:	e13e      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
				for (uint8_t i=0; i<5; i++)
 800039a:	7d3b      	ldrb	r3, [r7, #20]
 800039c:	3301      	adds	r3, #1
 800039e:	753b      	strb	r3, [r7, #20]
 80003a0:	7d3b      	ldrb	r3, [r7, #20]
 80003a2:	2b04      	cmp	r3, #4
 80003a4:	d9ed      	bls.n	8000382 <HAL_CAN_RxFifo0MsgPendingCallback+0x15a>
 80003a6:	e137      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
					}
				}
			} else if (RxData[2] == 0x07)
 80003a8:	4b3e      	ldr	r3, [pc, #248]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80003aa:	789b      	ldrb	r3, [r3, #2]
 80003ac:	2b07      	cmp	r3, #7
 80003ae:	d126      	bne.n	80003fe <HAL_CAN_RxFifo0MsgPendingCallback+0x1d6>
			{
				if (RxData[2] != rxDataSave[2])
 80003b0:	4b3c      	ldr	r3, [pc, #240]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80003b2:	789a      	ldrb	r2, [r3, #2]
 80003b4:	4b3e      	ldr	r3, [pc, #248]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80003b6:	789b      	ldrb	r3, [r3, #2]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	f000 812d 	beq.w	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
				{
					rxDataSave[2] = RxData[2];
 80003be:	4b39      	ldr	r3, [pc, #228]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 80003c0:	789a      	ldrb	r2, [r3, #2]
 80003c2:	4b3b      	ldr	r3, [pc, #236]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80003c4:	709a      	strb	r2, [r3, #2]
					rxDataSave[4] = 0;
 80003c6:	4b3a      	ldr	r3, [pc, #232]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	711a      	strb	r2, [r3, #4]
					rxDataSave[3] = 0;
 80003cc:	4b38      	ldr	r3, [pc, #224]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	70da      	strb	r2, [r3, #3]
					for (uint8_t i=0; i<5; i++)
 80003d2:	2300      	movs	r3, #0
 80003d4:	74fb      	strb	r3, [r7, #19]
 80003d6:	e00e      	b.n	80003f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ce>
					{
						if (speakerState[i][0] == 0)
 80003d8:	7cfb      	ldrb	r3, [r7, #19]
 80003da:	4a36      	ldr	r2, [pc, #216]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80003dc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d105      	bne.n	80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
						{
							speakerState[i][0] = speak_state_floor;
 80003e4:	7cfb      	ldrb	r3, [r7, #19]
 80003e6:	4a33      	ldr	r2, [pc, #204]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 80003e8:	2107      	movs	r1, #7
 80003ea:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
							return;
 80003ee:	e113      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
					for (uint8_t i=0; i<5; i++)
 80003f0:	7cfb      	ldrb	r3, [r7, #19]
 80003f2:	3301      	adds	r3, #1
 80003f4:	74fb      	strb	r3, [r7, #19]
 80003f6:	7cfb      	ldrb	r3, [r7, #19]
 80003f8:	2b04      	cmp	r3, #4
 80003fa:	d9ed      	bls.n	80003d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>
 80003fc:	e10c      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
						}
					}
				}
			} else if (RxData[2] == 0x08 || RxData[2] == 0x0A)
 80003fe:	4b29      	ldr	r3, [pc, #164]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000400:	789b      	ldrb	r3, [r3, #2]
 8000402:	2b08      	cmp	r3, #8
 8000404:	d003      	beq.n	800040e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e6>
 8000406:	4b27      	ldr	r3, [pc, #156]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000408:	789b      	ldrb	r3, [r3, #2]
 800040a:	2b0a      	cmp	r3, #10
 800040c:	d11f      	bne.n	800044e <HAL_CAN_RxFifo0MsgPendingCallback+0x226>
			{
				rxDataSave[2] = RxData[2];
 800040e:	4b25      	ldr	r3, [pc, #148]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000410:	789a      	ldrb	r2, [r3, #2]
 8000412:	4b27      	ldr	r3, [pc, #156]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000414:	709a      	strb	r2, [r3, #2]
				rxDataSave[4] = 0;
 8000416:	4b26      	ldr	r3, [pc, #152]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000418:	2200      	movs	r2, #0
 800041a:	711a      	strb	r2, [r3, #4]
				rxDataSave[3] = 0;
 800041c:	4b24      	ldr	r3, [pc, #144]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800041e:	2200      	movs	r2, #0
 8000420:	70da      	strb	r2, [r3, #3]
				for (uint8_t i=0; i<5; i++)
 8000422:	2300      	movs	r3, #0
 8000424:	74bb      	strb	r3, [r7, #18]
 8000426:	e00e      	b.n	8000446 <HAL_CAN_RxFifo0MsgPendingCallback+0x21e>
				{
					if (speakerState[i][0] == 0)
 8000428:	7cbb      	ldrb	r3, [r7, #18]
 800042a:	4a22      	ldr	r2, [pc, #136]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 800042c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d105      	bne.n	8000440 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>
					{
						speakerState[i][0] = speak_state_fault;
 8000434:	7cbb      	ldrb	r3, [r7, #18]
 8000436:	4a1f      	ldr	r2, [pc, #124]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000438:	2108      	movs	r1, #8
 800043a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
						return;
 800043e:	e0eb      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
				for (uint8_t i=0; i<5; i++)
 8000440:	7cbb      	ldrb	r3, [r7, #18]
 8000442:	3301      	adds	r3, #1
 8000444:	74bb      	strb	r3, [r7, #18]
 8000446:	7cbb      	ldrb	r3, [r7, #18]
 8000448:	2b04      	cmp	r3, #4
 800044a:	d9ed      	bls.n	8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>
 800044c:	e0e4      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
					}
				}
			} else if (RxData[2] == 0x09)
 800044e:	4b15      	ldr	r3, [pc, #84]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000450:	789b      	ldrb	r3, [r3, #2]
 8000452:	2b09      	cmp	r3, #9
 8000454:	d130      	bne.n	80004b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x290>
			{
				if (RxData[2] != rxDataSave[2])
 8000456:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000458:	789a      	ldrb	r2, [r3, #2]
 800045a:	4b15      	ldr	r3, [pc, #84]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800045c:	789b      	ldrb	r3, [r3, #2]
 800045e:	429a      	cmp	r2, r3
 8000460:	f000 80da 	beq.w	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
				{
					rxDataSave[2] = RxData[2];
 8000464:	4b0f      	ldr	r3, [pc, #60]	@ (80004a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x27c>)
 8000466:	789a      	ldrb	r2, [r3, #2]
 8000468:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800046a:	709a      	strb	r2, [r3, #2]
					rxDataSave[4] = 0;
 800046c:	4b10      	ldr	r3, [pc, #64]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 800046e:	2200      	movs	r2, #0
 8000470:	711a      	strb	r2, [r3, #4]
					rxDataSave[3] = 0;
 8000472:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x288>)
 8000474:	2200      	movs	r2, #0
 8000476:	70da      	strb	r2, [r3, #3]
					for (uint8_t i=0; i<5; i++)
 8000478:	2300      	movs	r3, #0
 800047a:	747b      	strb	r3, [r7, #17]
 800047c:	e00e      	b.n	800049c <HAL_CAN_RxFifo0MsgPendingCallback+0x274>
					{
						if (speakerState[i][0] == 0)
 800047e:	7c7b      	ldrb	r3, [r7, #17]
 8000480:	4a0c      	ldr	r2, [pc, #48]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 8000482:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d105      	bne.n	8000496 <HAL_CAN_RxFifo0MsgPendingCallback+0x26e>
						{
							speakerState[i][0] = speak_state_VIP;
 800048a:	7c7b      	ldrb	r3, [r7, #17]
 800048c:	4a09      	ldr	r2, [pc, #36]	@ (80004b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>)
 800048e:	2109      	movs	r1, #9
 8000490:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
							return;
 8000494:	e0c0      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
					for (uint8_t i=0; i<5; i++)
 8000496:	7c7b      	ldrb	r3, [r7, #17]
 8000498:	3301      	adds	r3, #1
 800049a:	747b      	strb	r3, [r7, #17]
 800049c:	7c7b      	ldrb	r3, [r7, #17]
 800049e:	2b04      	cmp	r3, #4
 80004a0:	d9ed      	bls.n	800047e <HAL_CAN_RxFifo0MsgPendingCallback+0x256>
 80004a2:	e0b9      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
 80004a4:	2000014c 	.word	0x2000014c
 80004a8:	20000130 	.word	0x20000130
 80004ac:	200001b8 	.word	0x200001b8
 80004b0:	20000154 	.word	0x20000154
 80004b4:	200001a8 	.word	0x200001a8
						}
					}
				}
			} else if (RxData[2] == 0x0B)
 80004b8:	4b59      	ldr	r3, [pc, #356]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	2b0b      	cmp	r3, #11
 80004be:	f040 80ab 	bne.w	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
			{
				if (RxData[3] != rxDataSave[3])
 80004c2:	4b57      	ldr	r3, [pc, #348]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 80004c4:	78da      	ldrb	r2, [r3, #3]
 80004c6:	4b57      	ldr	r3, [pc, #348]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 80004c8:	78db      	ldrb	r3, [r3, #3]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	f000 80a4 	beq.w	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
				{
					rxDataSave[2] = RxData[2];
 80004d0:	4b53      	ldr	r3, [pc, #332]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 80004d2:	789a      	ldrb	r2, [r3, #2]
 80004d4:	4b53      	ldr	r3, [pc, #332]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 80004d6:	709a      	strb	r2, [r3, #2]
					rxDataSave[3] = RxData[3];
 80004d8:	4b51      	ldr	r3, [pc, #324]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 80004da:	78da      	ldrb	r2, [r3, #3]
 80004dc:	4b51      	ldr	r3, [pc, #324]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 80004de:	70da      	strb	r2, [r3, #3]
					rxDataSave[4] = 0;
 80004e0:	4b50      	ldr	r3, [pc, #320]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	711a      	strb	r2, [r3, #4]
					for (uint8_t i=0; i<5; i++)
 80004e6:	2300      	movs	r3, #0
 80004e8:	743b      	strb	r3, [r7, #16]
 80004ea:	e016      	b.n	800051a <HAL_CAN_RxFifo0MsgPendingCallback+0x2f2>
					{
						if (speakerState[i][0] == 0)
 80004ec:	7c3b      	ldrb	r3, [r7, #16]
 80004ee:	4a4e      	ldr	r2, [pc, #312]	@ (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 80004f0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d10d      	bne.n	8000514 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>
						{
							speakerState[i][0] = speak_state_direction;
 80004f8:	7c3b      	ldrb	r3, [r7, #16]
 80004fa:	4a4b      	ldr	r2, [pc, #300]	@ (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 80004fc:	210b      	movs	r1, #11
 80004fe:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
							speakerState[i][1] = RxData[3];
 8000502:	7c3b      	ldrb	r3, [r7, #16]
 8000504:	4a46      	ldr	r2, [pc, #280]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8000506:	78d1      	ldrb	r1, [r2, #3]
 8000508:	4a47      	ldr	r2, [pc, #284]	@ (8000628 <HAL_CAN_RxFifo0MsgPendingCallback+0x400>)
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	4413      	add	r3, r2
 800050e:	460a      	mov	r2, r1
 8000510:	705a      	strb	r2, [r3, #1]
							return;
 8000512:	e081      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
					for (uint8_t i=0; i<5; i++)
 8000514:	7c3b      	ldrb	r3, [r7, #16]
 8000516:	3301      	adds	r3, #1
 8000518:	743b      	strb	r3, [r7, #16]
 800051a:	7c3b      	ldrb	r3, [r7, #16]
 800051c:	2b04      	cmp	r3, #4
 800051e:	d9e5      	bls.n	80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>
 8000520:	e07a      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
					}
				}
			}
		} else
		{
			rxDataSave[2] = 0;
 8000522:	4b40      	ldr	r3, [pc, #256]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 8000524:	2200      	movs	r2, #0
 8000526:	709a      	strb	r2, [r3, #2]
			rxDataSave[3] = 0;
 8000528:	4b3e      	ldr	r3, [pc, #248]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 800052a:	2200      	movs	r2, #0
 800052c:	70da      	strb	r2, [r3, #3]
			rxDataSave[4] = 0;
 800052e:	4b3d      	ldr	r3, [pc, #244]	@ (8000624 <HAL_CAN_RxFifo0MsgPendingCallback+0x3fc>)
 8000530:	2200      	movs	r2, #0
 8000532:	711a      	strb	r2, [r3, #4]
 8000534:	e070      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
		}
	} else if (RxHeader.StdId == 0x502)
 8000536:	4b3d      	ldr	r3, [pc, #244]	@ (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0x404>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f240 5202 	movw	r2, #1282	@ 0x502
 800053e:	4293      	cmp	r3, r2
 8000540:	d108      	bne.n	8000554 <HAL_CAN_RxFifo0MsgPendingCallback+0x32c>
	{
		oneFloor = RxData[2];
 8000542:	4b37      	ldr	r3, [pc, #220]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8000544:	789a      	ldrb	r2, [r3, #2]
 8000546:	4b3a      	ldr	r3, [pc, #232]	@ (8000630 <HAL_CAN_RxFifo0MsgPendingCallback+0x408>)
 8000548:	701a      	strb	r2, [r3, #0]
		tenFloor = RxData[1];
 800054a:	4b35      	ldr	r3, [pc, #212]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 800054c:	785a      	ldrb	r2, [r3, #1]
 800054e:	4b39      	ldr	r3, [pc, #228]	@ (8000634 <HAL_CAN_RxFifo0MsgPendingCallback+0x40c>)
 8000550:	701a      	strb	r2, [r3, #0]
 8000552:	e061      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
	} else if (RxHeader.StdId == 0x503)
 8000554:	4b35      	ldr	r3, [pc, #212]	@ (800062c <HAL_CAN_RxFifo0MsgPendingCallback+0x404>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f240 5203 	movw	r2, #1283	@ 0x503
 800055c:	4293      	cmp	r3, r2
 800055e:	d15b      	bne.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
	{
		if ((RxData[0] & 0x01) ==  0x01)
 8000560:	4b2f      	ldr	r3, [pc, #188]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	f003 0301 	and.w	r3, r3, #1
 8000568:	2b00      	cmp	r3, #0
 800056a:	d055      	beq.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
		{
			if (RxData[0] != button[0] || RxData[2] != button[1] || RxData[3] != button[2])
 800056c:	4b2c      	ldr	r3, [pc, #176]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	4b31      	ldr	r3, [pc, #196]	@ (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	429a      	cmp	r2, r3
 8000576:	d10b      	bne.n	8000590 <HAL_CAN_RxFifo0MsgPendingCallback+0x368>
 8000578:	4b29      	ldr	r3, [pc, #164]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 800057a:	789a      	ldrb	r2, [r3, #2]
 800057c:	4b2e      	ldr	r3, [pc, #184]	@ (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	429a      	cmp	r2, r3
 8000582:	d105      	bne.n	8000590 <HAL_CAN_RxFifo0MsgPendingCallback+0x368>
 8000584:	4b26      	ldr	r3, [pc, #152]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8000586:	78da      	ldrb	r2, [r3, #3]
 8000588:	4b2b      	ldr	r3, [pc, #172]	@ (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 800058a:	789b      	ldrb	r3, [r3, #2]
 800058c:	429a      	cmp	r2, r3
 800058e:	d043      	beq.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
			{
				button[0] = RxData[0];
 8000590:	4b23      	ldr	r3, [pc, #140]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 8000596:	701a      	strb	r2, [r3, #0]
				button[1] = RxData[2];
 8000598:	4b21      	ldr	r3, [pc, #132]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 800059a:	789a      	ldrb	r2, [r3, #2]
 800059c:	4b26      	ldr	r3, [pc, #152]	@ (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 800059e:	705a      	strb	r2, [r3, #1]
				button[2] = RxData[3];
 80005a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 80005a2:	78da      	ldrb	r2, [r3, #3]
 80005a4:	4b24      	ldr	r3, [pc, #144]	@ (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 80005a6:	709a      	strb	r2, [r3, #2]
				for (uint8_t i=0; i<5; i++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]
 80005ac:	e031      	b.n	8000612 <HAL_CAN_RxFifo0MsgPendingCallback+0x3ea>
				{
					if (speakerButton[i][0] == 0)
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	4a22      	ldr	r2, [pc, #136]	@ (800063c <HAL_CAN_RxFifo0MsgPendingCallback+0x414>)
 80005b2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d128      	bne.n	800060c <HAL_CAN_RxFifo0MsgPendingCallback+0x3e4>
					{
						speakerButton[i][0] = 1;
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
 80005bc:	4a1f      	ldr	r2, [pc, #124]	@ (800063c <HAL_CAN_RxFifo0MsgPendingCallback+0x414>)
 80005be:	2101      	movs	r1, #1
 80005c0:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
						if ((RxData[0] & 0x04) ==  0x04)
 80005c4:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f8>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d006      	beq.n	80005de <HAL_CAN_RxFifo0MsgPendingCallback+0x3b6>
						{
							speakerButton[i][1] = 1;
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	4a1a      	ldr	r2, [pc, #104]	@ (800063c <HAL_CAN_RxFifo0MsgPendingCallback+0x414>)
 80005d4:	009b      	lsls	r3, r3, #2
 80005d6:	4413      	add	r3, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	705a      	strb	r2, [r3, #1]
 80005dc:	e005      	b.n	80005ea <HAL_CAN_RxFifo0MsgPendingCallback+0x3c2>
						} else
						{
							speakerButton[i][1] = 0;
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	4a16      	ldr	r2, [pc, #88]	@ (800063c <HAL_CAN_RxFifo0MsgPendingCallback+0x414>)
 80005e2:	009b      	lsls	r3, r3, #2
 80005e4:	4413      	add	r3, r2
 80005e6:	2200      	movs	r2, #0
 80005e8:	705a      	strb	r2, [r3, #1]
						}
						speakerButton[i][2] = button[1];
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	4a12      	ldr	r2, [pc, #72]	@ (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 80005ee:	7851      	ldrb	r1, [r2, #1]
 80005f0:	4a12      	ldr	r2, [pc, #72]	@ (800063c <HAL_CAN_RxFifo0MsgPendingCallback+0x414>)
 80005f2:	009b      	lsls	r3, r3, #2
 80005f4:	4413      	add	r3, r2
 80005f6:	460a      	mov	r2, r1
 80005f8:	709a      	strb	r2, [r3, #2]
						speakerButton[i][3] = button[2];
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000638 <HAL_CAN_RxFifo0MsgPendingCallback+0x410>)
 80005fe:	7891      	ldrb	r1, [r2, #2]
 8000600:	4a0e      	ldr	r2, [pc, #56]	@ (800063c <HAL_CAN_RxFifo0MsgPendingCallback+0x414>)
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	4413      	add	r3, r2
 8000606:	460a      	mov	r2, r1
 8000608:	70da      	strb	r2, [r3, #3]
						return;
 800060a:	e005      	b.n	8000618 <HAL_CAN_RxFifo0MsgPendingCallback+0x3f0>
				for (uint8_t i=0; i<5; i++)
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	3301      	adds	r3, #1
 8000610:	73fb      	strb	r3, [r7, #15]
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	2b04      	cmp	r3, #4
 8000616:	d9ca      	bls.n	80005ae <HAL_CAN_RxFifo0MsgPendingCallback+0x386>
					}
				}
			}
		}
	}
}
 8000618:	3718      	adds	r7, #24
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	2000014c 	.word	0x2000014c
 8000624:	20000154 	.word	0x20000154
 8000628:	200001a8 	.word	0x200001a8
 800062c:	20000130 	.word	0x20000130
 8000630:	2000018e 	.word	0x2000018e
 8000634:	2000018f 	.word	0x2000018f
 8000638:	200001b4 	.word	0x200001b4
 800063c:	20000194 	.word	0x20000194

08000640 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == huart2.Instance)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b15      	ldr	r3, [pc, #84]	@ (80006a8 <HAL_UARTEx_RxEventCallback+0x68>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	429a      	cmp	r2, r3
 8000656:	d122      	bne.n	800069e <HAL_UARTEx_RxEventCallback+0x5e>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart_data, Size);
 8000658:	887b      	ldrh	r3, [r7, #2]
 800065a:	461a      	mov	r2, r3
 800065c:	4913      	ldr	r1, [pc, #76]	@ (80006ac <HAL_UARTEx_RxEventCallback+0x6c>)
 800065e:	4812      	ldr	r0, [pc, #72]	@ (80006a8 <HAL_UARTEx_RxEventCallback+0x68>)
 8000660:	f003 facf 	bl	8003c02 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <HAL_UARTEx_RxEventCallback+0x70>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	681a      	ldr	r2, [r3, #0]
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <HAL_UARTEx_RxEventCallback+0x70>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f022 0204 	bic.w	r2, r2, #4
 8000672:	601a      	str	r2, [r3, #0]
		if (uart_data[3] == 0x3D || uart_data[3] == 0x3F)
 8000674:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <HAL_UARTEx_RxEventCallback+0x6c>)
 8000676:	78db      	ldrb	r3, [r3, #3]
 8000678:	2b3d      	cmp	r3, #61	@ 0x3d
 800067a:	d003      	beq.n	8000684 <HAL_UARTEx_RxEventCallback+0x44>
 800067c:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <HAL_UARTEx_RxEventCallback+0x6c>)
 800067e:	78db      	ldrb	r3, [r3, #3]
 8000680:	2b3f      	cmp	r3, #63	@ 0x3f
 8000682:	d10c      	bne.n	800069e <HAL_UARTEx_RxEventCallback+0x5e>
		{
			feedbackSpeaker = (uart_data[5]<<8)|uart_data[6];
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <HAL_UARTEx_RxEventCallback+0x6c>)
 8000686:	795b      	ldrb	r3, [r3, #5]
 8000688:	b21b      	sxth	r3, r3
 800068a:	021b      	lsls	r3, r3, #8
 800068c:	b21a      	sxth	r2, r3
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <HAL_UARTEx_RxEventCallback+0x6c>)
 8000690:	799b      	ldrb	r3, [r3, #6]
 8000692:	b21b      	sxth	r3, r3
 8000694:	4313      	orrs	r3, r2
 8000696:	b21b      	sxth	r3, r3
 8000698:	b29a      	uxth	r2, r3
 800069a:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <HAL_UARTEx_RxEventCallback+0x74>)
 800069c:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	200000a4 	.word	0x200000a4
 80006ac:	2000015c 	.word	0x2000015c
 80006b0:	200000ec 	.word	0x200000ec
 80006b4:	200001ba 	.word	0x200001ba

080006b8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <HAL_TIM_PeriodElapsedCallback+0x24>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d102      	bne.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_IWDG_Refresh(&hiwdg);
 80006cc:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80006ce:	f002 f9a9 	bl	8002a24 <HAL_IWDG_Refresh>
	}
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000005c 	.word	0x2000005c
 80006e0:	20000050 	.word	0x20000050

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e6:	b08b      	sub	sp, #44	@ 0x2c
 80006e8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f000 fdf9 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f9cb 	bl	8000a88 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_DBGMCU_FREEZE_IWDG();
 80006f2:	4ba2      	ldr	r3, [pc, #648]	@ (800097c <main+0x298>)
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	4aa1      	ldr	r2, [pc, #644]	@ (800097c <main+0x298>)
 80006f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006fc:	6053      	str	r3, [r2, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fe:	f000 faf3 	bl	8000ce8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000702:	f000 fad3 	bl	8000cac <MX_DMA_Init>
  MX_CAN_Init();
 8000706:	f000 fa07 	bl	8000b18 <MX_CAN_Init>
  MX_USART2_UART_Init();
 800070a:	f000 faa5 	bl	8000c58 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800070e:	f000 fa55 	bl	8000bbc <MX_TIM3_Init>
  MX_IWDG_Init();
 8000712:	f000 fa39 	bl	8000b88 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000716:	489a      	ldr	r0, [pc, #616]	@ (8000980 <main+0x29c>)
 8000718:	f002 fdf6 	bl	8003308 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart_data, 50);
 800071c:	2232      	movs	r2, #50	@ 0x32
 800071e:	4999      	ldr	r1, [pc, #612]	@ (8000984 <main+0x2a0>)
 8000720:	4899      	ldr	r0, [pc, #612]	@ (8000988 <main+0x2a4>)
 8000722:	f003 fa6e 	bl	8003c02 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000726:	4b99      	ldr	r3, [pc, #612]	@ (800098c <main+0x2a8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b97      	ldr	r3, [pc, #604]	@ (800098c <main+0x2a8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f022 0204 	bic.w	r2, r2, #4
 8000734:	601a      	str	r2, [r3, #0]
  while (!detect_speed)
 8000736:	e050      	b.n	80007da <main+0xf6>
  {
	  if (!read_speed)
 8000738:	4b95      	ldr	r3, [pc, #596]	@ (8000990 <main+0x2ac>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	f083 0301 	eor.w	r3, r3, #1
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d032      	beq.n	80007ac <main+0xc8>
	  {
		  if (abs(HAL_GetTick() - timer) > 500)
 8000746:	f000 fe23 	bl	8001390 <HAL_GetTick>
 800074a:	4602      	mov	r2, r0
 800074c:	4b91      	ldr	r3, [pc, #580]	@ (8000994 <main+0x2b0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	bfb8      	it	lt
 8000756:	425b      	neglt	r3, r3
 8000758:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800075c:	dd3d      	ble.n	80007da <main+0xf6>
		  {
			  timer = HAL_GetTick();
 800075e:	f000 fe17 	bl	8001390 <HAL_GetTick>
 8000762:	4603      	mov	r3, r0
 8000764:	4a8b      	ldr	r2, [pc, #556]	@ (8000994 <main+0x2b0>)
 8000766:	6013      	str	r3, [r2, #0]
			  speed ++;
 8000768:	4b8b      	ldr	r3, [pc, #556]	@ (8000998 <main+0x2b4>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b89      	ldr	r3, [pc, #548]	@ (8000998 <main+0x2b4>)
 8000772:	701a      	strb	r2, [r3, #0]
			  if (speed > 3)
 8000774:	4b88      	ldr	r3, [pc, #544]	@ (8000998 <main+0x2b4>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b03      	cmp	r3, #3
 800077a:	d902      	bls.n	8000782 <main+0x9e>
			  {
				  speed = 1;
 800077c:	4b86      	ldr	r3, [pc, #536]	@ (8000998 <main+0x2b4>)
 800077e:	2201      	movs	r2, #1
 8000780:	701a      	strb	r2, [r3, #0]
			  }
			  Set_speed_can(hcan, detect_speed, speed);
 8000782:	4b86      	ldr	r3, [pc, #536]	@ (800099c <main+0x2b8>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	4a84      	ldr	r2, [pc, #528]	@ (8000998 <main+0x2b4>)
 8000788:	7812      	ldrb	r2, [r2, #0]
 800078a:	4e85      	ldr	r6, [pc, #532]	@ (80009a0 <main+0x2bc>)
 800078c:	9207      	str	r2, [sp, #28]
 800078e:	9306      	str	r3, [sp, #24]
 8000790:	466d      	mov	r5, sp
 8000792:	f106 0410 	add.w	r4, r6, #16
 8000796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800079a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800079e:	e885 0003 	stmia.w	r5, {r0, r1}
 80007a2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007a6:	f000 faeb 	bl	8000d80 <Set_speed_can>
 80007aa:	e016      	b.n	80007da <main+0xf6>
		  }
	  } else
	  {
		  detect_speed = true;
 80007ac:	4b7b      	ldr	r3, [pc, #492]	@ (800099c <main+0x2b8>)
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
		  Set_speed_can(hcan, detect_speed, speed);
 80007b2:	4b7a      	ldr	r3, [pc, #488]	@ (800099c <main+0x2b8>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	4a78      	ldr	r2, [pc, #480]	@ (8000998 <main+0x2b4>)
 80007b8:	7812      	ldrb	r2, [r2, #0]
 80007ba:	4e79      	ldr	r6, [pc, #484]	@ (80009a0 <main+0x2bc>)
 80007bc:	9207      	str	r2, [sp, #28]
 80007be:	9306      	str	r3, [sp, #24]
 80007c0:	466d      	mov	r5, sp
 80007c2:	f106 0410 	add.w	r4, r6, #16
 80007c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80007ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80007d2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007d6:	f000 fad3 	bl	8000d80 <Set_speed_can>
  while (!detect_speed)
 80007da:	4b70      	ldr	r3, [pc, #448]	@ (800099c <main+0x2b8>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	f083 0301 	eor.w	r3, r3, #1
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1a7      	bne.n	8000738 <main+0x54>
	  }
  }
  HAL_Delay(1000);
 80007e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007ec:	f000 fdda 	bl	80013a4 <HAL_Delay>
  DF_Init(30);
 80007f0:	201e      	movs	r0, #30
 80007f2:	f7ff fceb 	bl	80001cc <DF_Init>
  while (feedbackSpeaker != 0x02);
 80007f6:	bf00      	nop
 80007f8:	4b6a      	ldr	r3, [pc, #424]	@ (80009a4 <main+0x2c0>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d1fb      	bne.n	80007f8 <main+0x114>
  feedbackSpeaker = 0;
 8000800:	4b68      	ldr	r3, [pc, #416]	@ (80009a4 <main+0x2c0>)
 8000802:	2200      	movs	r2, #0
 8000804:	801a      	strh	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (speakerButton[0][0] == 1)
 8000806:	4b68      	ldr	r3, [pc, #416]	@ (80009a8 <main+0x2c4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d158      	bne.n	80008c0 <main+0x1dc>
	  {
		  if (speakerButton[0][1] == 1)
 800080e:	4b66      	ldr	r3, [pc, #408]	@ (80009a8 <main+0x2c4>)
 8000810:	785b      	ldrb	r3, [r3, #1]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d10a      	bne.n	800082c <main+0x148>
		  {
			  // đọc cancel
			  DF_Play(41);
 8000816:	2029      	movs	r0, #41	@ 0x29
 8000818:	f7ff fcf3 	bl	8000202 <DF_Play>
			  while (feedbackSpeaker != 41);
 800081c:	bf00      	nop
 800081e:	4b61      	ldr	r3, [pc, #388]	@ (80009a4 <main+0x2c0>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	2b29      	cmp	r3, #41	@ 0x29
 8000824:	d1fb      	bne.n	800081e <main+0x13a>
			  feedbackSpeaker = 0;
 8000826:	4b5f      	ldr	r3, [pc, #380]	@ (80009a4 <main+0x2c0>)
 8000828:	2200      	movs	r2, #0
 800082a:	801a      	strh	r2, [r3, #0]
//			  HAL_Delay(100);
		  }
		  // đọc tầng
		  speaker_floor(speakerButton[0][2], speakerButton[0][3]);
 800082c:	4b5e      	ldr	r3, [pc, #376]	@ (80009a8 <main+0x2c4>)
 800082e:	789b      	ldrb	r3, [r3, #2]
 8000830:	4a5d      	ldr	r2, [pc, #372]	@ (80009a8 <main+0x2c4>)
 8000832:	78d2      	ldrb	r2, [r2, #3]
 8000834:	4611      	mov	r1, r2
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fb62 	bl	8000f00 <speaker_floor>
		  for (uint8_t i=0; i<4; i++)
 800083c:	2300      	movs	r3, #0
 800083e:	71fb      	strb	r3, [r7, #7]
 8000840:	e02f      	b.n	80008a2 <main+0x1be>
		  {
			  speakerButton[i][0] = speakerButton[i+1][0];
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	4957      	ldr	r1, [pc, #348]	@ (80009a8 <main+0x2c4>)
 800084a:	f811 1022 	ldrb.w	r1, [r1, r2, lsl #2]
 800084e:	4a56      	ldr	r2, [pc, #344]	@ (80009a8 <main+0x2c4>)
 8000850:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
			  speakerButton[i][1] = speakerButton[i+1][1];
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	3301      	adds	r3, #1
 8000858:	79fa      	ldrb	r2, [r7, #7]
 800085a:	4953      	ldr	r1, [pc, #332]	@ (80009a8 <main+0x2c4>)
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	440b      	add	r3, r1
 8000860:	7858      	ldrb	r0, [r3, #1]
 8000862:	4951      	ldr	r1, [pc, #324]	@ (80009a8 <main+0x2c4>)
 8000864:	0093      	lsls	r3, r2, #2
 8000866:	440b      	add	r3, r1
 8000868:	4602      	mov	r2, r0
 800086a:	705a      	strb	r2, [r3, #1]
			  speakerButton[i][2] = speakerButton[i+1][2];
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	3301      	adds	r3, #1
 8000870:	79fa      	ldrb	r2, [r7, #7]
 8000872:	494d      	ldr	r1, [pc, #308]	@ (80009a8 <main+0x2c4>)
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	440b      	add	r3, r1
 8000878:	7898      	ldrb	r0, [r3, #2]
 800087a:	494b      	ldr	r1, [pc, #300]	@ (80009a8 <main+0x2c4>)
 800087c:	0093      	lsls	r3, r2, #2
 800087e:	440b      	add	r3, r1
 8000880:	4602      	mov	r2, r0
 8000882:	709a      	strb	r2, [r3, #2]
			  speakerButton[i][3] = speakerButton[i+1][3];
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	3301      	adds	r3, #1
 8000888:	79fa      	ldrb	r2, [r7, #7]
 800088a:	4947      	ldr	r1, [pc, #284]	@ (80009a8 <main+0x2c4>)
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	440b      	add	r3, r1
 8000890:	78d8      	ldrb	r0, [r3, #3]
 8000892:	4945      	ldr	r1, [pc, #276]	@ (80009a8 <main+0x2c4>)
 8000894:	0093      	lsls	r3, r2, #2
 8000896:	440b      	add	r3, r1
 8000898:	4602      	mov	r2, r0
 800089a:	70da      	strb	r2, [r3, #3]
		  for (uint8_t i=0; i<4; i++)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	3301      	adds	r3, #1
 80008a0:	71fb      	strb	r3, [r7, #7]
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	d9cc      	bls.n	8000842 <main+0x15e>
		  }
		  speakerButton[4][0] = 0;
 80008a8:	4b3f      	ldr	r3, [pc, #252]	@ (80009a8 <main+0x2c4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	741a      	strb	r2, [r3, #16]
		  speakerButton[4][1] = 0;
 80008ae:	4b3e      	ldr	r3, [pc, #248]	@ (80009a8 <main+0x2c4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	745a      	strb	r2, [r3, #17]
		  speakerButton[4][2] = 0;
 80008b4:	4b3c      	ldr	r3, [pc, #240]	@ (80009a8 <main+0x2c4>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	749a      	strb	r2, [r3, #18]
		  speakerButton[4][3] = 0;
 80008ba:	4b3b      	ldr	r3, [pc, #236]	@ (80009a8 <main+0x2c4>)
 80008bc:	2200      	movs	r2, #0
 80008be:	74da      	strb	r2, [r3, #19]
	  }
	  if (speakerState[0][0] != 0)
 80008c0:	4b3a      	ldr	r3, [pc, #232]	@ (80009ac <main+0x2c8>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f000 80d3 	beq.w	8000a70 <main+0x38c>
	  {
		  switch (speakerState[0][0])
 80008ca:	4b38      	ldr	r3, [pc, #224]	@ (80009ac <main+0x2c8>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b0b      	cmp	r3, #11
 80008d0:	d02e      	beq.n	8000930 <main+0x24c>
 80008d2:	2b0b      	cmp	r3, #11
 80008d4:	f300 8091 	bgt.w	80009fa <main+0x316>
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d002      	beq.n	80008e2 <main+0x1fe>
 80008dc:	2b07      	cmp	r3, #7
 80008de:	d067      	beq.n	80009b0 <main+0x2cc>
 80008e0:	e08b      	b.n	80009fa <main+0x316>
		  {
		  case speak_state_door:
			  if (speakerState[0][1] == 1)
 80008e2:	4b32      	ldr	r3, [pc, #200]	@ (80009ac <main+0x2c8>)
 80008e4:	785b      	ldrb	r3, [r3, #1]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d10e      	bne.n	8000908 <main+0x224>
			  {
				  DF_Play(35); // open
 80008ea:	2023      	movs	r0, #35	@ 0x23
 80008ec:	f7ff fc89 	bl	8000202 <DF_Play>
				  while (feedbackSpeaker != 35);
 80008f0:	bf00      	nop
 80008f2:	4b2c      	ldr	r3, [pc, #176]	@ (80009a4 <main+0x2c0>)
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	2b23      	cmp	r3, #35	@ 0x23
 80008f8:	d1fb      	bne.n	80008f2 <main+0x20e>
				  feedbackSpeaker = 0;
 80008fa:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <main+0x2c0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	801a      	strh	r2, [r3, #0]
				  HAL_Delay(200);
 8000900:	20c8      	movs	r0, #200	@ 0xc8
 8000902:	f000 fd4f 	bl	80013a4 <HAL_Delay>
				  DF_Play(36); // close
				  while (feedbackSpeaker != 36);
				  feedbackSpeaker = 0;
				  HAL_Delay(200);
			  }
			  break;
 8000906:	e08c      	b.n	8000a22 <main+0x33e>
			  } else if (speakerState[0][1] == 2)
 8000908:	4b28      	ldr	r3, [pc, #160]	@ (80009ac <main+0x2c8>)
 800090a:	785b      	ldrb	r3, [r3, #1]
 800090c:	2b02      	cmp	r3, #2
 800090e:	f040 8088 	bne.w	8000a22 <main+0x33e>
				  DF_Play(36); // close
 8000912:	2024      	movs	r0, #36	@ 0x24
 8000914:	f7ff fc75 	bl	8000202 <DF_Play>
				  while (feedbackSpeaker != 36);
 8000918:	bf00      	nop
 800091a:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <main+0x2c0>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	2b24      	cmp	r3, #36	@ 0x24
 8000920:	d1fb      	bne.n	800091a <main+0x236>
				  feedbackSpeaker = 0;
 8000922:	4b20      	ldr	r3, [pc, #128]	@ (80009a4 <main+0x2c0>)
 8000924:	2200      	movs	r2, #0
 8000926:	801a      	strh	r2, [r3, #0]
				  HAL_Delay(200);
 8000928:	20c8      	movs	r0, #200	@ 0xc8
 800092a:	f000 fd3b 	bl	80013a4 <HAL_Delay>
			  break;
 800092e:	e078      	b.n	8000a22 <main+0x33e>
		  case speak_state_direction:
			  if (speakerState[0][1] == 1)
 8000930:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <main+0x2c8>)
 8000932:	785b      	ldrb	r3, [r3, #1]
 8000934:	2b01      	cmp	r3, #1
 8000936:	d10e      	bne.n	8000956 <main+0x272>
			  {
				  DF_Play(37); //  up
 8000938:	2025      	movs	r0, #37	@ 0x25
 800093a:	f7ff fc62 	bl	8000202 <DF_Play>
				  while (feedbackSpeaker != 37);
 800093e:	bf00      	nop
 8000940:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <main+0x2c0>)
 8000942:	881b      	ldrh	r3, [r3, #0]
 8000944:	2b25      	cmp	r3, #37	@ 0x25
 8000946:	d1fb      	bne.n	8000940 <main+0x25c>
				  feedbackSpeaker = 0;
 8000948:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <main+0x2c0>)
 800094a:	2200      	movs	r2, #0
 800094c:	801a      	strh	r2, [r3, #0]
				  HAL_Delay(200);
 800094e:	20c8      	movs	r0, #200	@ 0xc8
 8000950:	f000 fd28 	bl	80013a4 <HAL_Delay>
				  DF_Play(38); // down
				  while (feedbackSpeaker != 38);
				  feedbackSpeaker = 0;
				  HAL_Delay(200);
			  }
			  break;
 8000954:	e067      	b.n	8000a26 <main+0x342>
			  } else if (speakerState[0][1] == 2)
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <main+0x2c8>)
 8000958:	785b      	ldrb	r3, [r3, #1]
 800095a:	2b02      	cmp	r3, #2
 800095c:	d163      	bne.n	8000a26 <main+0x342>
				  DF_Play(38); // down
 800095e:	2026      	movs	r0, #38	@ 0x26
 8000960:	f7ff fc4f 	bl	8000202 <DF_Play>
				  while (feedbackSpeaker != 38);
 8000964:	bf00      	nop
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <main+0x2c0>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	2b26      	cmp	r3, #38	@ 0x26
 800096c:	d1fb      	bne.n	8000966 <main+0x282>
				  feedbackSpeaker = 0;
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <main+0x2c0>)
 8000970:	2200      	movs	r2, #0
 8000972:	801a      	strh	r2, [r3, #0]
				  HAL_Delay(200);
 8000974:	20c8      	movs	r0, #200	@ 0xc8
 8000976:	f000 fd15 	bl	80013a4 <HAL_Delay>
			  break;
 800097a:	e054      	b.n	8000a26 <main+0x342>
 800097c:	e0042000 	.word	0xe0042000
 8000980:	2000005c 	.word	0x2000005c
 8000984:	2000015c 	.word	0x2000015c
 8000988:	200000a4 	.word	0x200000a4
 800098c:	200000ec 	.word	0x200000ec
 8000990:	200001b8 	.word	0x200001b8
 8000994:	200001bc 	.word	0x200001bc
 8000998:	20000190 	.word	0x20000190
 800099c:	200001b7 	.word	0x200001b7
 80009a0:	20000028 	.word	0x20000028
 80009a4:	200001ba 	.word	0x200001ba
 80009a8:	20000194 	.word	0x20000194
 80009ac:	200001a8 	.word	0x200001a8
		  case speak_state_floor:
			  DF_Play(42); // ding dong
 80009b0:	202a      	movs	r0, #42	@ 0x2a
 80009b2:	f7ff fc26 	bl	8000202 <DF_Play>
			  while (feedbackSpeaker != 42);
 80009b6:	bf00      	nop
 80009b8:	4b2f      	ldr	r3, [pc, #188]	@ (8000a78 <main+0x394>)
 80009ba:	881b      	ldrh	r3, [r3, #0]
 80009bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80009be:	d1fb      	bne.n	80009b8 <main+0x2d4>
			  feedbackSpeaker = 0;
 80009c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a78 <main+0x394>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	801a      	strh	r2, [r3, #0]
			  HAL_Delay(100);
 80009c6:	2064      	movs	r0, #100	@ 0x64
 80009c8:	f000 fcec 	bl	80013a4 <HAL_Delay>
			  // đọc tầng
			  speaker_floor(tenFloor, oneFloor);
 80009cc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a7c <main+0x398>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	4a2b      	ldr	r2, [pc, #172]	@ (8000a80 <main+0x39c>)
 80009d2:	7812      	ldrb	r2, [r2, #0]
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 fa92 	bl	8000f00 <speaker_floor>
//			  HAL_Delay(200);
			  DF_Play(43); // floor
 80009dc:	202b      	movs	r0, #43	@ 0x2b
 80009de:	f7ff fc10 	bl	8000202 <DF_Play>
			  while (feedbackSpeaker != 43);
 80009e2:	bf00      	nop
 80009e4:	4b24      	ldr	r3, [pc, #144]	@ (8000a78 <main+0x394>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	2b2b      	cmp	r3, #43	@ 0x2b
 80009ea:	d1fb      	bne.n	80009e4 <main+0x300>
			  feedbackSpeaker = 0;
 80009ec:	4b22      	ldr	r3, [pc, #136]	@ (8000a78 <main+0x394>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	801a      	strh	r2, [r3, #0]
			  HAL_Delay(200);
 80009f2:	20c8      	movs	r0, #200	@ 0xc8
 80009f4:	f000 fcd6 	bl	80013a4 <HAL_Delay>
			  break;
 80009f8:	e016      	b.n	8000a28 <main+0x344>
		  default:
			  DF_Play(speakerState[0][0]);
 80009fa:	4b22      	ldr	r3, [pc, #136]	@ (8000a84 <main+0x3a0>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fbff 	bl	8000202 <DF_Play>

//			  DF_Play_from_Folder(1, speakerState[0][0]);
			  while (feedbackSpeaker != speakerState[0][0]);
 8000a04:	bf00      	nop
 8000a06:	4b1f      	ldr	r3, [pc, #124]	@ (8000a84 <main+0x3a0>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a78 <main+0x394>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d1f8      	bne.n	8000a06 <main+0x322>
			  feedbackSpeaker = 0;
 8000a14:	4b18      	ldr	r3, [pc, #96]	@ (8000a78 <main+0x394>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	801a      	strh	r2, [r3, #0]
			  HAL_Delay(200);
 8000a1a:	20c8      	movs	r0, #200	@ 0xc8
 8000a1c:	f000 fcc2 	bl	80013a4 <HAL_Delay>
			  break;
 8000a20:	e002      	b.n	8000a28 <main+0x344>
			  break;
 8000a22:	bf00      	nop
 8000a24:	e000      	b.n	8000a28 <main+0x344>
			  break;
 8000a26:	bf00      	nop
		  }
		  for (uint8_t i=0; i<4; i++)
 8000a28:	2300      	movs	r3, #0
 8000a2a:	71bb      	strb	r3, [r7, #6]
 8000a2c:	e017      	b.n	8000a5e <main+0x37a>
		  {
			  speakerState[i][0] = speakerState[i+1][0];
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	1c5a      	adds	r2, r3, #1
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	4913      	ldr	r1, [pc, #76]	@ (8000a84 <main+0x3a0>)
 8000a36:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 8000a3a:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <main+0x3a0>)
 8000a3c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
			  speakerState[i][1] = speakerState[i+1][1];
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	3301      	adds	r3, #1
 8000a44:	79ba      	ldrb	r2, [r7, #6]
 8000a46:	490f      	ldr	r1, [pc, #60]	@ (8000a84 <main+0x3a0>)
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	440b      	add	r3, r1
 8000a4c:	7858      	ldrb	r0, [r3, #1]
 8000a4e:	490d      	ldr	r1, [pc, #52]	@ (8000a84 <main+0x3a0>)
 8000a50:	0053      	lsls	r3, r2, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	4602      	mov	r2, r0
 8000a56:	705a      	strb	r2, [r3, #1]
		  for (uint8_t i=0; i<4; i++)
 8000a58:	79bb      	ldrb	r3, [r7, #6]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	71bb      	strb	r3, [r7, #6]
 8000a5e:	79bb      	ldrb	r3, [r7, #6]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d9e4      	bls.n	8000a2e <main+0x34a>
		  }
		  speakerState[4][0] = 0;
 8000a64:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <main+0x3a0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	721a      	strb	r2, [r3, #8]
		  speakerState[4][1] = 0;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <main+0x3a0>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	725a      	strb	r2, [r3, #9]
	  }
	  HAL_Delay(100);
 8000a70:	2064      	movs	r0, #100	@ 0x64
 8000a72:	f000 fc97 	bl	80013a4 <HAL_Delay>
	  if (speakerButton[0][0] == 1)
 8000a76:	e6c6      	b.n	8000806 <main+0x122>
 8000a78:	200001ba 	.word	0x200001ba
 8000a7c:	2000018f 	.word	0x2000018f
 8000a80:	2000018e 	.word	0x2000018e
 8000a84:	200001a8 	.word	0x200001a8

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b090      	sub	sp, #64	@ 0x40
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 0318 	add.w	r3, r7, #24
 8000a92:	2228      	movs	r2, #40	@ 0x28
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 f804 	bl	8004aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	1d3b      	adds	r3, r7, #4
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000aaa:	2309      	movs	r3, #9
 8000aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000ab4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000ab8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aba:	2301      	movs	r3, #1
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000aca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000acc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f001 ffb4 	bl	8002a44 <HAL_RCC_OscConfig>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000ae2:	f000 fa4f 	bl	8000f84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae6:	230f      	movs	r3, #15
 8000ae8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aea:	2302      	movs	r3, #2
 8000aec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2102      	movs	r1, #2
 8000b00:	4618      	mov	r0, r3
 8000b02:	f002 fa21 	bl	8002f48 <HAL_RCC_ClockConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000b0c:	f000 fa3a 	bl	8000f84 <Error_Handler>
  }
}
 8000b10:	bf00      	nop
 8000b12:	3740      	adds	r7, #64	@ 0x40
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b1e:	4a19      	ldr	r2, [pc, #100]	@ (8000b84 <MX_CAN_Init+0x6c>)
 8000b20:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 36;
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b24:	2224      	movs	r2, #36	@ 0x24
 8000b26:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000b28:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000b2e:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b30:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b34:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000b36:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b38:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000b3c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000b3e:	4b10      	ldr	r3, [pc, #64]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b40:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b44:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000b58:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000b6a:	4805      	ldr	r0, [pc, #20]	@ (8000b80 <MX_CAN_Init+0x68>)
 8000b6c:	f000 fc3e 	bl	80013ec <HAL_CAN_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000b76:	f000 fa05 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000028 	.word	0x20000028
 8000b84:	40006400 	.word	0x40006400

08000b88 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_IWDG_Init+0x2c>)
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb8 <MX_IWDG_Init+0x30>)
 8000b90:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_IWDG_Init+0x2c>)
 8000b94:	2204      	movs	r2, #4
 8000b96:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_IWDG_Init+0x2c>)
 8000b9a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000b9e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	@ (8000bb4 <MX_IWDG_Init+0x2c>)
 8000ba2:	f001 fefb 	bl	800299c <HAL_IWDG_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000bac:	f000 f9ea 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000050 	.word	0x20000050
 8000bb8:	40003000 	.word	0x40003000

08000bbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c50 <MX_TIM3_Init+0x94>)
 8000bda:	4a1e      	ldr	r2, [pc, #120]	@ (8000c54 <MX_TIM3_Init+0x98>)
 8000bdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <MX_TIM3_Init+0x94>)
 8000be0:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000be4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <MX_TIM3_Init+0x94>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <MX_TIM3_Init+0x94>)
 8000bee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bf2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	@ (8000c50 <MX_TIM3_Init+0x94>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <MX_TIM3_Init+0x94>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c00:	4813      	ldr	r0, [pc, #76]	@ (8000c50 <MX_TIM3_Init+0x94>)
 8000c02:	f002 fb31 	bl	8003268 <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000c0c:	f000 f9ba 	bl	8000f84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <MX_TIM3_Init+0x94>)
 8000c1e:	f002 fcb5 	bl	800358c <HAL_TIM_ConfigClockSource>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c28:	f000 f9ac 	bl	8000f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	4619      	mov	r1, r3
 8000c38:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_TIM3_Init+0x94>)
 8000c3a:	f002 fe97 	bl	800396c <HAL_TIMEx_MasterConfigSynchronization>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000c44:	f000 f99e 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000005c 	.word	0x2000005c
 8000c54:	40000400 	.word	0x40000400

08000c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	4a12      	ldr	r2, [pc, #72]	@ (8000ca8 <MX_USART2_UART_Init+0x50>)
 8000c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c64:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	220c      	movs	r2, #12
 8000c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c82:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c8e:	4805      	ldr	r0, [pc, #20]	@ (8000ca4 <MX_USART2_UART_Init+0x4c>)
 8000c90:	f002 fedc 	bl	8003a4c <HAL_UART_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c9a:	f000 f973 	bl	8000f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	200000a4 	.word	0x200000a4
 8000ca8:	40004400 	.word	0x40004400

08000cac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce4 <MX_DMA_Init+0x38>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce4 <MX_DMA_Init+0x38>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6153      	str	r3, [r2, #20]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <MX_DMA_Init+0x38>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	2010      	movs	r0, #16
 8000cd0:	f001 f9eb 	bl	80020aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000cd4:	2010      	movs	r0, #16
 8000cd6:	f001 fa04 	bl	80020e2 <HAL_NVIC_EnableIRQ>

}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <MX_GPIO_Init+0x90>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a1d      	ldr	r2, [pc, #116]	@ (8000d78 <MX_GPIO_Init+0x90>)
 8000d02:	f043 0320 	orr.w	r3, r3, #32
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <MX_GPIO_Init+0x90>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0320 	and.w	r3, r3, #32
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <MX_GPIO_Init+0x90>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	4a17      	ldr	r2, [pc, #92]	@ (8000d78 <MX_GPIO_Init+0x90>)
 8000d1a:	f043 0304 	orr.w	r3, r3, #4
 8000d1e:	6193      	str	r3, [r2, #24]
 8000d20:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <MX_GPIO_Init+0x90>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f003 0304 	and.w	r3, r3, #4
 8000d28:	60bb      	str	r3, [r7, #8]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <MX_GPIO_Init+0x90>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a11      	ldr	r2, [pc, #68]	@ (8000d78 <MX_GPIO_Init+0x90>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <MX_GPIO_Init+0x90>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S_CAN_GPIO_Port, S_CAN_Pin, GPIO_PIN_RESET);
 8000d44:	2200      	movs	r2, #0
 8000d46:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d4a:	480c      	ldr	r0, [pc, #48]	@ (8000d7c <MX_GPIO_Init+0x94>)
 8000d4c:	f001 fe0e 	bl	800296c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : S_CAN_Pin */
  GPIO_InitStruct.Pin = S_CAN_Pin;
 8000d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S_CAN_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0310 	add.w	r3, r7, #16
 8000d66:	4619      	mov	r1, r3
 8000d68:	4804      	ldr	r0, [pc, #16]	@ (8000d7c <MX_GPIO_Init+0x94>)
 8000d6a:	f001 fc7b 	bl	8002664 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d6e:	bf00      	nop
 8000d70:	3720      	adds	r7, #32
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010c00 	.word	0x40010c00

08000d80 <Set_speed_can>:

/* USER CODE BEGIN 4 */

void Set_speed_can(CAN_HandleTypeDef hcan, bool detect_speed, uint8_t speed)
{
 8000d80:	b084      	sub	sp, #16
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b08a      	sub	sp, #40	@ 0x28
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 8000d8c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hcan.Init.Mode = CAN_MODE_SILENT;
 8000d90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000d94:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (speed == 1)
 8000d96:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d108      	bne.n	8000db0 <Set_speed_can+0x30>
	{
		hcan.Init.Prescaler = 30;
 8000d9e:	231e      	movs	r3, #30
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
		hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000da2:	f44f 23e0 	mov.w	r3, #458752	@ 0x70000
 8000da6:	643b      	str	r3, [r7, #64]	@ 0x40
		hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000da8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000dac:	647b      	str	r3, [r7, #68]	@ 0x44
 8000dae:	e018      	b.n	8000de2 <Set_speed_can+0x62>
	} else if (speed == 2)
 8000db0:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d108      	bne.n	8000dca <Set_speed_can+0x4a>
	{
		hcan.Init.Prescaler = 40;
 8000db8:	2328      	movs	r3, #40	@ 0x28
 8000dba:	637b      	str	r3, [r7, #52]	@ 0x34
		hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000dbc:	f44f 2330 	mov.w	r3, #720896	@ 0xb0000
 8000dc0:	643b      	str	r3, [r7, #64]	@ 0x40
		hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000dc2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8000dc8:	e00b      	b.n	8000de2 <Set_speed_can+0x62>
	} else if (speed == 3)
 8000dca:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d107      	bne.n	8000de2 <Set_speed_can+0x62>
	{
		hcan.Init.Prescaler = 60;//80
 8000dd2:	233c      	movs	r3, #60	@ 0x3c
 8000dd4:	637b      	str	r3, [r7, #52]	@ 0x34
		hcan.Init.TimeSeg1 = CAN_BS1_16TQ;//15
 8000dd6:	f44f 2370 	mov.w	r3, #983040	@ 0xf0000
 8000dda:	643b      	str	r3, [r7, #64]	@ 0x40
		hcan.Init.TimeSeg2 = CAN_BS2_7TQ;//2
 8000ddc:	f44f 03c0 	mov.w	r3, #6291456	@ 0x600000
 8000de0:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	hcan.Init.AutoRetransmission = ENABLE;
 8000de2:	2301      	movs	r3, #1
 8000de4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8000de8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
	hcan.Init.AutoBusOff = ENABLE;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

	HAL_CAN_Init(&hcan);
 8000df4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000df8:	f000 faf8 	bl	80013ec <HAL_CAN_Init>
	if (detect_speed)
 8000dfc:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d051      	beq.n	8000ea8 <Set_speed_can+0x128>
	{
		CAN_FilterTypeDef canfilterconfig;
		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000e04:	2301      	movs	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0x501<<5;
 8000e10:	f24a 0320 	movw	r3, #40992	@ 0xa020
 8000e14:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 8000e1a:	4b38      	ldr	r3, [pc, #224]	@ (8000efc <Set_speed_can+0x17c>)
 8000e1c:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e26:	2301      	movs	r3, #1
 8000e28:	61fb      	str	r3, [r7, #28]
		canfilterconfig.SlaveStartFilterBank = 14;
 8000e2a:	230e      	movs	r3, #14
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000e36:	f000 fbd4 	bl	80015e2 <HAL_CAN_ConfigFilter>
		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 1;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0x502<<5;
 8000e46:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8000e4a:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 8000e50:	4b2a      	ldr	r3, [pc, #168]	@ (8000efc <Set_speed_can+0x17c>)
 8000e52:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	61fb      	str	r3, [r7, #28]
		canfilterconfig.SlaveStartFilterBank = 14;
 8000e60:	230e      	movs	r3, #14
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000e64:	463b      	mov	r3, r7
 8000e66:	4619      	mov	r1, r3
 8000e68:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000e6c:	f000 fbb9 	bl	80015e2 <HAL_CAN_ConfigFilter>
		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000e70:	2301      	movs	r3, #1
 8000e72:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 3;
 8000e74:	2303      	movs	r3, #3
 8000e76:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0x503<<5;
 8000e7c:	f24a 0360 	movw	r3, #41056	@ 0xa060
 8000e80:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	@ (8000efc <Set_speed_can+0x17c>)
 8000e88:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e92:	2301      	movs	r3, #1
 8000e94:	61fb      	str	r3, [r7, #28]
		canfilterconfig.SlaveStartFilterBank = 14;
 8000e96:	230e      	movs	r3, #14
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000ea2:	f000 fb9e 	bl	80015e2 <HAL_CAN_ConfigFilter>
 8000ea6:	e019      	b.n	8000edc <Set_speed_can+0x15c>
	} else
	{
		CAN_FilterTypeDef canfilterconfig;
		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0<<5;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0<<5;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	61fb      	str	r3, [r7, #28]
		canfilterconfig.SlaveStartFilterBank = 14;
 8000ecc:	230e      	movs	r3, #14
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000ed8:	f000 fb83 	bl	80015e2 <HAL_CAN_ConfigFilter>
	}
	HAL_CAN_Start(&hcan);
 8000edc:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000ee0:	f000 fc48 	bl	8001774 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000eea:	f000 fda8 	bl	8001a3e <HAL_CAN_ActivateNotification>
}
 8000eee:	bf00      	nop
 8000ef0:	3728      	adds	r7, #40	@ 0x28
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ef8:	b004      	add	sp, #16
 8000efa:	4770      	bx	lr
 8000efc:	0001ffe0 	.word	0x0001ffe0

08000f00 <speaker_floor>:
void speaker_floor(uint8_t tenFloor, uint8_t oneFloor)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	460a      	mov	r2, r1
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	71bb      	strb	r3, [r7, #6]
	uint16_t floor;
	if (tenFloor == 0x48) // H
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	2b48      	cmp	r3, #72	@ 0x48
 8000f14:	d10b      	bne.n	8000f2e <speaker_floor+0x2e>
	{
		if (oneFloor == 0x31)
 8000f16:	79bb      	ldrb	r3, [r7, #6]
 8000f18:	2b31      	cmp	r3, #49	@ 0x31
 8000f1a:	d102      	bne.n	8000f22 <speaker_floor+0x22>
		{
			floor = 33;
 8000f1c:	2321      	movs	r3, #33	@ 0x21
 8000f1e:	81fb      	strh	r3, [r7, #14]
 8000f20:	e01b      	b.n	8000f5a <speaker_floor+0x5a>
		} else if (oneFloor == 0x32)
 8000f22:	79bb      	ldrb	r3, [r7, #6]
 8000f24:	2b32      	cmp	r3, #50	@ 0x32
 8000f26:	d118      	bne.n	8000f5a <speaker_floor+0x5a>
		{
			floor = 34;
 8000f28:	2322      	movs	r3, #34	@ 0x22
 8000f2a:	81fb      	strh	r3, [r7, #14]
 8000f2c:	e015      	b.n	8000f5a <speaker_floor+0x5a>
		}
	} else if (tenFloor == 0x20)
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b20      	cmp	r3, #32
 8000f32:	d104      	bne.n	8000f3e <speaker_floor+0x3e>
	{
		floor = oneFloor - 0x30;
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	3b30      	subs	r3, #48	@ 0x30
 8000f3a:	81fb      	strh	r3, [r7, #14]
 8000f3c:	e00d      	b.n	8000f5a <speaker_floor+0x5a>
	} else
	{
		floor = (tenFloor - 0x30)*10 + (oneFloor - 0x30);
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	3b30      	subs	r3, #48	@ 0x30
 8000f42:	b29b      	uxth	r3, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	0092      	lsls	r2, r2, #2
 8000f48:	4413      	add	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	79bb      	ldrb	r3, [r7, #6]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	4413      	add	r3, r2
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	3b30      	subs	r3, #48	@ 0x30
 8000f58:	81fb      	strh	r3, [r7, #14]
	}
	DF_Play(floor);
 8000f5a:	89fb      	ldrh	r3, [r7, #14]
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff f94f 	bl	8000202 <DF_Play>
//	HAL_Delay(1200);
	while (feedbackSpeaker != floor);
 8000f64:	bf00      	nop
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <speaker_floor+0x80>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	89fa      	ldrh	r2, [r7, #14]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d1fa      	bne.n	8000f66 <speaker_floor+0x66>
	feedbackSpeaker = 0;
 8000f70:	4b03      	ldr	r3, [pc, #12]	@ (8000f80 <speaker_floor+0x80>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	801a      	strh	r2, [r3, #0]
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	200001ba 	.word	0x200001ba

08000f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f88:	b672      	cpsid	i
}
 8000f8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <Error_Handler+0x8>

08000f90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f96:	4b15      	ldr	r3, [pc, #84]	@ (8000fec <HAL_MspInit+0x5c>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	4a14      	ldr	r2, [pc, #80]	@ (8000fec <HAL_MspInit+0x5c>)
 8000f9c:	f043 0301 	orr.w	r3, r3, #1
 8000fa0:	6193      	str	r3, [r2, #24]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_MspInit+0x5c>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	60bb      	str	r3, [r7, #8]
 8000fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	4b0f      	ldr	r3, [pc, #60]	@ (8000fec <HAL_MspInit+0x5c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000fec <HAL_MspInit+0x5c>)
 8000fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	61d3      	str	r3, [r2, #28]
 8000fba:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <HAL_MspInit+0x5c>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff0 <HAL_MspInit+0x60>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <HAL_MspInit+0x60>)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3714      	adds	r7, #20
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40010000 	.word	0x40010000

08000ff4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a20      	ldr	r2, [pc, #128]	@ (8001090 <HAL_CAN_MspInit+0x9c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d139      	bne.n	8001088 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001014:	4b1f      	ldr	r3, [pc, #124]	@ (8001094 <HAL_CAN_MspInit+0xa0>)
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	4a1e      	ldr	r2, [pc, #120]	@ (8001094 <HAL_CAN_MspInit+0xa0>)
 800101a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800101e:	61d3      	str	r3, [r2, #28]
 8001020:	4b1c      	ldr	r3, [pc, #112]	@ (8001094 <HAL_CAN_MspInit+0xa0>)
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	4b19      	ldr	r3, [pc, #100]	@ (8001094 <HAL_CAN_MspInit+0xa0>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	4a18      	ldr	r2, [pc, #96]	@ (8001094 <HAL_CAN_MspInit+0xa0>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6193      	str	r3, [r2, #24]
 8001038:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <HAL_CAN_MspInit+0xa0>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001044:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001048:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4619      	mov	r1, r3
 8001058:	480f      	ldr	r0, [pc, #60]	@ (8001098 <HAL_CAN_MspInit+0xa4>)
 800105a:	f001 fb03 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800105e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001062:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4619      	mov	r1, r3
 8001072:	4809      	ldr	r0, [pc, #36]	@ (8001098 <HAL_CAN_MspInit+0xa4>)
 8001074:	f001 faf6 	bl	8002664 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2101      	movs	r1, #1
 800107c:	2014      	movs	r0, #20
 800107e:	f001 f814 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001082:	2014      	movs	r0, #20
 8001084:	f001 f82d 	bl	80020e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40006400 	.word	0x40006400
 8001094:	40021000 	.word	0x40021000
 8001098:	40010800 	.word	0x40010800

0800109c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	@ (80010e0 <HAL_TIM_Base_MspInit+0x44>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d113      	bne.n	80010d6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ae:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <HAL_TIM_Base_MspInit+0x48>)
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	4a0c      	ldr	r2, [pc, #48]	@ (80010e4 <HAL_TIM_Base_MspInit+0x48>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	61d3      	str	r3, [r2, #28]
 80010ba:	4b0a      	ldr	r3, [pc, #40]	@ (80010e4 <HAL_TIM_Base_MspInit+0x48>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2103      	movs	r1, #3
 80010ca:	201d      	movs	r0, #29
 80010cc:	f000 ffed 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010d0:	201d      	movs	r0, #29
 80010d2:	f001 f806 	bl	80020e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40000400 	.word	0x40000400
 80010e4:	40021000 	.word	0x40021000

080010e8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a32      	ldr	r2, [pc, #200]	@ (80011cc <HAL_UART_MspInit+0xe4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d15d      	bne.n	80011c4 <HAL_UART_MspInit+0xdc>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001108:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <HAL_UART_MspInit+0xe8>)
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	4a30      	ldr	r2, [pc, #192]	@ (80011d0 <HAL_UART_MspInit+0xe8>)
 800110e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001112:	61d3      	str	r3, [r2, #28]
 8001114:	4b2e      	ldr	r3, [pc, #184]	@ (80011d0 <HAL_UART_MspInit+0xe8>)
 8001116:	69db      	ldr	r3, [r3, #28]
 8001118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b2b      	ldr	r3, [pc, #172]	@ (80011d0 <HAL_UART_MspInit+0xe8>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a2a      	ldr	r2, [pc, #168]	@ (80011d0 <HAL_UART_MspInit+0xe8>)
 8001126:	f043 0304 	orr.w	r3, r3, #4
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b28      	ldr	r3, [pc, #160]	@ (80011d0 <HAL_UART_MspInit+0xe8>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001138:	2304      	movs	r3, #4
 800113a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	4822      	ldr	r0, [pc, #136]	@ (80011d4 <HAL_UART_MspInit+0xec>)
 800114c:	f001 fa8a 	bl	8002664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001150:	2308      	movs	r3, #8
 8001152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	481c      	ldr	r0, [pc, #112]	@ (80011d4 <HAL_UART_MspInit+0xec>)
 8001164:	f001 fa7e 	bl	8002664 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001168:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <HAL_UART_MspInit+0xf0>)
 800116a:	4a1c      	ldr	r2, [pc, #112]	@ (80011dc <HAL_UART_MspInit+0xf4>)
 800116c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800116e:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <HAL_UART_MspInit+0xf0>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <HAL_UART_MspInit+0xf0>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800117a:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <HAL_UART_MspInit+0xf0>)
 800117c:	2280      	movs	r2, #128	@ 0x80
 800117e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <HAL_UART_MspInit+0xf0>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <HAL_UART_MspInit+0xf0>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <HAL_UART_MspInit+0xf0>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <HAL_UART_MspInit+0xf0>)
 8001194:	2200      	movs	r2, #0
 8001196:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001198:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <HAL_UART_MspInit+0xf0>)
 800119a:	f000 ffc1 	bl	8002120 <HAL_DMA_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80011a4:	f7ff feee 	bl	8000f84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a0b      	ldr	r2, [pc, #44]	@ (80011d8 <HAL_UART_MspInit+0xf0>)
 80011ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011ae:	4a0a      	ldr	r2, [pc, #40]	@ (80011d8 <HAL_UART_MspInit+0xf0>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2102      	movs	r1, #2
 80011b8:	2026      	movs	r0, #38	@ 0x26
 80011ba:	f000 ff76 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011be:	2026      	movs	r0, #38	@ 0x26
 80011c0:	f000 ff8f 	bl	80020e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80011c4:	bf00      	nop
 80011c6:	3720      	adds	r7, #32
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40004400 	.word	0x40004400
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010800 	.word	0x40010800
 80011d8:	200000ec 	.word	0x200000ec
 80011dc:	4002006c 	.word	0x4002006c

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <NMI_Handler+0x4>

080011e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <HardFault_Handler+0x4>

080011f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <MemManage_Handler+0x4>

080011f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <BusFault_Handler+0x4>

08001200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <UsageFault_Handler+0x4>

08001208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001230:	f000 f89c 	bl	800136c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800123c:	4802      	ldr	r0, [pc, #8]	@ (8001248 <DMA1_Channel6_IRQHandler+0x10>)
 800123e:	f001 f8dd 	bl	80023fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200000ec 	.word	0x200000ec

0800124c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001250:	4802      	ldr	r0, [pc, #8]	@ (800125c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001252:	f000 fc19 	bl	8001a88 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000028 	.word	0x20000028

08001260 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001264:	4802      	ldr	r0, [pc, #8]	@ (8001270 <TIM3_IRQHandler+0x10>)
 8001266:	f002 f8a1 	bl	80033ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000005c 	.word	0x2000005c

08001274 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001278:	4802      	ldr	r0, [pc, #8]	@ (8001284 <USART2_IRQHandler+0x10>)
 800127a:	f002 fd1b 	bl	8003cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200000a4 	.word	0x200000a4

08001288 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001294:	f7ff fff8 	bl	8001288 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480b      	ldr	r0, [pc, #44]	@ (80012c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800129a:	490c      	ldr	r1, [pc, #48]	@ (80012cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800129c:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a09      	ldr	r2, [pc, #36]	@ (80012d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012b0:	4c09      	ldr	r4, [pc, #36]	@ (80012d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012be:	f003 fbf9 	bl	8004ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012c2:	f7ff fa0f 	bl	80006e4 <main>
  bx lr
 80012c6:	4770      	bx	lr
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012d0:	08004b48 	.word	0x08004b48
  ldr r2, =_sbss
 80012d4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012d8:	200001c4 	.word	0x200001c4

080012dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC1_2_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e4:	4b08      	ldr	r3, [pc, #32]	@ (8001308 <HAL_Init+0x28>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	@ (8001308 <HAL_Init+0x28>)
 80012ea:	f043 0310 	orr.w	r3, r3, #16
 80012ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f0:	2003      	movs	r0, #3
 80012f2:	f000 fecf 	bl	8002094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f6:	200f      	movs	r0, #15
 80012f8:	f000 f808 	bl	800130c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012fc:	f7ff fe48 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40022000 	.word	0x40022000

0800130c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_InitTick+0x54>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <HAL_InitTick+0x58>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001322:	fbb3 f3f1 	udiv	r3, r3, r1
 8001326:	fbb2 f3f3 	udiv	r3, r2, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f000 feeb 	bl	8002106 <HAL_SYSTICK_Config>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e00e      	b.n	8001358 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d80a      	bhi.n	8001356 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001348:	f000 feaf 	bl	80020aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800134c:	4a06      	ldr	r2, [pc, #24]	@ (8001368 <HAL_InitTick+0x5c>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e000      	b.n	8001358 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000000 	.word	0x20000000
 8001364:	20000008 	.word	0x20000008
 8001368:	20000004 	.word	0x20000004

0800136c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001370:	4b05      	ldr	r3, [pc, #20]	@ (8001388 <HAL_IncTick+0x1c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	461a      	mov	r2, r3
 8001376:	4b05      	ldr	r3, [pc, #20]	@ (800138c <HAL_IncTick+0x20>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4413      	add	r3, r2
 800137c:	4a03      	ldr	r2, [pc, #12]	@ (800138c <HAL_IncTick+0x20>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000008 	.word	0x20000008
 800138c:	200001c0 	.word	0x200001c0

08001390 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b02      	ldr	r3, [pc, #8]	@ (80013a0 <HAL_GetTick+0x10>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	200001c0 	.word	0x200001c0

080013a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013ac:	f7ff fff0 	bl	8001390 <HAL_GetTick>
 80013b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013bc:	d005      	beq.n	80013ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_Delay+0x44>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	461a      	mov	r2, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4413      	add	r3, r2
 80013c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ca:	bf00      	nop
 80013cc:	f7ff ffe0 	bl	8001390 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d8f7      	bhi.n	80013cc <HAL_Delay+0x28>
  {
  }
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000008 	.word	0x20000008

080013ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0ed      	b.n	80015da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d102      	bne.n	8001410 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fdf2 	bl	8000ff4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001420:	f7ff ffb6 	bl	8001390 <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001426:	e012      	b.n	800144e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001428:	f7ff ffb2 	bl	8001390 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b0a      	cmp	r3, #10
 8001434:	d90b      	bls.n	800144e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2205      	movs	r2, #5
 8001446:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e0c5      	b.n	80015da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0e5      	beq.n	8001428 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 0202 	bic.w	r2, r2, #2
 800146a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800146c:	f7ff ff90 	bl	8001390 <HAL_GetTick>
 8001470:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001472:	e012      	b.n	800149a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001474:	f7ff ff8c 	bl	8001390 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b0a      	cmp	r3, #10
 8001480:	d90b      	bls.n	800149a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001486:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2205      	movs	r2, #5
 8001492:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e09f      	b.n	80015da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1e5      	bne.n	8001474 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7e1b      	ldrb	r3, [r3, #24]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d108      	bne.n	80014c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	e007      	b.n	80014d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7e5b      	ldrb	r3, [r3, #25]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d108      	bne.n	80014ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	e007      	b.n	80014fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	7e9b      	ldrb	r3, [r3, #26]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d108      	bne.n	8001516 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f042 0220 	orr.w	r2, r2, #32
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	e007      	b.n	8001526 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0220 	bic.w	r2, r2, #32
 8001524:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	7edb      	ldrb	r3, [r3, #27]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d108      	bne.n	8001540 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 0210 	bic.w	r2, r2, #16
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e007      	b.n	8001550 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0210 	orr.w	r2, r2, #16
 800154e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	7f1b      	ldrb	r3, [r3, #28]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d108      	bne.n	800156a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0208 	orr.w	r2, r2, #8
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e007      	b.n	800157a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f022 0208 	bic.w	r2, r2, #8
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	7f5b      	ldrb	r3, [r3, #29]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d108      	bne.n	8001594 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f042 0204 	orr.w	r2, r2, #4
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	e007      	b.n	80015a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0204 	bic.w	r2, r2, #4
 80015a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	ea42 0103 	orr.w	r1, r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	1e5a      	subs	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b087      	sub	sp, #28
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015fa:	7cfb      	ldrb	r3, [r7, #19]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d003      	beq.n	8001608 <HAL_CAN_ConfigFilter+0x26>
 8001600:	7cfb      	ldrb	r3, [r7, #19]
 8001602:	2b02      	cmp	r3, #2
 8001604:	f040 80aa 	bne.w	800175c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800160e:	f043 0201 	orr.w	r2, r3, #1
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	695b      	ldr	r3, [r3, #20]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	2201      	movs	r2, #1
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	401a      	ands	r2, r3
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d123      	bne.n	800168a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43db      	mvns	r3, r3
 800164c:	401a      	ands	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001664:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3248      	adds	r2, #72	@ 0x48
 800166a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800167e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001680:	6979      	ldr	r1, [r7, #20]
 8001682:	3348      	adds	r3, #72	@ 0x48
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d122      	bne.n	80016d8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	431a      	orrs	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80016b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3248      	adds	r2, #72	@ 0x48
 80016b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68db      	ldr	r3, [r3, #12]
 80016c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80016ce:	6979      	ldr	r1, [r7, #20]
 80016d0:	3348      	adds	r3, #72	@ 0x48
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	440b      	add	r3, r1
 80016d6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d109      	bne.n	80016f4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	401a      	ands	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80016f2:	e007      	b.n	8001704 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	431a      	orrs	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d109      	bne.n	8001720 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	43db      	mvns	r3, r3
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800171e:	e007      	b.n	8001730 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	431a      	orrs	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d107      	bne.n	8001748 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	431a      	orrs	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800174e:	f023 0201 	bic.w	r2, r3, #1
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	e006      	b.n	800176a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001760:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
  }
}
 800176a:	4618      	mov	r0, r3
 800176c:	371c      	adds	r7, #28
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b01      	cmp	r3, #1
 8001786:	d12e      	bne.n	80017e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2202      	movs	r2, #2
 800178c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80017a0:	f7ff fdf6 	bl	8001390 <HAL_GetTick>
 80017a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017a6:	e012      	b.n	80017ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017a8:	f7ff fdf2 	bl	8001390 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b0a      	cmp	r3, #10
 80017b4:	d90b      	bls.n	80017ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2205      	movs	r2, #5
 80017c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e012      	b.n	80017f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1e5      	bne.n	80017a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	e006      	b.n	80017f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ea:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
  }
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80017fc:	b480      	push	{r7}
 80017fe:	b087      	sub	sp, #28
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001810:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001812:	7dfb      	ldrb	r3, [r7, #23]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d003      	beq.n	8001820 <HAL_CAN_GetRxMessage+0x24>
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	2b02      	cmp	r3, #2
 800181c:	f040 8103 	bne.w	8001a26 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10e      	bne.n	8001844 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b00      	cmp	r3, #0
 8001832:	d116      	bne.n	8001862 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001838:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0f7      	b.n	8001a34 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f003 0303 	and.w	r3, r3, #3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d107      	bne.n	8001862 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001856:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0e8      	b.n	8001a34 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	331b      	adds	r3, #27
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	4413      	add	r3, r2
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0204 	and.w	r2, r3, #4
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10c      	bne.n	800189a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	331b      	adds	r3, #27
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	4413      	add	r3, r2
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	0d5b      	lsrs	r3, r3, #21
 8001890:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	e00b      	b.n	80018b2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	331b      	adds	r3, #27
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	08db      	lsrs	r3, r3, #3
 80018aa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	331b      	adds	r3, #27
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	4413      	add	r3, r2
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0202 	and.w	r2, r3, #2
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	331b      	adds	r3, #27
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	4413      	add	r3, r2
 80018d4:	3304      	adds	r3, #4
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2208      	movs	r2, #8
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	e00b      	b.n	8001900 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	331b      	adds	r3, #27
 80018f0:	011b      	lsls	r3, r3, #4
 80018f2:	4413      	add	r3, r2
 80018f4:	3304      	adds	r3, #4
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 020f 	and.w	r2, r3, #15
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	331b      	adds	r3, #27
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	3304      	adds	r3, #4
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	b2da      	uxtb	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	331b      	adds	r3, #27
 8001920:	011b      	lsls	r3, r3, #4
 8001922:	4413      	add	r3, r2
 8001924:	3304      	adds	r3, #4
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0c1b      	lsrs	r3, r3, #16
 800192a:	b29a      	uxth	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	4413      	add	r3, r2
 800193a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	4413      	add	r3, r2
 8001950:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0a1a      	lsrs	r2, r3, #8
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	3301      	adds	r3, #1
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4413      	add	r3, r2
 800196a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	0c1a      	lsrs	r2, r3, #16
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	3302      	adds	r3, #2
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	4413      	add	r3, r2
 8001984:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	0e1a      	lsrs	r2, r3, #24
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	3303      	adds	r3, #3
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	4413      	add	r3, r2
 800199e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	3304      	adds	r3, #4
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	4413      	add	r3, r2
 80019b6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	0a1a      	lsrs	r2, r3, #8
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	3305      	adds	r3, #5
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	0c1a      	lsrs	r2, r3, #16
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	3306      	adds	r3, #6
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4413      	add	r3, r2
 80019ea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0e1a      	lsrs	r2, r3, #24
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	3307      	adds	r3, #7
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d108      	bne.n	8001a12 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	68da      	ldr	r2, [r3, #12]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0220 	orr.w	r2, r2, #32
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	e007      	b.n	8001a22 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f042 0220 	orr.w	r2, r2, #32
 8001a20:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e006      	b.n	8001a34 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
  }
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	371c      	adds	r7, #28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b085      	sub	sp, #20
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a4e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d002      	beq.n	8001a5c <HAL_CAN_ActivateNotification+0x1e>
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d109      	bne.n	8001a70 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6959      	ldr	r1, [r3, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e006      	b.n	8001a7e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
  }
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr

08001a88 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d07c      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2201      	movs	r2, #1
 8001ade:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f983 	bl	8001df6 <HAL_CAN_TxMailbox0CompleteCallback>
 8001af0:	e016      	b.n	8001b20 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d004      	beq.n	8001b06 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afe:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b04:	e00c      	b.n	8001b20 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	f003 0308 	and.w	r3, r3, #8
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d004      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b12:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b18:	e002      	b.n	8001b20 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f986 	bl	8001e2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d024      	beq.n	8001b74 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b32:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f962 	bl	8001e08 <HAL_CAN_TxMailbox1CompleteCallback>
 8001b44:	e016      	b.n	8001b74 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d004      	beq.n	8001b5a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b58:	e00c      	b.n	8001b74 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d004      	beq.n	8001b6e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b6c:	e002      	b.n	8001b74 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f965 	bl	8001e3e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d024      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001b86:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f941 	bl	8001e1a <HAL_CAN_TxMailbox2CompleteCallback>
 8001b98:	e016      	b.n	8001bc8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d004      	beq.n	8001bae <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bac:	e00c      	b.n	8001bc8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc0:	e002      	b.n	8001bc8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f944 	bl	8001e50 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00c      	beq.n	8001bec <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0310 	and.w	r3, r3, #16
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d007      	beq.n	8001bec <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001be2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2210      	movs	r2, #16
 8001bea:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00b      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2208      	movs	r2, #8
 8001c06:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f92a 	bl	8001e62 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d009      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7fe fafe 	bl	8000228 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00c      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	f003 0310 	and.w	r3, r3, #16
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d007      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c46:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00b      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2208      	movs	r2, #8
 8001c6a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f90a 	bl	8001e86 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	f003 0310 	and.w	r3, r3, #16
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d009      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f8f2 	bl	8001e74 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00b      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	f003 0310 	and.w	r3, r3, #16
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d006      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2210      	movs	r2, #16
 8001caa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f8f3 	bl	8001e98 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00b      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d006      	beq.n	8001cd4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2208      	movs	r2, #8
 8001ccc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f8eb 	bl	8001eaa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d07b      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d072      	beq.n	8001dce <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ce8:	6a3b      	ldr	r3, [r7, #32]
 8001cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d008      	beq.n	8001d20 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d20:	6a3b      	ldr	r3, [r7, #32]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d3c:	6a3b      	ldr	r3, [r7, #32]
 8001d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d043      	beq.n	8001dce <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d03e      	beq.n	8001dce <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d56:	2b60      	cmp	r3, #96	@ 0x60
 8001d58:	d02b      	beq.n	8001db2 <HAL_CAN_IRQHandler+0x32a>
 8001d5a:	2b60      	cmp	r3, #96	@ 0x60
 8001d5c:	d82e      	bhi.n	8001dbc <HAL_CAN_IRQHandler+0x334>
 8001d5e:	2b50      	cmp	r3, #80	@ 0x50
 8001d60:	d022      	beq.n	8001da8 <HAL_CAN_IRQHandler+0x320>
 8001d62:	2b50      	cmp	r3, #80	@ 0x50
 8001d64:	d82a      	bhi.n	8001dbc <HAL_CAN_IRQHandler+0x334>
 8001d66:	2b40      	cmp	r3, #64	@ 0x40
 8001d68:	d019      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x316>
 8001d6a:	2b40      	cmp	r3, #64	@ 0x40
 8001d6c:	d826      	bhi.n	8001dbc <HAL_CAN_IRQHandler+0x334>
 8001d6e:	2b30      	cmp	r3, #48	@ 0x30
 8001d70:	d010      	beq.n	8001d94 <HAL_CAN_IRQHandler+0x30c>
 8001d72:	2b30      	cmp	r3, #48	@ 0x30
 8001d74:	d822      	bhi.n	8001dbc <HAL_CAN_IRQHandler+0x334>
 8001d76:	2b10      	cmp	r3, #16
 8001d78:	d002      	beq.n	8001d80 <HAL_CAN_IRQHandler+0x2f8>
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	d005      	beq.n	8001d8a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001d7e:	e01d      	b.n	8001dbc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	f043 0308 	orr.w	r3, r3, #8
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d88:	e019      	b.n	8001dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	f043 0310 	orr.w	r3, r3, #16
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d92:	e014      	b.n	8001dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d96:	f043 0320 	orr.w	r3, r3, #32
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001d9c:	e00f      	b.n	8001dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001da6:	e00a      	b.n	8001dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001db0:	e005      	b.n	8001dbe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001dba:	e000      	b.n	8001dbe <HAL_CAN_IRQHandler+0x336>
            break;
 8001dbc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699a      	ldr	r2, [r3, #24]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001dcc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f867 	bl	8001ebc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	@ 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr

08001e62 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001e7c:	bf00      	nop
 8001e7e:	370c      	adds	r7, #12
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr

08001e86 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bc80      	pop	{r7}
 8001e96:	4770      	bx	lr

08001e98 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001eb2:	bf00      	nop
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
	...

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	@ (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4906      	ldr	r1, [pc, #24]	@ (8001f68 <__NVIC_EnableIRQ+0x34>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	@ (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
         );
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr

08002024 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002028:	f3bf 8f4f 	dsb	sy
}
 800202c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800202e:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <__NVIC_SystemReset+0x24>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002036:	4904      	ldr	r1, [pc, #16]	@ (8002048 <__NVIC_SystemReset+0x24>)
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <__NVIC_SystemReset+0x28>)
 800203a:	4313      	orrs	r3, r2
 800203c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800203e:	f3bf 8f4f 	dsb	sy
}
 8002042:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <__NVIC_SystemReset+0x20>
 8002048:	e000ed00 	.word	0xe000ed00
 800204c:	05fa0004 	.word	0x05fa0004

08002050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002060:	d301      	bcc.n	8002066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002062:	2301      	movs	r3, #1
 8002064:	e00f      	b.n	8002086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002066:	4a0a      	ldr	r2, [pc, #40]	@ (8002090 <SysTick_Config+0x40>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206e:	210f      	movs	r1, #15
 8002070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002074:	f7ff ff7a 	bl	8001f6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	@ (8002090 <SysTick_Config+0x40>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	@ (8002090 <SysTick_Config+0x40>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff17 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020bc:	f7ff ff2c 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 80020c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ff7a 	bl	8001fc0 <NVIC_EncodePriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff49 	bl	8001f6c <__NVIC_SetPriority>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff1f 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002102:	f7ff ff8f 	bl	8002024 <__NVIC_SystemReset>

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ff9e 	bl	8002050 <SysTick_Config>
 8002114:	4603      	mov	r3, r0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e043      	b.n	80021be <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	4b22      	ldr	r3, [pc, #136]	@ (80021c8 <HAL_DMA_Init+0xa8>)
 800213e:	4413      	add	r3, r2
 8002140:	4a22      	ldr	r2, [pc, #136]	@ (80021cc <HAL_DMA_Init+0xac>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	091b      	lsrs	r3, r3, #4
 8002148:	009a      	lsls	r2, r3, #2
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a1f      	ldr	r2, [pc, #124]	@ (80021d0 <HAL_DMA_Init+0xb0>)
 8002152:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800216a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800216e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002178:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002184:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002190:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	4313      	orrs	r3, r2
 800219c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr
 80021c8:	bffdfff8 	.word	0xbffdfff8
 80021cc:	cccccccd 	.word	0xcccccccd
 80021d0:	40020000 	.word	0x40020000

080021d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_DMA_Start_IT+0x20>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e04b      	b.n	800228c <HAL_DMA_Start_IT+0xb8>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b01      	cmp	r3, #1
 8002206:	d13a      	bne.n	800227e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2202      	movs	r2, #2
 800220c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0201 	bic.w	r2, r2, #1
 8002224:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f9eb 	bl	8002608 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f042 020e 	orr.w	r2, r2, #14
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	e00f      	b.n	800226c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0204 	bic.w	r2, r2, #4
 800225a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f042 020a 	orr.w	r2, r2, #10
 800226a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	e005      	b.n	800228a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002286:	2302      	movs	r3, #2
 8002288:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800228a:	7dfb      	ldrb	r3, [r7, #23]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d008      	beq.n	80022be <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2204      	movs	r2, #4
 80022b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e020      	b.n	8002300 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 020e 	bic.w	r2, r2, #14
 80022cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0201 	bic.w	r2, r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e6:	2101      	movs	r1, #1
 80022e8:	fa01 f202 	lsl.w	r2, r1, r2
 80022ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
	...

0800230c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800231e:	b2db      	uxtb	r3, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d005      	beq.n	8002330 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2204      	movs	r2, #4
 8002328:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	e051      	b.n	80023d4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 020e 	bic.w	r2, r2, #14
 800233e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0201 	bic.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a22      	ldr	r2, [pc, #136]	@ (80023e0 <HAL_DMA_Abort_IT+0xd4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d029      	beq.n	80023ae <HAL_DMA_Abort_IT+0xa2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a21      	ldr	r2, [pc, #132]	@ (80023e4 <HAL_DMA_Abort_IT+0xd8>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d022      	beq.n	80023aa <HAL_DMA_Abort_IT+0x9e>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1f      	ldr	r2, [pc, #124]	@ (80023e8 <HAL_DMA_Abort_IT+0xdc>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d01a      	beq.n	80023a4 <HAL_DMA_Abort_IT+0x98>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a1e      	ldr	r2, [pc, #120]	@ (80023ec <HAL_DMA_Abort_IT+0xe0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d012      	beq.n	800239e <HAL_DMA_Abort_IT+0x92>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a1c      	ldr	r2, [pc, #112]	@ (80023f0 <HAL_DMA_Abort_IT+0xe4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00a      	beq.n	8002398 <HAL_DMA_Abort_IT+0x8c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a1b      	ldr	r2, [pc, #108]	@ (80023f4 <HAL_DMA_Abort_IT+0xe8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d102      	bne.n	8002392 <HAL_DMA_Abort_IT+0x86>
 800238c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002390:	e00e      	b.n	80023b0 <HAL_DMA_Abort_IT+0xa4>
 8002392:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002396:	e00b      	b.n	80023b0 <HAL_DMA_Abort_IT+0xa4>
 8002398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800239c:	e008      	b.n	80023b0 <HAL_DMA_Abort_IT+0xa4>
 800239e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023a2:	e005      	b.n	80023b0 <HAL_DMA_Abort_IT+0xa4>
 80023a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023a8:	e002      	b.n	80023b0 <HAL_DMA_Abort_IT+0xa4>
 80023aa:	2310      	movs	r3, #16
 80023ac:	e000      	b.n	80023b0 <HAL_DMA_Abort_IT+0xa4>
 80023ae:	2301      	movs	r3, #1
 80023b0:	4a11      	ldr	r2, [pc, #68]	@ (80023f8 <HAL_DMA_Abort_IT+0xec>)
 80023b2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
    } 
  }
  return status;
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40020008 	.word	0x40020008
 80023e4:	4002001c 	.word	0x4002001c
 80023e8:	40020030 	.word	0x40020030
 80023ec:	40020044 	.word	0x40020044
 80023f0:	40020058 	.word	0x40020058
 80023f4:	4002006c 	.word	0x4002006c
 80023f8:	40020000 	.word	0x40020000

080023fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002418:	2204      	movs	r2, #4
 800241a:	409a      	lsls	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4013      	ands	r3, r2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d04f      	beq.n	80024c4 <HAL_DMA_IRQHandler+0xc8>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d04a      	beq.n	80024c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b00      	cmp	r3, #0
 800243a:	d107      	bne.n	800244c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0204 	bic.w	r2, r2, #4
 800244a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a66      	ldr	r2, [pc, #408]	@ (80025ec <HAL_DMA_IRQHandler+0x1f0>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d029      	beq.n	80024aa <HAL_DMA_IRQHandler+0xae>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a65      	ldr	r2, [pc, #404]	@ (80025f0 <HAL_DMA_IRQHandler+0x1f4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d022      	beq.n	80024a6 <HAL_DMA_IRQHandler+0xaa>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a63      	ldr	r2, [pc, #396]	@ (80025f4 <HAL_DMA_IRQHandler+0x1f8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d01a      	beq.n	80024a0 <HAL_DMA_IRQHandler+0xa4>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a62      	ldr	r2, [pc, #392]	@ (80025f8 <HAL_DMA_IRQHandler+0x1fc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d012      	beq.n	800249a <HAL_DMA_IRQHandler+0x9e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a60      	ldr	r2, [pc, #384]	@ (80025fc <HAL_DMA_IRQHandler+0x200>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00a      	beq.n	8002494 <HAL_DMA_IRQHandler+0x98>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a5f      	ldr	r2, [pc, #380]	@ (8002600 <HAL_DMA_IRQHandler+0x204>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d102      	bne.n	800248e <HAL_DMA_IRQHandler+0x92>
 8002488:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800248c:	e00e      	b.n	80024ac <HAL_DMA_IRQHandler+0xb0>
 800248e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002492:	e00b      	b.n	80024ac <HAL_DMA_IRQHandler+0xb0>
 8002494:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002498:	e008      	b.n	80024ac <HAL_DMA_IRQHandler+0xb0>
 800249a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800249e:	e005      	b.n	80024ac <HAL_DMA_IRQHandler+0xb0>
 80024a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024a4:	e002      	b.n	80024ac <HAL_DMA_IRQHandler+0xb0>
 80024a6:	2340      	movs	r3, #64	@ 0x40
 80024a8:	e000      	b.n	80024ac <HAL_DMA_IRQHandler+0xb0>
 80024aa:	2304      	movs	r3, #4
 80024ac:	4a55      	ldr	r2, [pc, #340]	@ (8002604 <HAL_DMA_IRQHandler+0x208>)
 80024ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 8094 	beq.w	80025e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80024c2:	e08e      	b.n	80025e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c8:	2202      	movs	r2, #2
 80024ca:	409a      	lsls	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4013      	ands	r3, r2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d056      	beq.n	8002582 <HAL_DMA_IRQHandler+0x186>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d051      	beq.n	8002582 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10b      	bne.n	8002504 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 020a 	bic.w	r2, r2, #10
 80024fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a38      	ldr	r2, [pc, #224]	@ (80025ec <HAL_DMA_IRQHandler+0x1f0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d029      	beq.n	8002562 <HAL_DMA_IRQHandler+0x166>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a37      	ldr	r2, [pc, #220]	@ (80025f0 <HAL_DMA_IRQHandler+0x1f4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d022      	beq.n	800255e <HAL_DMA_IRQHandler+0x162>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a35      	ldr	r2, [pc, #212]	@ (80025f4 <HAL_DMA_IRQHandler+0x1f8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01a      	beq.n	8002558 <HAL_DMA_IRQHandler+0x15c>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a34      	ldr	r2, [pc, #208]	@ (80025f8 <HAL_DMA_IRQHandler+0x1fc>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d012      	beq.n	8002552 <HAL_DMA_IRQHandler+0x156>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a32      	ldr	r2, [pc, #200]	@ (80025fc <HAL_DMA_IRQHandler+0x200>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00a      	beq.n	800254c <HAL_DMA_IRQHandler+0x150>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a31      	ldr	r2, [pc, #196]	@ (8002600 <HAL_DMA_IRQHandler+0x204>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d102      	bne.n	8002546 <HAL_DMA_IRQHandler+0x14a>
 8002540:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002544:	e00e      	b.n	8002564 <HAL_DMA_IRQHandler+0x168>
 8002546:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800254a:	e00b      	b.n	8002564 <HAL_DMA_IRQHandler+0x168>
 800254c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002550:	e008      	b.n	8002564 <HAL_DMA_IRQHandler+0x168>
 8002552:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002556:	e005      	b.n	8002564 <HAL_DMA_IRQHandler+0x168>
 8002558:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800255c:	e002      	b.n	8002564 <HAL_DMA_IRQHandler+0x168>
 800255e:	2320      	movs	r3, #32
 8002560:	e000      	b.n	8002564 <HAL_DMA_IRQHandler+0x168>
 8002562:	2302      	movs	r3, #2
 8002564:	4a27      	ldr	r2, [pc, #156]	@ (8002604 <HAL_DMA_IRQHandler+0x208>)
 8002566:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002574:	2b00      	cmp	r3, #0
 8002576:	d034      	beq.n	80025e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002580:	e02f      	b.n	80025e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002586:	2208      	movs	r2, #8
 8002588:	409a      	lsls	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d028      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x1e8>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d023      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 020e 	bic.w	r2, r2, #14
 80025aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b4:	2101      	movs	r1, #1
 80025b6:	fa01 f202 	lsl.w	r2, r1, r2
 80025ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
    }
  }
  return;
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
}
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40020008 	.word	0x40020008
 80025f0:	4002001c 	.word	0x4002001c
 80025f4:	40020030 	.word	0x40020030
 80025f8:	40020044 	.word	0x40020044
 80025fc:	40020058 	.word	0x40020058
 8002600:	4002006c 	.word	0x4002006c
 8002604:	40020000 	.word	0x40020000

08002608 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
 8002614:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261e:	2101      	movs	r1, #1
 8002620:	fa01 f202 	lsl.w	r2, r1, r2
 8002624:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b10      	cmp	r3, #16
 8002634:	d108      	bne.n	8002648 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002646:	e007      	b.n	8002658 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	60da      	str	r2, [r3, #12]
}
 8002658:	bf00      	nop
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr
	...

08002664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002664:	b480      	push	{r7}
 8002666:	b08b      	sub	sp, #44	@ 0x2c
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002676:	e169      	b.n	800294c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002678:	2201      	movs	r2, #1
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	429a      	cmp	r2, r3
 8002692:	f040 8158 	bne.w	8002946 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4a9a      	ldr	r2, [pc, #616]	@ (8002904 <HAL_GPIO_Init+0x2a0>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d05e      	beq.n	800275e <HAL_GPIO_Init+0xfa>
 80026a0:	4a98      	ldr	r2, [pc, #608]	@ (8002904 <HAL_GPIO_Init+0x2a0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d875      	bhi.n	8002792 <HAL_GPIO_Init+0x12e>
 80026a6:	4a98      	ldr	r2, [pc, #608]	@ (8002908 <HAL_GPIO_Init+0x2a4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d058      	beq.n	800275e <HAL_GPIO_Init+0xfa>
 80026ac:	4a96      	ldr	r2, [pc, #600]	@ (8002908 <HAL_GPIO_Init+0x2a4>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d86f      	bhi.n	8002792 <HAL_GPIO_Init+0x12e>
 80026b2:	4a96      	ldr	r2, [pc, #600]	@ (800290c <HAL_GPIO_Init+0x2a8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d052      	beq.n	800275e <HAL_GPIO_Init+0xfa>
 80026b8:	4a94      	ldr	r2, [pc, #592]	@ (800290c <HAL_GPIO_Init+0x2a8>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d869      	bhi.n	8002792 <HAL_GPIO_Init+0x12e>
 80026be:	4a94      	ldr	r2, [pc, #592]	@ (8002910 <HAL_GPIO_Init+0x2ac>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d04c      	beq.n	800275e <HAL_GPIO_Init+0xfa>
 80026c4:	4a92      	ldr	r2, [pc, #584]	@ (8002910 <HAL_GPIO_Init+0x2ac>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d863      	bhi.n	8002792 <HAL_GPIO_Init+0x12e>
 80026ca:	4a92      	ldr	r2, [pc, #584]	@ (8002914 <HAL_GPIO_Init+0x2b0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d046      	beq.n	800275e <HAL_GPIO_Init+0xfa>
 80026d0:	4a90      	ldr	r2, [pc, #576]	@ (8002914 <HAL_GPIO_Init+0x2b0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d85d      	bhi.n	8002792 <HAL_GPIO_Init+0x12e>
 80026d6:	2b12      	cmp	r3, #18
 80026d8:	d82a      	bhi.n	8002730 <HAL_GPIO_Init+0xcc>
 80026da:	2b12      	cmp	r3, #18
 80026dc:	d859      	bhi.n	8002792 <HAL_GPIO_Init+0x12e>
 80026de:	a201      	add	r2, pc, #4	@ (adr r2, 80026e4 <HAL_GPIO_Init+0x80>)
 80026e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e4:	0800275f 	.word	0x0800275f
 80026e8:	08002739 	.word	0x08002739
 80026ec:	0800274b 	.word	0x0800274b
 80026f0:	0800278d 	.word	0x0800278d
 80026f4:	08002793 	.word	0x08002793
 80026f8:	08002793 	.word	0x08002793
 80026fc:	08002793 	.word	0x08002793
 8002700:	08002793 	.word	0x08002793
 8002704:	08002793 	.word	0x08002793
 8002708:	08002793 	.word	0x08002793
 800270c:	08002793 	.word	0x08002793
 8002710:	08002793 	.word	0x08002793
 8002714:	08002793 	.word	0x08002793
 8002718:	08002793 	.word	0x08002793
 800271c:	08002793 	.word	0x08002793
 8002720:	08002793 	.word	0x08002793
 8002724:	08002793 	.word	0x08002793
 8002728:	08002741 	.word	0x08002741
 800272c:	08002755 	.word	0x08002755
 8002730:	4a79      	ldr	r2, [pc, #484]	@ (8002918 <HAL_GPIO_Init+0x2b4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d013      	beq.n	800275e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002736:	e02c      	b.n	8002792 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	623b      	str	r3, [r7, #32]
          break;
 800273e:	e029      	b.n	8002794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	3304      	adds	r3, #4
 8002746:	623b      	str	r3, [r7, #32]
          break;
 8002748:	e024      	b.n	8002794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	3308      	adds	r3, #8
 8002750:	623b      	str	r3, [r7, #32]
          break;
 8002752:	e01f      	b.n	8002794 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	330c      	adds	r3, #12
 800275a:	623b      	str	r3, [r7, #32]
          break;
 800275c:	e01a      	b.n	8002794 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d102      	bne.n	800276c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002766:	2304      	movs	r3, #4
 8002768:	623b      	str	r3, [r7, #32]
          break;
 800276a:	e013      	b.n	8002794 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d105      	bne.n	8002780 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002774:	2308      	movs	r3, #8
 8002776:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69fa      	ldr	r2, [r7, #28]
 800277c:	611a      	str	r2, [r3, #16]
          break;
 800277e:	e009      	b.n	8002794 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002780:	2308      	movs	r3, #8
 8002782:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69fa      	ldr	r2, [r7, #28]
 8002788:	615a      	str	r2, [r3, #20]
          break;
 800278a:	e003      	b.n	8002794 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800278c:	2300      	movs	r3, #0
 800278e:	623b      	str	r3, [r7, #32]
          break;
 8002790:	e000      	b.n	8002794 <HAL_GPIO_Init+0x130>
          break;
 8002792:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2bff      	cmp	r3, #255	@ 0xff
 8002798:	d801      	bhi.n	800279e <HAL_GPIO_Init+0x13a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	e001      	b.n	80027a2 <HAL_GPIO_Init+0x13e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3304      	adds	r3, #4
 80027a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2bff      	cmp	r3, #255	@ 0xff
 80027a8:	d802      	bhi.n	80027b0 <HAL_GPIO_Init+0x14c>
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	e002      	b.n	80027b6 <HAL_GPIO_Init+0x152>
 80027b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b2:	3b08      	subs	r3, #8
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	210f      	movs	r1, #15
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	fa01 f303 	lsl.w	r3, r1, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	401a      	ands	r2, r3
 80027c8:	6a39      	ldr	r1, [r7, #32]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	431a      	orrs	r2, r3
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80b1 	beq.w	8002946 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027e4:	4b4d      	ldr	r3, [pc, #308]	@ (800291c <HAL_GPIO_Init+0x2b8>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4a4c      	ldr	r2, [pc, #304]	@ (800291c <HAL_GPIO_Init+0x2b8>)
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	6193      	str	r3, [r2, #24]
 80027f0:	4b4a      	ldr	r3, [pc, #296]	@ (800291c <HAL_GPIO_Init+0x2b8>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027fc:	4a48      	ldr	r2, [pc, #288]	@ (8002920 <HAL_GPIO_Init+0x2bc>)
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	089b      	lsrs	r3, r3, #2
 8002802:	3302      	adds	r3, #2
 8002804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002808:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	220f      	movs	r2, #15
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4013      	ands	r3, r2
 800281e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a40      	ldr	r2, [pc, #256]	@ (8002924 <HAL_GPIO_Init+0x2c0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d013      	beq.n	8002850 <HAL_GPIO_Init+0x1ec>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3f      	ldr	r2, [pc, #252]	@ (8002928 <HAL_GPIO_Init+0x2c4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00d      	beq.n	800284c <HAL_GPIO_Init+0x1e8>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a3e      	ldr	r2, [pc, #248]	@ (800292c <HAL_GPIO_Init+0x2c8>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d007      	beq.n	8002848 <HAL_GPIO_Init+0x1e4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a3d      	ldr	r2, [pc, #244]	@ (8002930 <HAL_GPIO_Init+0x2cc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d101      	bne.n	8002844 <HAL_GPIO_Init+0x1e0>
 8002840:	2303      	movs	r3, #3
 8002842:	e006      	b.n	8002852 <HAL_GPIO_Init+0x1ee>
 8002844:	2304      	movs	r3, #4
 8002846:	e004      	b.n	8002852 <HAL_GPIO_Init+0x1ee>
 8002848:	2302      	movs	r3, #2
 800284a:	e002      	b.n	8002852 <HAL_GPIO_Init+0x1ee>
 800284c:	2301      	movs	r3, #1
 800284e:	e000      	b.n	8002852 <HAL_GPIO_Init+0x1ee>
 8002850:	2300      	movs	r3, #0
 8002852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002854:	f002 0203 	and.w	r2, r2, #3
 8002858:	0092      	lsls	r2, r2, #2
 800285a:	4093      	lsls	r3, r2
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002862:	492f      	ldr	r1, [pc, #188]	@ (8002920 <HAL_GPIO_Init+0x2bc>)
 8002864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002866:	089b      	lsrs	r3, r3, #2
 8002868:	3302      	adds	r3, #2
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800287c:	4b2d      	ldr	r3, [pc, #180]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	492c      	ldr	r1, [pc, #176]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	608b      	str	r3, [r1, #8]
 8002888:	e006      	b.n	8002898 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800288a:	4b2a      	ldr	r3, [pc, #168]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	43db      	mvns	r3, r3
 8002892:	4928      	ldr	r1, [pc, #160]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 8002894:	4013      	ands	r3, r2
 8002896:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028a4:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	4922      	ldr	r1, [pc, #136]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028b2:	4b20      	ldr	r3, [pc, #128]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	43db      	mvns	r3, r3
 80028ba:	491e      	ldr	r1, [pc, #120]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 80028bc:	4013      	ands	r3, r2
 80028be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d006      	beq.n	80028da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028cc:	4b19      	ldr	r3, [pc, #100]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	4918      	ldr	r1, [pc, #96]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]
 80028d8:	e006      	b.n	80028e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028da:	4b16      	ldr	r3, [pc, #88]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	4914      	ldr	r1, [pc, #80]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d021      	beq.n	8002938 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	490e      	ldr	r1, [pc, #56]	@ (8002934 <HAL_GPIO_Init+0x2d0>)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	600b      	str	r3, [r1, #0]
 8002900:	e021      	b.n	8002946 <HAL_GPIO_Init+0x2e2>
 8002902:	bf00      	nop
 8002904:	10320000 	.word	0x10320000
 8002908:	10310000 	.word	0x10310000
 800290c:	10220000 	.word	0x10220000
 8002910:	10210000 	.word	0x10210000
 8002914:	10120000 	.word	0x10120000
 8002918:	10110000 	.word	0x10110000
 800291c:	40021000 	.word	0x40021000
 8002920:	40010000 	.word	0x40010000
 8002924:	40010800 	.word	0x40010800
 8002928:	40010c00 	.word	0x40010c00
 800292c:	40011000 	.word	0x40011000
 8002930:	40011400 	.word	0x40011400
 8002934:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002938:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <HAL_GPIO_Init+0x304>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	43db      	mvns	r3, r3
 8002940:	4909      	ldr	r1, [pc, #36]	@ (8002968 <HAL_GPIO_Init+0x304>)
 8002942:	4013      	ands	r3, r2
 8002944:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	3301      	adds	r3, #1
 800294a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002952:	fa22 f303 	lsr.w	r3, r2, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	f47f ae8e 	bne.w	8002678 <HAL_GPIO_Init+0x14>
  }
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	372c      	adds	r7, #44	@ 0x2c
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	40010400 	.word	0x40010400

0800296c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	807b      	strh	r3, [r7, #2]
 8002978:	4613      	mov	r3, r2
 800297a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800297c:	787b      	ldrb	r3, [r7, #1]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002982:	887a      	ldrh	r2, [r7, #2]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002988:	e003      	b.n	8002992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800298a:	887b      	ldrh	r3, [r7, #2]
 800298c:	041a      	lsls	r2, r3, #16
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	611a      	str	r2, [r3, #16]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e036      	b.n	8002a1c <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 80029b6:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f245 5255 	movw	r2, #21845	@ 0x5555
 80029c0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6852      	ldr	r2, [r2, #4]
 80029ca:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6892      	ldr	r2, [r2, #8]
 80029d4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80029d6:	f7fe fcdb 	bl	8001390 <HAL_GetTick>
 80029da:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80029dc:	e011      	b.n	8002a02 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80029de:	f7fe fcd7 	bl	8001390 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 323c 	movw	r2, #4924	@ 0x133c
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d908      	bls.n	8002a02 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e00c      	b.n	8002a1c <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1e6      	bne.n	80029de <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002a18:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002a34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e272      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f000 8087 	beq.w	8002b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a64:	4b92      	ldr	r3, [pc, #584]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d00c      	beq.n	8002a8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a70:	4b8f      	ldr	r3, [pc, #572]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 030c 	and.w	r3, r3, #12
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d112      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x5e>
 8002a7c:	4b8c      	ldr	r3, [pc, #560]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a88:	d10b      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8a:	4b89      	ldr	r3, [pc, #548]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d06c      	beq.n	8002b70 <HAL_RCC_OscConfig+0x12c>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d168      	bne.n	8002b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e24c      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_OscConfig+0x76>
 8002aac:	4b80      	ldr	r3, [pc, #512]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a7f      	ldr	r2, [pc, #508]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	e02e      	b.n	8002b18 <HAL_RCC_OscConfig+0xd4>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x98>
 8002ac2:	4b7b      	ldr	r3, [pc, #492]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7a      	ldr	r2, [pc, #488]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	4b78      	ldr	r3, [pc, #480]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a77      	ldr	r2, [pc, #476]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e01d      	b.n	8002b18 <HAL_RCC_OscConfig+0xd4>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0xbc>
 8002ae6:	4b72      	ldr	r3, [pc, #456]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a71      	ldr	r2, [pc, #452]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a6e      	ldr	r2, [pc, #440]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0xd4>
 8002b00:	4b6b      	ldr	r3, [pc, #428]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6a      	ldr	r2, [pc, #424]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b0a:	6013      	str	r3, [r2, #0]
 8002b0c:	4b68      	ldr	r3, [pc, #416]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a67      	ldr	r2, [pc, #412]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe fc36 	bl	8001390 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b28:	f7fe fc32 	bl	8001390 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b64      	cmp	r3, #100	@ 0x64
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e200      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d0f0      	beq.n	8002b28 <HAL_RCC_OscConfig+0xe4>
 8002b46:	e014      	b.n	8002b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b48:	f7fe fc22 	bl	8001390 <HAL_GetTick>
 8002b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	e008      	b.n	8002b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b50:	f7fe fc1e 	bl	8001390 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b64      	cmp	r3, #100	@ 0x64
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e1ec      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b62:	4b53      	ldr	r3, [pc, #332]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f0      	bne.n	8002b50 <HAL_RCC_OscConfig+0x10c>
 8002b6e:	e000      	b.n	8002b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d063      	beq.n	8002c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b7e:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00b      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b8a:	4b49      	ldr	r3, [pc, #292]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d11c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x18c>
 8002b96:	4b46      	ldr	r3, [pc, #280]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d116      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ba2:	4b43      	ldr	r3, [pc, #268]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_RCC_OscConfig+0x176>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d001      	beq.n	8002bba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e1c0      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	4b3d      	ldr	r3, [pc, #244]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	4939      	ldr	r1, [pc, #228]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bce:	e03a      	b.n	8002c46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d020      	beq.n	8002c1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd8:	4b36      	ldr	r3, [pc, #216]	@ (8002cb4 <HAL_RCC_OscConfig+0x270>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bde:	f7fe fbd7 	bl	8001390 <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be6:	f7fe fbd3 	bl	8001390 <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e1a1      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c04:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4927      	ldr	r1, [pc, #156]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	600b      	str	r3, [r1, #0]
 8002c18:	e015      	b.n	8002c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1a:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <HAL_RCC_OscConfig+0x270>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c20:	f7fe fbb6 	bl	8001390 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe fbb2 	bl	8001390 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e180      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d03a      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d019      	beq.n	8002c8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c5a:	4b17      	ldr	r3, [pc, #92]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fe fb96 	bl	8001390 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe fb92 	bl	8001390 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e160      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f0      	beq.n	8002c68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c86:	2001      	movs	r0, #1
 8002c88:	f000 fad0 	bl	800322c <RCC_Delay>
 8002c8c:	e01c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cb8 <HAL_RCC_OscConfig+0x274>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7fe fb7c 	bl	8001390 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9a:	e00f      	b.n	8002cbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9c:	f7fe fb78 	bl	8001390 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d908      	bls.n	8002cbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e146      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	42420000 	.word	0x42420000
 8002cb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cbc:	4b92      	ldr	r3, [pc, #584]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1e9      	bne.n	8002c9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 80a6 	beq.w	8002e22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cda:	4b8b      	ldr	r3, [pc, #556]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10d      	bne.n	8002d02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b88      	ldr	r3, [pc, #544]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	4a87      	ldr	r2, [pc, #540]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	61d3      	str	r3, [r2, #28]
 8002cf2:	4b85      	ldr	r3, [pc, #532]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d02:	4b82      	ldr	r3, [pc, #520]	@ (8002f0c <HAL_RCC_OscConfig+0x4c8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d118      	bne.n	8002d40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f0c <HAL_RCC_OscConfig+0x4c8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7e      	ldr	r2, [pc, #504]	@ (8002f0c <HAL_RCC_OscConfig+0x4c8>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1a:	f7fe fb39 	bl	8001390 <HAL_GetTick>
 8002d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d20:	e008      	b.n	8002d34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d22:	f7fe fb35 	bl	8001390 <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	2b64      	cmp	r3, #100	@ 0x64
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e103      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d34:	4b75      	ldr	r3, [pc, #468]	@ (8002f0c <HAL_RCC_OscConfig+0x4c8>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d0f0      	beq.n	8002d22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x312>
 8002d48:	4b6f      	ldr	r3, [pc, #444]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	4a6e      	ldr	r2, [pc, #440]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6213      	str	r3, [r2, #32]
 8002d54:	e02d      	b.n	8002db2 <HAL_RCC_OscConfig+0x36e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x334>
 8002d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4a69      	ldr	r2, [pc, #420]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	6213      	str	r3, [r2, #32]
 8002d6a:	4b67      	ldr	r3, [pc, #412]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	6a1b      	ldr	r3, [r3, #32]
 8002d6e:	4a66      	ldr	r2, [pc, #408]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d70:	f023 0304 	bic.w	r3, r3, #4
 8002d74:	6213      	str	r3, [r2, #32]
 8002d76:	e01c      	b.n	8002db2 <HAL_RCC_OscConfig+0x36e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCC_OscConfig+0x356>
 8002d80:	4b61      	ldr	r3, [pc, #388]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	4a60      	ldr	r2, [pc, #384]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d86:	f043 0304 	orr.w	r3, r3, #4
 8002d8a:	6213      	str	r3, [r2, #32]
 8002d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4a5d      	ldr	r2, [pc, #372]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d92:	f043 0301 	orr.w	r3, r3, #1
 8002d96:	6213      	str	r3, [r2, #32]
 8002d98:	e00b      	b.n	8002db2 <HAL_RCC_OscConfig+0x36e>
 8002d9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	6213      	str	r3, [r2, #32]
 8002da6:	4b58      	ldr	r3, [pc, #352]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4a57      	ldr	r2, [pc, #348]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	f023 0304 	bic.w	r3, r3, #4
 8002db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d015      	beq.n	8002de6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fae9 	bl	8001390 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc0:	e00a      	b.n	8002dd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc2:	f7fe fae5 	bl	8001390 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0b1      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ee      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x37e>
 8002de4:	e014      	b.n	8002e10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de6:	f7fe fad3 	bl	8001390 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fe facf 	bl	8001390 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e09b      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	4b40      	ldr	r3, [pc, #256]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ee      	bne.n	8002dee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e16:	4b3c      	ldr	r3, [pc, #240]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f000 8087 	beq.w	8002f3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e2c:	4b36      	ldr	r3, [pc, #216]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d061      	beq.n	8002efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d146      	bne.n	8002ece <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e40:	4b33      	ldr	r3, [pc, #204]	@ (8002f10 <HAL_RCC_OscConfig+0x4cc>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e46:	f7fe faa3 	bl	8001390 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fe fa9f 	bl	8001390 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e06d      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e60:	4b29      	ldr	r3, [pc, #164]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e74:	d108      	bne.n	8002e88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e76:	4b24      	ldr	r3, [pc, #144]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	4921      	ldr	r1, [pc, #132]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e88:	4b1f      	ldr	r3, [pc, #124]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a19      	ldr	r1, [r3, #32]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	491b      	ldr	r1, [pc, #108]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f10 <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea6:	f7fe fa73 	bl	8001390 <HAL_GetTick>
 8002eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eac:	e008      	b.n	8002ec0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eae:	f7fe fa6f 	bl	8001390 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d901      	bls.n	8002ec0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	e03d      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec0:	4b11      	ldr	r3, [pc, #68]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0f0      	beq.n	8002eae <HAL_RCC_OscConfig+0x46a>
 8002ecc:	e035      	b.n	8002f3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ece:	4b10      	ldr	r3, [pc, #64]	@ (8002f10 <HAL_RCC_OscConfig+0x4cc>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fa5c 	bl	8001390 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe fa58 	bl	8001390 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e026      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eee:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f0      	bne.n	8002edc <HAL_RCC_OscConfig+0x498>
 8002efa:	e01e      	b.n	8002f3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e019      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40007000 	.word	0x40007000
 8002f10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002f14:	4b0b      	ldr	r3, [pc, #44]	@ (8002f44 <HAL_RCC_OscConfig+0x500>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d106      	bne.n	8002f36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d001      	beq.n	8002f3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000

08002f48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0d0      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d910      	bls.n	8002f8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6a:	4b67      	ldr	r3, [pc, #412]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 0207 	bic.w	r2, r3, #7
 8002f72:	4965      	ldr	r1, [pc, #404]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7a:	4b63      	ldr	r3, [pc, #396]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0307 	and.w	r3, r3, #7
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d001      	beq.n	8002f8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0b8      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d020      	beq.n	8002fda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d005      	beq.n	8002fb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa4:	4b59      	ldr	r3, [pc, #356]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	4a58      	ldr	r2, [pc, #352]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002fae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0308 	and.w	r3, r3, #8
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fbc:	4b53      	ldr	r3, [pc, #332]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4a52      	ldr	r2, [pc, #328]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fc2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc8:	4b50      	ldr	r3, [pc, #320]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	494d      	ldr	r1, [pc, #308]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d040      	beq.n	8003068 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d107      	bne.n	8002ffe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fee:	4b47      	ldr	r3, [pc, #284]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d115      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e07f      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b02      	cmp	r3, #2
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003006:	4b41      	ldr	r3, [pc, #260]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d109      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e073      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003016:	4b3d      	ldr	r3, [pc, #244]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e06b      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003026:	4b39      	ldr	r3, [pc, #228]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	4936      	ldr	r1, [pc, #216]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003038:	f7fe f9aa 	bl	8001390 <HAL_GetTick>
 800303c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303e:	e00a      	b.n	8003056 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003040:	f7fe f9a6 	bl	8001390 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800304e:	4293      	cmp	r3, r2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e053      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003056:	4b2d      	ldr	r3, [pc, #180]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f003 020c 	and.w	r2, r3, #12
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	429a      	cmp	r2, r3
 8003066:	d1eb      	bne.n	8003040 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003068:	4b27      	ldr	r3, [pc, #156]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	429a      	cmp	r2, r3
 8003074:	d210      	bcs.n	8003098 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003076:	4b24      	ldr	r3, [pc, #144]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f023 0207 	bic.w	r2, r3, #7
 800307e:	4922      	ldr	r1, [pc, #136]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b20      	ldr	r3, [pc, #128]	@ (8003108 <HAL_RCC_ClockConfig+0x1c0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e032      	b.n	80030fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a4:	4b19      	ldr	r3, [pc, #100]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4916      	ldr	r1, [pc, #88]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030c2:	4b12      	ldr	r3, [pc, #72]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	490e      	ldr	r1, [pc, #56]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030d6:	f000 f821 	bl	800311c <HAL_RCC_GetSysClockFreq>
 80030da:	4602      	mov	r2, r0
 80030dc:	4b0b      	ldr	r3, [pc, #44]	@ (800310c <HAL_RCC_ClockConfig+0x1c4>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	490a      	ldr	r1, [pc, #40]	@ (8003110 <HAL_RCC_ClockConfig+0x1c8>)
 80030e8:	5ccb      	ldrb	r3, [r1, r3]
 80030ea:	fa22 f303 	lsr.w	r3, r2, r3
 80030ee:	4a09      	ldr	r2, [pc, #36]	@ (8003114 <HAL_RCC_ClockConfig+0x1cc>)
 80030f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030f2:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <HAL_RCC_ClockConfig+0x1d0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe f908 	bl	800130c <HAL_InitTick>

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40022000 	.word	0x40022000
 800310c:	40021000 	.word	0x40021000
 8003110:	08004b14 	.word	0x08004b14
 8003114:	20000000 	.word	0x20000000
 8003118:	20000004 	.word	0x20000004

0800311c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
 800312e:	2300      	movs	r3, #0
 8003130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003136:	4b1e      	ldr	r3, [pc, #120]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b04      	cmp	r3, #4
 8003144:	d002      	beq.n	800314c <HAL_RCC_GetSysClockFreq+0x30>
 8003146:	2b08      	cmp	r3, #8
 8003148:	d003      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x36>
 800314a:	e027      	b.n	800319c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800314c:	4b19      	ldr	r3, [pc, #100]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800314e:	613b      	str	r3, [r7, #16]
      break;
 8003150:	e027      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	0c9b      	lsrs	r3, r3, #18
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	4a17      	ldr	r2, [pc, #92]	@ (80031b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
 800315e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d010      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800316a:	4b11      	ldr	r3, [pc, #68]	@ (80031b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	0c5b      	lsrs	r3, r3, #17
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	4a11      	ldr	r2, [pc, #68]	@ (80031bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a0d      	ldr	r2, [pc, #52]	@ (80031b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800317e:	fb03 f202 	mul.w	r2, r3, r2
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e004      	b.n	8003196 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a0c      	ldr	r2, [pc, #48]	@ (80031c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	613b      	str	r3, [r7, #16]
      break;
 800319a:	e002      	b.n	80031a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800319c:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800319e:	613b      	str	r3, [r7, #16]
      break;
 80031a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031a2:	693b      	ldr	r3, [r7, #16]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	371c      	adds	r7, #28
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40021000 	.word	0x40021000
 80031b4:	00f42400 	.word	0x00f42400
 80031b8:	08004b2c 	.word	0x08004b2c
 80031bc:	08004b3c 	.word	0x08004b3c
 80031c0:	003d0900 	.word	0x003d0900
 80031c4:	007a1200 	.word	0x007a1200

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031cc:	4b02      	ldr	r3, [pc, #8]	@ (80031d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	20000000 	.word	0x20000000

080031dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031e0:	f7ff fff2 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031e4:	4602      	mov	r2, r0
 80031e6:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	0a1b      	lsrs	r3, r3, #8
 80031ec:	f003 0307 	and.w	r3, r3, #7
 80031f0:	4903      	ldr	r1, [pc, #12]	@ (8003200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f2:	5ccb      	ldrb	r3, [r1, r3]
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	08004b24 	.word	0x08004b24

08003204 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003208:	f7ff ffde 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 800320c:	4602      	mov	r2, r0
 800320e:	4b05      	ldr	r3, [pc, #20]	@ (8003224 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	0adb      	lsrs	r3, r3, #11
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	4903      	ldr	r1, [pc, #12]	@ (8003228 <HAL_RCC_GetPCLK2Freq+0x24>)
 800321a:	5ccb      	ldrb	r3, [r1, r3]
 800321c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003220:	4618      	mov	r0, r3
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	08004b24 	.word	0x08004b24

0800322c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003234:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <RCC_Delay+0x34>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a0a      	ldr	r2, [pc, #40]	@ (8003264 <RCC_Delay+0x38>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0a5b      	lsrs	r3, r3, #9
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	fb02 f303 	mul.w	r3, r2, r3
 8003246:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003248:	bf00      	nop
  }
  while (Delay --);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	60fa      	str	r2, [r7, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1f9      	bne.n	8003248 <RCC_Delay+0x1c>
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr
 8003260:	20000000 	.word	0x20000000
 8003264:	10624dd3 	.word	0x10624dd3

08003268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e041      	b.n	80032fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fd ff04 	bl	800109c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f000 fa5c 	bl	8003764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	d001      	beq.n	8003320 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e03a      	b.n	8003396 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a18      	ldr	r2, [pc, #96]	@ (80033a0 <HAL_TIM_Base_Start_IT+0x98>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00e      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x58>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334a:	d009      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x58>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a14      	ldr	r2, [pc, #80]	@ (80033a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d004      	beq.n	8003360 <HAL_TIM_Base_Start_IT+0x58>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a13      	ldr	r2, [pc, #76]	@ (80033a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d111      	bne.n	8003384 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2b06      	cmp	r3, #6
 8003370:	d010      	beq.n	8003394 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0201 	orr.w	r2, r2, #1
 8003380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003382:	e007      	b.n	8003394 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0201 	orr.w	r2, r2, #1
 8003392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	40012c00 	.word	0x40012c00
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800

080033ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d020      	beq.n	8003410 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01b      	beq.n	8003410 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0202 	mvn.w	r2, #2
 80033e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f998 	bl	800372c <HAL_TIM_IC_CaptureCallback>
 80033fc:	e005      	b.n	800340a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f98b 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f99a 	bl	800373e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	2b00      	cmp	r3, #0
 8003418:	d020      	beq.n	800345c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01b      	beq.n	800345c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0204 	mvn.w	r2, #4
 800342c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f972 	bl	800372c <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f965 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f974 	bl	800373e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d020      	beq.n	80034a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0308 	and.w	r3, r3, #8
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01b      	beq.n	80034a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0208 	mvn.w	r2, #8
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2204      	movs	r2, #4
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f94c 	bl	800372c <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f93f 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f94e 	bl	800373e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 0310 	and.w	r3, r3, #16
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d020      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01b      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0210 	mvn.w	r2, #16
 80034c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2208      	movs	r2, #8
 80034ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 f926 	bl	800372c <HAL_TIM_IC_CaptureCallback>
 80034e0:	e005      	b.n	80034ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f919 	bl	800371a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 f928 	bl	800373e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0201 	mvn.w	r2, #1
 8003510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd f8d0 	bl	80006b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00c      	beq.n	800353c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa7f 	bl	8003a3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00c      	beq.n	8003560 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8f8 	bl	8003750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0320 	and.w	r3, r3, #32
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0220 	mvn.w	r2, #32
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fa52 	bl	8003a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_TIM_ConfigClockSource+0x1c>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0b4      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x186>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e0:	d03e      	beq.n	8003660 <HAL_TIM_ConfigClockSource+0xd4>
 80035e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e6:	f200 8087 	bhi.w	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 80035ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ee:	f000 8086 	beq.w	80036fe <HAL_TIM_ConfigClockSource+0x172>
 80035f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f6:	d87f      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 80035f8:	2b70      	cmp	r3, #112	@ 0x70
 80035fa:	d01a      	beq.n	8003632 <HAL_TIM_ConfigClockSource+0xa6>
 80035fc:	2b70      	cmp	r3, #112	@ 0x70
 80035fe:	d87b      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003600:	2b60      	cmp	r3, #96	@ 0x60
 8003602:	d050      	beq.n	80036a6 <HAL_TIM_ConfigClockSource+0x11a>
 8003604:	2b60      	cmp	r3, #96	@ 0x60
 8003606:	d877      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003608:	2b50      	cmp	r3, #80	@ 0x50
 800360a:	d03c      	beq.n	8003686 <HAL_TIM_ConfigClockSource+0xfa>
 800360c:	2b50      	cmp	r3, #80	@ 0x50
 800360e:	d873      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003610:	2b40      	cmp	r3, #64	@ 0x40
 8003612:	d058      	beq.n	80036c6 <HAL_TIM_ConfigClockSource+0x13a>
 8003614:	2b40      	cmp	r3, #64	@ 0x40
 8003616:	d86f      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003618:	2b30      	cmp	r3, #48	@ 0x30
 800361a:	d064      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x15a>
 800361c:	2b30      	cmp	r3, #48	@ 0x30
 800361e:	d86b      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003620:	2b20      	cmp	r3, #32
 8003622:	d060      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003624:	2b20      	cmp	r3, #32
 8003626:	d867      	bhi.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d05c      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x15a>
 800362c:	2b10      	cmp	r3, #16
 800362e:	d05a      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0x15a>
 8003630:	e062      	b.n	80036f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003642:	f000 f974 	bl	800392e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003654:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	609a      	str	r2, [r3, #8]
      break;
 800365e:	e04f      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003670:	f000 f95d 	bl	800392e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003682:	609a      	str	r2, [r3, #8]
      break;
 8003684:	e03c      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003692:	461a      	mov	r2, r3
 8003694:	f000 f8d4 	bl	8003840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2150      	movs	r1, #80	@ 0x50
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f92b 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80036a4:	e02c      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036b2:	461a      	mov	r2, r3
 80036b4:	f000 f8f2 	bl	800389c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2160      	movs	r1, #96	@ 0x60
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 f91b 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80036c4:	e01c      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d2:	461a      	mov	r2, r3
 80036d4:	f000 f8b4 	bl	8003840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2140      	movs	r1, #64	@ 0x40
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f90b 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80036e4:	e00c      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f000 f902 	bl	80038fa <TIM_ITRx_SetConfig>
      break;
 80036f6:	e003      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	73fb      	strb	r3, [r7, #15]
      break;
 80036fc:	e000      	b.n	8003700 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003710:	7bfb      	ldrb	r3, [r7, #15]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr

08003750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	bc80      	pop	{r7}
 8003760:	4770      	bx	lr
	...

08003764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a2f      	ldr	r2, [pc, #188]	@ (8003834 <TIM_Base_SetConfig+0xd0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00b      	beq.n	8003794 <TIM_Base_SetConfig+0x30>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003782:	d007      	beq.n	8003794 <TIM_Base_SetConfig+0x30>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a2c      	ldr	r2, [pc, #176]	@ (8003838 <TIM_Base_SetConfig+0xd4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_Base_SetConfig+0x30>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a2b      	ldr	r2, [pc, #172]	@ (800383c <TIM_Base_SetConfig+0xd8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d108      	bne.n	80037a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800379a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a22      	ldr	r2, [pc, #136]	@ (8003834 <TIM_Base_SetConfig+0xd0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00b      	beq.n	80037c6 <TIM_Base_SetConfig+0x62>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b4:	d007      	beq.n	80037c6 <TIM_Base_SetConfig+0x62>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003838 <TIM_Base_SetConfig+0xd4>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d003      	beq.n	80037c6 <TIM_Base_SetConfig+0x62>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a1e      	ldr	r2, [pc, #120]	@ (800383c <TIM_Base_SetConfig+0xd8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d108      	bne.n	80037d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003834 <TIM_Base_SetConfig+0xd0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d103      	bne.n	800380c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f023 0201 	bic.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	611a      	str	r2, [r3, #16]
  }
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	40012c00 	.word	0x40012c00
 8003838:	40000400 	.word	0x40000400
 800383c:	40000800 	.word	0x40000800

08003840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	f023 0201 	bic.w	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800386a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f023 030a 	bic.w	r3, r3, #10
 800387c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	621a      	str	r2, [r3, #32]
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	f023 0210 	bic.w	r2, r3, #16
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	031b      	lsls	r3, r3, #12
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	011b      	lsls	r3, r3, #4
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	621a      	str	r2, [r3, #32]
}
 80038f0:	bf00      	nop
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
 8003902:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003910:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	f043 0307 	orr.w	r3, r3, #7
 800391c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	609a      	str	r2, [r3, #8]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800392e:	b480      	push	{r7}
 8003930:	b087      	sub	sp, #28
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003948:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	021a      	lsls	r2, r3, #8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	431a      	orrs	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	4313      	orrs	r3, r2
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	bf00      	nop
 8003964:	371c      	adds	r7, #28
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003980:	2302      	movs	r3, #2
 8003982:	e046      	b.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a16      	ldr	r2, [pc, #88]	@ (8003a1c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d0:	d009      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a12      	ldr	r2, [pc, #72]	@ (8003a20 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a10      	ldr	r2, [pc, #64]	@ (8003a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d10c      	bne.n	8003a00 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bc80      	pop	{r7}
 8003a1a:	4770      	bx	lr
 8003a1c:	40012c00 	.word	0x40012c00
 8003a20:	40000400 	.word	0x40000400
 8003a24:	40000800 	.word	0x40000800

08003a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bc80      	pop	{r7}
 8003a4a:	4770      	bx	lr

08003a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e042      	b.n	8003ae4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fb38 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	@ 0x24
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 ff79 	bl	8004988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68da      	ldr	r2, [r3, #12]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	@ 0x28
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	4613      	mov	r3, r2
 8003afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d175      	bne.n	8003bf8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_UART_Transmit+0x2c>
 8003b12:	88fb      	ldrh	r3, [r7, #6]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e06e      	b.n	8003bfa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2221      	movs	r2, #33	@ 0x21
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b2a:	f7fd fc31 	bl	8001390 <HAL_GetTick>
 8003b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	88fa      	ldrh	r2, [r7, #6]
 8003b34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	88fa      	ldrh	r2, [r7, #6]
 8003b3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b44:	d108      	bne.n	8003b58 <HAL_UART_Transmit+0x6c>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d104      	bne.n	8003b58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	e003      	b.n	8003b60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b60:	e02e      	b.n	8003bc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2180      	movs	r1, #128	@ 0x80
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fc55 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d005      	beq.n	8003b84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e03a      	b.n	8003bfa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10b      	bne.n	8003ba2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	61bb      	str	r3, [r7, #24]
 8003ba0:	e007      	b.n	8003bb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	781a      	ldrb	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1cb      	bne.n	8003b62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2140      	movs	r1, #64	@ 0x40
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fc21 	bl	800441c <UART_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e006      	b.n	8003bfa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	e000      	b.n	8003bfa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003bf8:	2302      	movs	r3, #2
  }
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3720      	adds	r7, #32
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b08c      	sub	sp, #48	@ 0x30
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d146      	bne.n	8003caa <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e03f      	b.n	8003cac <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003c38:	88fb      	ldrh	r3, [r7, #6]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68b9      	ldr	r1, [r7, #8]
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fc46 	bl	80044d0 <UART_Start_Receive_DMA>
 8003c44:	4603      	mov	r3, r0
 8003c46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d125      	bne.n	8003c9e <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c52:	2300      	movs	r3, #0
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	e853 3f00 	ldrex	r3, [r3]
 8003c76:	617b      	str	r3, [r7, #20]
   return(result);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f043 0310 	orr.w	r3, r3, #16
 8003c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	330c      	adds	r3, #12
 8003c86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c88:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c8a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8c:	6a39      	ldr	r1, [r7, #32]
 8003c8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c90:	e841 2300 	strex	r3, r2, [r1]
 8003c94:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e5      	bne.n	8003c68 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8003c9c:	e002      	b.n	8003ca4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8003ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003ca8:	e000      	b.n	8003cac <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8003caa:	2302      	movs	r3, #2
  }
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3730      	adds	r7, #48	@ 0x30
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b0ba      	sub	sp, #232	@ 0xe8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cea:	f003 030f 	and.w	r3, r3, #15
 8003cee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10f      	bne.n	8003d1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <HAL_UART_IRQHandler+0x66>
 8003d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fd7a 	bl	800480c <UART_Receive_IT>
      return;
 8003d18:	e25b      	b.n	80041d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 80de 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x22c>
 8003d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d106      	bne.n	8003d3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80d1 	beq.w	8003ee0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00b      	beq.n	8003d62 <HAL_UART_IRQHandler+0xae>
 8003d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5a:	f043 0201 	orr.w	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <HAL_UART_IRQHandler+0xd2>
 8003d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d005      	beq.n	8003d86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d7e:	f043 0202 	orr.w	r2, r3, #2
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <HAL_UART_IRQHandler+0xf6>
 8003d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d005      	beq.n	8003daa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003da2:	f043 0204 	orr.w	r2, r3, #4
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d011      	beq.n	8003dda <HAL_UART_IRQHandler+0x126>
 8003db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d105      	bne.n	8003dce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003dc6:	f003 0301 	and.w	r3, r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d005      	beq.n	8003dda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	f043 0208 	orr.w	r2, r3, #8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f000 81f2 	beq.w	80041c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_UART_IRQHandler+0x14e>
 8003df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003df4:	f003 0320 	and.w	r3, r3, #32
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fd05 	bl	800480c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d103      	bne.n	8003e2e <HAL_UART_IRQHandler+0x17a>
 8003e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d04f      	beq.n	8003ece <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fc0f 	bl	8004652 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d041      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3314      	adds	r3, #20
 8003e48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3314      	adds	r3, #20
 8003e6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d1d9      	bne.n	8003e42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d013      	beq.n	8003ebe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9a:	4a7e      	ldr	r2, [pc, #504]	@ (8004094 <HAL_UART_IRQHandler+0x3e0>)
 8003e9c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fa32 	bl	800230c <HAL_DMA_Abort_IT>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d016      	beq.n	8003edc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	e00e      	b.n	8003edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9a5 	bl	800420e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e00a      	b.n	8003edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f9a1 	bl	800420e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	e006      	b.n	8003edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f99d 	bl	800420e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003eda:	e175      	b.n	80041c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003edc:	bf00      	nop
    return;
 8003ede:	e173      	b.n	80041c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	f040 814f 	bne.w	8004188 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eee:	f003 0310 	and.w	r3, r3, #16
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 8148 	beq.w	8004188 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003efc:	f003 0310 	and.w	r3, r3, #16
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8141 	beq.w	8004188 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80b6 	beq.w	8004098 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8145 	beq.w	80041cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	f080 813e 	bcs.w	80041cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f5c:	699b      	ldr	r3, [r3, #24]
 8003f5e:	2b20      	cmp	r3, #32
 8003f60:	f000 8088 	beq.w	8004074 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f7e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003f90:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f94:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003fa0:	e841 2300 	strex	r3, r2, [r1]
 8003fa4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1d9      	bne.n	8003f64 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3314      	adds	r3, #20
 8003fb6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fc0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3314      	adds	r3, #20
 8003fd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fd4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fda:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fdc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e1      	bne.n	8003fb0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3314      	adds	r3, #20
 8003ff2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ffe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004002:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3314      	adds	r3, #20
 800400c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004010:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004012:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004014:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004016:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004018:	e841 2300 	strex	r3, r2, [r1]
 800401c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800401e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1e3      	bne.n	8003fec <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	330c      	adds	r3, #12
 8004038:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004044:	f023 0310 	bic.w	r3, r3, #16
 8004048:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004056:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004058:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800405c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e3      	bne.n	8004032 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406e:	4618      	mov	r0, r3
 8004070:	f7fe f910 	bl	8002294 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2202      	movs	r2, #2
 8004078:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004082:	b29b      	uxth	r3, r3
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	b29b      	uxth	r3, r3
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fc fad8 	bl	8000640 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004090:	e09c      	b.n	80041cc <HAL_UART_IRQHandler+0x518>
 8004092:	bf00      	nop
 8004094:	08004717 	.word	0x08004717
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 808e 	beq.w	80041d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80040b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8089 	beq.w	80041d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80040e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80040e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e3      	bne.n	80040be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	623b      	str	r3, [r7, #32]
   return(result);
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800411a:	633a      	str	r2, [r7, #48]	@ 0x30
 800411c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004122:	e841 2300 	strex	r3, r2, [r1]
 8004126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1e3      	bne.n	80040f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	330c      	adds	r3, #12
 8004142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	60fb      	str	r3, [r7, #12]
   return(result);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0310 	bic.w	r3, r3, #16
 8004152:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004160:	61fa      	str	r2, [r7, #28]
 8004162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004164:	69b9      	ldr	r1, [r7, #24]
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	e841 2300 	strex	r3, r2, [r1]
 800416c:	617b      	str	r3, [r7, #20]
   return(result);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e3      	bne.n	800413c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800417a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800417e:	4619      	mov	r1, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7fc fa5d 	bl	8000640 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004186:	e023      	b.n	80041d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800418c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004190:	2b00      	cmp	r3, #0
 8004192:	d009      	beq.n	80041a8 <HAL_UART_IRQHandler+0x4f4>
 8004194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 facc 	bl	800473e <UART_Transmit_IT>
    return;
 80041a6:	e014      	b.n	80041d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00e      	beq.n	80041d2 <HAL_UART_IRQHandler+0x51e>
 80041b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d008      	beq.n	80041d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fb0b 	bl	80047dc <UART_EndTransmit_IT>
    return;
 80041c6:	e004      	b.n	80041d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80041c8:	bf00      	nop
 80041ca:	e002      	b.n	80041d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80041cc:	bf00      	nop
 80041ce:	e000      	b.n	80041d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80041d0:	bf00      	nop
  }
}
 80041d2:	37e8      	adds	r7, #232	@ 0xe8
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr

080041ea <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bc80      	pop	{r7}
 80041fa:	4770      	bx	lr

080041fc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr

0800420e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr

08004220 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b09c      	sub	sp, #112	@ 0x70
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b00      	cmp	r3, #0
 800423a:	d172      	bne.n	8004322 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800423c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800423e:	2200      	movs	r2, #0
 8004240:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004242:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	330c      	adds	r3, #12
 8004248:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004252:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004254:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004258:	66bb      	str	r3, [r7, #104]	@ 0x68
 800425a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	330c      	adds	r3, #12
 8004260:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004262:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004264:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004268:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004270:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e5      	bne.n	8004242 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3314      	adds	r3, #20
 800427c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004280:	e853 3f00 	ldrex	r3, [r3]
 8004284:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	667b      	str	r3, [r7, #100]	@ 0x64
 800428e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	3314      	adds	r3, #20
 8004294:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004296:	647a      	str	r2, [r7, #68]	@ 0x44
 8004298:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800429c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800429e:	e841 2300 	strex	r3, r2, [r1]
 80042a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e5      	bne.n	8004276 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	3314      	adds	r3, #20
 80042b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	623b      	str	r3, [r7, #32]
   return(result);
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80042c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80042ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80042cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d2:	e841 2300 	strex	r3, r2, [r1]
 80042d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1e5      	bne.n	80042aa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d119      	bne.n	8004322 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f023 0310 	bic.w	r3, r3, #16
 8004304:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	330c      	adds	r3, #12
 800430c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800430e:	61fa      	str	r2, [r7, #28]
 8004310:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	69b9      	ldr	r1, [r7, #24]
 8004314:	69fa      	ldr	r2, [r7, #28]
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	617b      	str	r3, [r7, #20]
   return(result);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e5      	bne.n	80042ee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004322:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004324:	2200      	movs	r2, #0
 8004326:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	2b01      	cmp	r3, #1
 800432e:	d106      	bne.n	800433e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004332:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004334:	4619      	mov	r1, r3
 8004336:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004338:	f7fc f982 	bl	8000640 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800433c:	e002      	b.n	8004344 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800433e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004340:	f7ff ff53 	bl	80041ea <HAL_UART_RxCpltCallback>
}
 8004344:	bf00      	nop
 8004346:	3770      	adds	r7, #112	@ 0x70
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004364:	2b01      	cmp	r3, #1
 8004366:	d108      	bne.n	800437a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	b29b      	uxth	r3, r3
 8004370:	4619      	mov	r1, r3
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7fc f964 	bl	8000640 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004378:	e002      	b.n	8004380 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f7ff ff3e 	bl	80041fc <HAL_UART_RxHalfCpltCallback>
}
 8004380:	bf00      	nop
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bf14      	ite	ne
 80043a8:	2301      	movne	r3, #1
 80043aa:	2300      	moveq	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b21      	cmp	r3, #33	@ 0x21
 80043ba:	d108      	bne.n	80043ce <UART_DMAError+0x46>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d005      	beq.n	80043ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2200      	movs	r2, #0
 80043c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80043c8:	68b8      	ldr	r0, [r7, #8]
 80043ca:	f000 f91b 	bl	8004604 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b22      	cmp	r3, #34	@ 0x22
 80043ee:	d108      	bne.n	8004402 <UART_DMAError+0x7a>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d005      	beq.n	8004402 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2200      	movs	r2, #0
 80043fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80043fc:	68b8      	ldr	r0, [r7, #8]
 80043fe:	f000 f928 	bl	8004652 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	f043 0210 	orr.w	r2, r3, #16
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800440e:	68b8      	ldr	r0, [r7, #8]
 8004410:	f7ff fefd 	bl	800420e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800442c:	e03b      	b.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004434:	d037      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004436:	f7fc ffab 	bl	8001390 <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	6a3a      	ldr	r2, [r7, #32]
 8004442:	429a      	cmp	r2, r3
 8004444:	d302      	bcc.n	800444c <UART_WaitOnFlagUntilTimeout+0x30>
 8004446:	6a3b      	ldr	r3, [r7, #32]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e03a      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	d023      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	2b80      	cmp	r3, #128	@ 0x80
 8004462:	d020      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b40      	cmp	r3, #64	@ 0x40
 8004468:	d01d      	beq.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b08      	cmp	r3, #8
 8004476:	d116      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	617b      	str	r3, [r7, #20]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 f8df 	bl	8004652 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2208      	movs	r2, #8
 8004498:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e00f      	b.n	80044c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	bf0c      	ite	eq
 80044b6:	2301      	moveq	r3, #1
 80044b8:	2300      	movne	r3, #0
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d0b4      	beq.n	800442e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b098      	sub	sp, #96	@ 0x60
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	4613      	mov	r3, r2
 80044dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88fa      	ldrh	r2, [r7, #6]
 80044e8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2222      	movs	r2, #34	@ 0x22
 80044f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fc:	4a3e      	ldr	r2, [pc, #248]	@ (80045f8 <UART_Start_Receive_DMA+0x128>)
 80044fe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004504:	4a3d      	ldr	r2, [pc, #244]	@ (80045fc <UART_Start_Receive_DMA+0x12c>)
 8004506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800450c:	4a3c      	ldr	r2, [pc, #240]	@ (8004600 <UART_Start_Receive_DMA+0x130>)
 800450e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004514:	2200      	movs	r2, #0
 8004516:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004518:	f107 0308 	add.w	r3, r7, #8
 800451c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	f7fd fe50 	bl	80021d4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d019      	beq.n	8004586 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004568:	65bb      	str	r3, [r7, #88]	@ 0x58
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004572:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004574:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004578:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3314      	adds	r3, #20
 800458c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004590:	e853 3f00 	ldrex	r3, [r3]
 8004594:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	657b      	str	r3, [r7, #84]	@ 0x54
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3314      	adds	r3, #20
 80045a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045a6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80045a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80045ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80045ae:	e841 2300 	strex	r3, r2, [r1]
 80045b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1e5      	bne.n	8004586 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3314      	adds	r3, #20
 80045c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	e853 3f00 	ldrex	r3, [r3]
 80045c8:	617b      	str	r3, [r7, #20]
   return(result);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80045d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3314      	adds	r3, #20
 80045d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80045da:	627a      	str	r2, [r7, #36]	@ 0x24
 80045dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045de:	6a39      	ldr	r1, [r7, #32]
 80045e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e2:	e841 2300 	strex	r3, r2, [r1]
 80045e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1e5      	bne.n	80045ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3760      	adds	r7, #96	@ 0x60
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	08004221 	.word	0x08004221
 80045fc:	0800434d 	.word	0x0800434d
 8004600:	08004389 	.word	0x08004389

08004604 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b089      	sub	sp, #36	@ 0x24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	330c      	adds	r3, #12
 8004612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	e853 3f00 	ldrex	r3, [r3]
 800461a:	60bb      	str	r3, [r7, #8]
   return(result);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004622:	61fb      	str	r3, [r7, #28]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	330c      	adds	r3, #12
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	61ba      	str	r2, [r7, #24]
 800462e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004630:	6979      	ldr	r1, [r7, #20]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	e841 2300 	strex	r3, r2, [r1]
 8004638:	613b      	str	r3, [r7, #16]
   return(result);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d1e5      	bne.n	800460c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004648:	bf00      	nop
 800464a:	3724      	adds	r7, #36	@ 0x24
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr

08004652 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004652:	b480      	push	{r7}
 8004654:	b095      	sub	sp, #84	@ 0x54
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	330c      	adds	r3, #12
 8004660:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800466a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004670:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	330c      	adds	r3, #12
 8004678:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800467a:	643a      	str	r2, [r7, #64]	@ 0x40
 800467c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004680:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e5      	bne.n	800465a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3314      	adds	r3, #20
 8004694:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	e853 3f00 	ldrex	r3, [r3]
 800469c:	61fb      	str	r3, [r7, #28]
   return(result);
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	f023 0301 	bic.w	r3, r3, #1
 80046a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3314      	adds	r3, #20
 80046ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046b6:	e841 2300 	strex	r3, r2, [r1]
 80046ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80046bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d1e5      	bne.n	800468e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d119      	bne.n	80046fe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	330c      	adds	r3, #12
 80046d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	e853 3f00 	ldrex	r3, [r3]
 80046d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f023 0310 	bic.w	r3, r3, #16
 80046e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ea:	61ba      	str	r2, [r7, #24]
 80046ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ee:	6979      	ldr	r1, [r7, #20]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	e841 2300 	strex	r3, r2, [r1]
 80046f6:	613b      	str	r3, [r7, #16]
   return(result);
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1e5      	bne.n	80046ca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800470c:	bf00      	nop
 800470e:	3754      	adds	r7, #84	@ 0x54
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004722:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f7ff fd6c 	bl	800420e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800473e:	b480      	push	{r7}
 8004740:	b085      	sub	sp, #20
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b21      	cmp	r3, #33	@ 0x21
 8004750:	d13e      	bne.n	80047d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800475a:	d114      	bne.n	8004786 <UART_Transmit_IT+0x48>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d110      	bne.n	8004786 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	881b      	ldrh	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004778:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	1c9a      	adds	r2, r3, #2
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	621a      	str	r2, [r3, #32]
 8004784:	e008      	b.n	8004798 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	1c59      	adds	r1, r3, #1
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6211      	str	r1, [r2, #32]
 8004790:	781a      	ldrb	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	4619      	mov	r1, r3
 80047a6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10f      	bne.n	80047cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68da      	ldr	r2, [r3, #12]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3714      	adds	r7, #20
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bc80      	pop	{r7}
 80047da:	4770      	bx	lr

080047dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff fceb 	bl	80041d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08c      	sub	sp, #48	@ 0x30
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b22      	cmp	r3, #34	@ 0x22
 800481e:	f040 80ae 	bne.w	800497e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800482a:	d117      	bne.n	800485c <UART_Receive_IT+0x50>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d113      	bne.n	800485c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004834:	2300      	movs	r3, #0
 8004836:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	b29b      	uxth	r3, r3
 8004846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484a:	b29a      	uxth	r2, r3
 800484c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	1c9a      	adds	r2, r3, #2
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	629a      	str	r2, [r3, #40]	@ 0x28
 800485a:	e026      	b.n	80048aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004860:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004862:	2300      	movs	r3, #0
 8004864:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486e:	d007      	beq.n	8004880 <UART_Receive_IT+0x74>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <UART_Receive_IT+0x82>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	b2da      	uxtb	r2, r3
 8004888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	e008      	b.n	80048a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800489a:	b2da      	uxtb	r2, r3
 800489c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	4619      	mov	r1, r3
 80048b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d15d      	bne.n	800497a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0220 	bic.w	r2, r2, #32
 80048cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695a      	ldr	r2, [r3, #20]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 0201 	bic.w	r2, r2, #1
 80048ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004900:	2b01      	cmp	r3, #1
 8004902:	d135      	bne.n	8004970 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	330c      	adds	r3, #12
 8004910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	613b      	str	r3, [r7, #16]
   return(result);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f023 0310 	bic.w	r3, r3, #16
 8004920:	627b      	str	r3, [r7, #36]	@ 0x24
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800492a:	623a      	str	r2, [r7, #32]
 800492c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	69f9      	ldr	r1, [r7, #28]
 8004930:	6a3a      	ldr	r2, [r7, #32]
 8004932:	e841 2300 	strex	r3, r2, [r1]
 8004936:	61bb      	str	r3, [r7, #24]
   return(result);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1e5      	bne.n	800490a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b10      	cmp	r3, #16
 800494a:	d10a      	bne.n	8004962 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004966:	4619      	mov	r1, r3
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7fb fe69 	bl	8000640 <HAL_UARTEx_RxEventCallback>
 800496e:	e002      	b.n	8004976 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff fc3a 	bl	80041ea <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e002      	b.n	8004980 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800497a:	2300      	movs	r3, #0
 800497c:	e000      	b.n	8004980 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800497e:	2302      	movs	r3, #2
  }
}
 8004980:	4618      	mov	r0, r3
 8004982:	3730      	adds	r7, #48	@ 0x30
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	430a      	orrs	r2, r1
 80049a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689a      	ldr	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80049c2:	f023 030c 	bic.w	r3, r3, #12
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	430b      	orrs	r3, r1
 80049ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2c      	ldr	r2, [pc, #176]	@ (8004a9c <UART_SetConfig+0x114>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d103      	bne.n	80049f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80049f0:	f7fe fc08 	bl	8003204 <HAL_RCC_GetPCLK2Freq>
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	e002      	b.n	80049fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80049f8:	f7fe fbf0 	bl	80031dc <HAL_RCC_GetPCLK1Freq>
 80049fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009a      	lsls	r2, r3, #2
 8004a08:	441a      	add	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a14:	4a22      	ldr	r2, [pc, #136]	@ (8004aa0 <UART_SetConfig+0x118>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	095b      	lsrs	r3, r3, #5
 8004a1c:	0119      	lsls	r1, r3, #4
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009a      	lsls	r2, r3, #2
 8004a28:	441a      	add	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a34:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa0 <UART_SetConfig+0x118>)
 8004a36:	fba3 0302 	umull	r0, r3, r3, r2
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	2064      	movs	r0, #100	@ 0x64
 8004a3e:	fb00 f303 	mul.w	r3, r0, r3
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	3332      	adds	r3, #50	@ 0x32
 8004a48:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <UART_SetConfig+0x118>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a54:	4419      	add	r1, r3
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	009a      	lsls	r2, r3, #2
 8004a60:	441a      	add	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <UART_SetConfig+0x118>)
 8004a6e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	2064      	movs	r0, #100	@ 0x64
 8004a76:	fb00 f303 	mul.w	r3, r0, r3
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	3332      	adds	r3, #50	@ 0x32
 8004a80:	4a07      	ldr	r2, [pc, #28]	@ (8004aa0 <UART_SetConfig+0x118>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	f003 020f 	and.w	r2, r3, #15
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	440a      	add	r2, r1
 8004a92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a94:	bf00      	nop
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40013800 	.word	0x40013800
 8004aa0:	51eb851f 	.word	0x51eb851f

08004aa4 <memset>:
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	4402      	add	r2, r0
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d100      	bne.n	8004aae <memset+0xa>
 8004aac:	4770      	bx	lr
 8004aae:	f803 1b01 	strb.w	r1, [r3], #1
 8004ab2:	e7f9      	b.n	8004aa8 <memset+0x4>

08004ab4 <__libc_init_array>:
 8004ab4:	b570      	push	{r4, r5, r6, lr}
 8004ab6:	2600      	movs	r6, #0
 8004ab8:	4d0c      	ldr	r5, [pc, #48]	@ (8004aec <__libc_init_array+0x38>)
 8004aba:	4c0d      	ldr	r4, [pc, #52]	@ (8004af0 <__libc_init_array+0x3c>)
 8004abc:	1b64      	subs	r4, r4, r5
 8004abe:	10a4      	asrs	r4, r4, #2
 8004ac0:	42a6      	cmp	r6, r4
 8004ac2:	d109      	bne.n	8004ad8 <__libc_init_array+0x24>
 8004ac4:	f000 f81a 	bl	8004afc <_init>
 8004ac8:	2600      	movs	r6, #0
 8004aca:	4d0a      	ldr	r5, [pc, #40]	@ (8004af4 <__libc_init_array+0x40>)
 8004acc:	4c0a      	ldr	r4, [pc, #40]	@ (8004af8 <__libc_init_array+0x44>)
 8004ace:	1b64      	subs	r4, r4, r5
 8004ad0:	10a4      	asrs	r4, r4, #2
 8004ad2:	42a6      	cmp	r6, r4
 8004ad4:	d105      	bne.n	8004ae2 <__libc_init_array+0x2e>
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004adc:	4798      	blx	r3
 8004ade:	3601      	adds	r6, #1
 8004ae0:	e7ee      	b.n	8004ac0 <__libc_init_array+0xc>
 8004ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae6:	4798      	blx	r3
 8004ae8:	3601      	adds	r6, #1
 8004aea:	e7f2      	b.n	8004ad2 <__libc_init_array+0x1e>
 8004aec:	08004b40 	.word	0x08004b40
 8004af0:	08004b40 	.word	0x08004b40
 8004af4:	08004b40 	.word	0x08004b40
 8004af8:	08004b44 	.word	0x08004b44

08004afc <_init>:
 8004afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afe:	bf00      	nop
 8004b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b02:	bc08      	pop	{r3}
 8004b04:	469e      	mov	lr, r3
 8004b06:	4770      	bx	lr

08004b08 <_fini>:
 8004b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b0a:	bf00      	nop
 8004b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b0e:	bc08      	pop	{r3}
 8004b10:	469e      	mov	lr, r3
 8004b12:	4770      	bx	lr
