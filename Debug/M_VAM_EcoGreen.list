
M_VAM_EcoGreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046ac  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080047b8  080047b8  000057b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047e4  080047e4  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080047e4  080047e4  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080047e4  080047e4  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047e4  080047e4  000057e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047e8  080047e8  000057e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080047ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  080047f8  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  080047f8  000061a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e668  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d1  00000000  00000000  0001469d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00016870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae2  00000000  00000000  00017660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001832d  00000000  00000000  00018142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f845  00000000  00000000  0003046f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d3fa  00000000  00000000  0003fcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd0ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a38  00000000  00000000  000cd0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000d0b2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080047a0 	.word	0x080047a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080047a0 	.word	0x080047a0

0800014c <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	460b      	mov	r3, r1
 8000158:	71bb      	strb	r3, [r7, #6]
 800015a:	4613      	mov	r3, r2
 800015c:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	b29a      	uxth	r2, r3
 8000162:	79bb      	ldrb	r3, [r7, #6]
 8000164:	b29b      	uxth	r3, r3
 8000166:	4413      	add	r3, r2
 8000168:	b29a      	uxth	r2, r3
 800016a:	797b      	ldrb	r3, [r7, #5]
 800016c:	b29b      	uxth	r3, r3
 800016e:	4413      	add	r3, r2
 8000170:	b29b      	uxth	r3, r3
 8000172:	f203 1305 	addw	r3, r3, #261	@ 0x105
 8000176:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 8000178:	8afb      	ldrh	r3, [r7, #22]
 800017a:	425b      	negs	r3, r3
 800017c:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 800017e:	237e      	movs	r3, #126	@ 0x7e
 8000180:	733b      	strb	r3, [r7, #12]
 8000182:	23ff      	movs	r3, #255	@ 0xff
 8000184:	737b      	strb	r3, [r7, #13]
 8000186:	2306      	movs	r3, #6
 8000188:	73bb      	strb	r3, [r7, #14]
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	73fb      	strb	r3, [r7, #15]
 800018e:	2300      	movs	r3, #0
 8000190:	743b      	strb	r3, [r7, #16]
 8000192:	79bb      	ldrb	r3, [r7, #6]
 8000194:	747b      	strb	r3, [r7, #17]
 8000196:	797b      	ldrb	r3, [r7, #5]
 8000198:	74bb      	strb	r3, [r7, #18]
 800019a:	8afb      	ldrh	r3, [r7, #22]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	b29b      	uxth	r3, r3
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	74fb      	strb	r3, [r7, #19]
 80001a4:	8afb      	ldrh	r3, [r7, #22]
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	753b      	strb	r3, [r7, #20]
 80001aa:	23ef      	movs	r3, #239	@ 0xef
 80001ac:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 80001ae:	f107 010c 	add.w	r1, r7, #12
 80001b2:	f04f 33ff 	mov.w	r3, #4294967295
 80001b6:	220a      	movs	r2, #10
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <Send_cmd+0x7c>)
 80001ba:	f003 fae9 	bl	8003790 <HAL_UART_Transmit>
}
 80001be:	bf00      	nop
 80001c0:	3718      	adds	r7, #24
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	200000a4 	.word	0x200000a4

080001cc <DF_Init>:
  HAL_Delay(200);
}


void DF_Init (uint8_t volume)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 80001d6:	2202      	movs	r2, #2
 80001d8:	2100      	movs	r1, #0
 80001da:	203f      	movs	r0, #63	@ 0x3f
 80001dc:	f7ff ffb6 	bl	800014c <Send_cmd>
	HAL_Delay(200);
 80001e0:	20c8      	movs	r0, #200	@ 0xc8
 80001e2:	f000 ff31 	bl	8001048 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	461a      	mov	r2, r3
 80001ea:	2100      	movs	r1, #0
 80001ec:	2006      	movs	r0, #6
 80001ee:	f7ff ffad 	bl	800014c <Send_cmd>
	HAL_Delay(500);
 80001f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001f6:	f000 ff27 	bl	8001048 <HAL_Delay>
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <DF_Play>:
		while (HAL_GPIO_ReadPin(Next_Port, Next_Key));
		DF_Next();
	}
}
void DF_Play(uint8_t data)
{
 8000202:	b580      	push	{r7, lr}
 8000204:	b082      	sub	sp, #8
 8000206:	af00      	add	r7, sp, #0
 8000208:	4603      	mov	r3, r0
 800020a:	71fb      	strb	r3, [r7, #7]
  Send_cmd(0x03,0x00,data);
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	461a      	mov	r2, r3
 8000210:	2100      	movs	r1, #0
 8000212:	2003      	movs	r0, #3
 8000214:	f7ff ff9a 	bl	800014c <Send_cmd>
  HAL_Delay(200);
 8000218:	20c8      	movs	r0, #200	@ 0xc8
 800021a:	f000 ff15 	bl	8001048 <HAL_Delay>
}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000230:	4b71      	ldr	r3, [pc, #452]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000232:	4a72      	ldr	r2, [pc, #456]	@ (80003fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000234:	2100      	movs	r1, #0
 8000236:	6878      	ldr	r0, [r7, #4]
 8000238:	f001 f932 	bl	80014a0 <HAL_CAN_GetRxMessage>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		HAL_NVIC_SystemReset();
 8000242:	f001 fdae 	bl	8001da2 <HAL_NVIC_SystemReset>
	}
	read_speed = true;
 8000246:	4b6e      	ldr	r3, [pc, #440]	@ (8000400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000248:	2201      	movs	r2, #1
 800024a:	701a      	strb	r2, [r3, #0]
	if (RxHeader.StdId == 0x501)
 800024c:	4b6b      	ldr	r3, [pc, #428]	@ (80003fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f240 5201 	movw	r2, #1281	@ 0x501
 8000254:	4293      	cmp	r3, r2
 8000256:	f040 80bd 	bne.w	80003d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>
	{
		if ((RxData[0]&0x04) == 0x04)
 800025a:	4b67      	ldr	r3, [pc, #412]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	f003 0304 	and.w	r3, r3, #4
 8000262:	2b00      	cmp	r3, #0
 8000264:	f000 80a0 	beq.w	80003a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>
		{
			if (RxData[2] == 0x07) // floor
 8000268:	4b63      	ldr	r3, [pc, #396]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800026a:	789b      	ldrb	r3, [r3, #2]
 800026c:	2b07      	cmp	r3, #7
 800026e:	d115      	bne.n	800029c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
			{
				speakFloor = true;
 8000270:	4b64      	ldr	r3, [pc, #400]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 8000272:	2201      	movs	r2, #1
 8000274:	701a      	strb	r2, [r3, #0]
				speakFire = false;
 8000276:	4b64      	ldr	r3, [pc, #400]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]
				speakOverLoad = false;
 800027c:	4b63      	ldr	r3, [pc, #396]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
				speakDoorOpen = false;
 8000282:	4b63      	ldr	r3, [pc, #396]	@ (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000284:	2200      	movs	r2, #0
 8000286:	701a      	strb	r2, [r3, #0]
				speakDoorClose = false;
 8000288:	4b62      	ldr	r3, [pc, #392]	@ (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 800028a:	2200      	movs	r2, #0
 800028c:	701a      	strb	r2, [r3, #0]
				speakDiriectionUp = false;
 800028e:	4b62      	ldr	r3, [pc, #392]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]
				speakDirectionDown = false;
 8000294:	4b61      	ldr	r3, [pc, #388]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
	} else if (RxHeader.StdId == 0x502)
	{
		oneFloor = RxData[2];
		tenFloor = RxData[1];
	}
}
 800029a:	e0a9      	b.n	80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			} else if (RxData[2] == 0x04) // door
 800029c:	4b56      	ldr	r3, [pc, #344]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800029e:	789b      	ldrb	r3, [r3, #2]
 80002a0:	2b04      	cmp	r3, #4
 80002a2:	d124      	bne.n	80002ee <HAL_CAN_RxFifo0MsgPendingCallback+0xc6>
				if (RxData[4] == 0x01)
 80002a4:	4b54      	ldr	r3, [pc, #336]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80002a6:	791b      	ldrb	r3, [r3, #4]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d106      	bne.n	80002ba <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
					speakDoorOpen = true;
 80002ac:	4b58      	ldr	r3, [pc, #352]	@ (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	701a      	strb	r2, [r3, #0]
					speakDoorClose = false;
 80002b2:	4b58      	ldr	r3, [pc, #352]	@ (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
 80002b8:	e009      	b.n	80002ce <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
				} else if (RxData[4] == 0x02)
 80002ba:	4b4f      	ldr	r3, [pc, #316]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80002bc:	791b      	ldrb	r3, [r3, #4]
 80002be:	2b02      	cmp	r3, #2
 80002c0:	d105      	bne.n	80002ce <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
					speakDoorOpen = false;
 80002c2:	4b53      	ldr	r3, [pc, #332]	@ (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	701a      	strb	r2, [r3, #0]
					speakDoorClose = true;
 80002c8:	4b52      	ldr	r3, [pc, #328]	@ (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	701a      	strb	r2, [r3, #0]
				speakFloor = false;
 80002ce:	4b4d      	ldr	r3, [pc, #308]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	701a      	strb	r2, [r3, #0]
				speakFire = false;
 80002d4:	4b4c      	ldr	r3, [pc, #304]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	701a      	strb	r2, [r3, #0]
				speakOverLoad = false;
 80002da:	4b4c      	ldr	r3, [pc, #304]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80002dc:	2200      	movs	r2, #0
 80002de:	701a      	strb	r2, [r3, #0]
				speakDiriectionUp = false;
 80002e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	701a      	strb	r2, [r3, #0]
				speakDirectionDown = false;
 80002e6:	4b4d      	ldr	r3, [pc, #308]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	701a      	strb	r2, [r3, #0]
}
 80002ec:	e080      	b.n	80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			}  else if (RxData[2] == 0x01) // fire
 80002ee:	4b42      	ldr	r3, [pc, #264]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80002f0:	789b      	ldrb	r3, [r3, #2]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d115      	bne.n	8000322 <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
				speakFloor = false;
 80002f6:	4b43      	ldr	r3, [pc, #268]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	701a      	strb	r2, [r3, #0]
				speakFire = true;
 80002fc:	4b42      	ldr	r3, [pc, #264]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 80002fe:	2201      	movs	r2, #1
 8000300:	701a      	strb	r2, [r3, #0]
				speakOverLoad = false;
 8000302:	4b42      	ldr	r3, [pc, #264]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000304:	2200      	movs	r2, #0
 8000306:	701a      	strb	r2, [r3, #0]
				speakDoorOpen = false;
 8000308:	4b41      	ldr	r3, [pc, #260]	@ (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
				speakDoorClose = false;
 800030e:	4b41      	ldr	r3, [pc, #260]	@ (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
				speakDiriectionUp = false;
 8000314:	4b40      	ldr	r3, [pc, #256]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000316:	2200      	movs	r2, #0
 8000318:	701a      	strb	r2, [r3, #0]
				speakDirectionDown = false;
 800031a:	4b40      	ldr	r3, [pc, #256]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800031c:	2200      	movs	r2, #0
 800031e:	701a      	strb	r2, [r3, #0]
}
 8000320:	e066      	b.n	80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			}  else if (RxData[2] == 0x05) // over load
 8000322:	4b35      	ldr	r3, [pc, #212]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000324:	789b      	ldrb	r3, [r3, #2]
 8000326:	2b05      	cmp	r3, #5
 8000328:	d115      	bne.n	8000356 <HAL_CAN_RxFifo0MsgPendingCallback+0x12e>
				speakFloor = false;
 800032a:	4b36      	ldr	r3, [pc, #216]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800032c:	2200      	movs	r2, #0
 800032e:	701a      	strb	r2, [r3, #0]
				speakFire = false;
 8000330:	4b35      	ldr	r3, [pc, #212]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000332:	2200      	movs	r2, #0
 8000334:	701a      	strb	r2, [r3, #0]
				speakOverLoad = true;
 8000336:	4b35      	ldr	r3, [pc, #212]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000338:	2201      	movs	r2, #1
 800033a:	701a      	strb	r2, [r3, #0]
				speakDoorOpen = false;
 800033c:	4b34      	ldr	r3, [pc, #208]	@ (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800033e:	2200      	movs	r2, #0
 8000340:	701a      	strb	r2, [r3, #0]
				speakDoorClose = false;
 8000342:	4b34      	ldr	r3, [pc, #208]	@ (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 8000344:	2200      	movs	r2, #0
 8000346:	701a      	strb	r2, [r3, #0]
				speakDiriectionUp = false;
 8000348:	4b33      	ldr	r3, [pc, #204]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
				speakDirectionDown = false;
 800034e:	4b33      	ldr	r3, [pc, #204]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000350:	2200      	movs	r2, #0
 8000352:	701a      	strb	r2, [r3, #0]
}
 8000354:	e04c      	b.n	80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			}  else if (RxData[2] == 0x0B) // direction
 8000356:	4b28      	ldr	r3, [pc, #160]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000358:	789b      	ldrb	r3, [r3, #2]
 800035a:	2b0b      	cmp	r3, #11
 800035c:	d148      	bne.n	80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
				if (RxData[3] == 0x01) // up
 800035e:	4b26      	ldr	r3, [pc, #152]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000360:	78db      	ldrb	r3, [r3, #3]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d106      	bne.n	8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>
					speakDiriectionUp = true;
 8000366:	4b2c      	ldr	r3, [pc, #176]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 8000368:	2201      	movs	r2, #1
 800036a:	701a      	strb	r2, [r3, #0]
					speakDirectionDown = false;
 800036c:	4b2b      	ldr	r3, [pc, #172]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 800036e:	2200      	movs	r2, #0
 8000370:	701a      	strb	r2, [r3, #0]
 8000372:	e009      	b.n	8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
				} else if (RxData[3] == 0x02) // down
 8000374:	4b20      	ldr	r3, [pc, #128]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 8000376:	78db      	ldrb	r3, [r3, #3]
 8000378:	2b02      	cmp	r3, #2
 800037a:	d105      	bne.n	8000388 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
					speakDiriectionUp = false;
 800037c:	4b26      	ldr	r3, [pc, #152]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
					speakDirectionDown = true;
 8000382:	4b26      	ldr	r3, [pc, #152]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 8000384:	2201      	movs	r2, #1
 8000386:	701a      	strb	r2, [r3, #0]
				speakFloor = false;
 8000388:	4b1e      	ldr	r3, [pc, #120]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800038a:	2200      	movs	r2, #0
 800038c:	701a      	strb	r2, [r3, #0]
				speakFire = false;
 800038e:	4b1e      	ldr	r3, [pc, #120]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000390:	2200      	movs	r2, #0
 8000392:	701a      	strb	r2, [r3, #0]
				speakOverLoad = false;
 8000394:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 8000396:	2200      	movs	r2, #0
 8000398:	701a      	strb	r2, [r3, #0]
				speakDoorOpen = false;
 800039a:	4b1d      	ldr	r3, [pc, #116]	@ (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800039c:	2200      	movs	r2, #0
 800039e:	701a      	strb	r2, [r3, #0]
				speakDoorClose = false;
 80003a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
}
 80003a6:	e023      	b.n	80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
			speakFloor = false;
 80003a8:	4b16      	ldr	r3, [pc, #88]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	701a      	strb	r2, [r3, #0]
			speakFire = false;
 80003ae:	4b16      	ldr	r3, [pc, #88]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
			speakOverLoad = false;
 80003b4:	4b15      	ldr	r3, [pc, #84]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	701a      	strb	r2, [r3, #0]
			speakDoorOpen = false;
 80003ba:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
			speakDoorClose = false;
 80003c0:	4b14      	ldr	r3, [pc, #80]	@ (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	701a      	strb	r2, [r3, #0]
			speakDiriectionUp = false;
 80003c6:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
			speakDirectionDown = false;
 80003cc:	4b13      	ldr	r3, [pc, #76]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]
}
 80003d2:	e00d      	b.n	80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
	} else if (RxHeader.StdId == 0x502)
 80003d4:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	f240 5202 	movw	r2, #1282	@ 0x502
 80003dc:	4293      	cmp	r3, r2
 80003de:	d107      	bne.n	80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>
		oneFloor = RxData[2];
 80003e0:	4b05      	ldr	r3, [pc, #20]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80003e2:	789a      	ldrb	r2, [r3, #2]
 80003e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80003e6:	701a      	strb	r2, [r3, #0]
		tenFloor = RxData[1];
 80003e8:	4b03      	ldr	r3, [pc, #12]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80003ea:	785a      	ldrb	r2, [r3, #1]
 80003ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80003ee:	701a      	strb	r2, [r3, #0]
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	2000014c 	.word	0x2000014c
 80003fc:	20000130 	.word	0x20000130
 8000400:	20000197 	.word	0x20000197
 8000404:	2000018a 	.word	0x2000018a
 8000408:	2000018f 	.word	0x2000018f
 800040c:	20000190 	.word	0x20000190
 8000410:	2000018b 	.word	0x2000018b
 8000414:	2000018c 	.word	0x2000018c
 8000418:	2000018d 	.word	0x2000018d
 800041c:	2000018e 	.word	0x2000018e
 8000420:	20000186 	.word	0x20000186
 8000424:	20000187 	.word	0x20000187

08000428 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	460b      	mov	r3, r1
 8000432:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == huart2.Instance)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b0a      	ldr	r3, [pc, #40]	@ (8000464 <HAL_UARTEx_RxEventCallback+0x3c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	429a      	cmp	r2, r3
 800043e:	d10c      	bne.n	800045a <HAL_UARTEx_RxEventCallback+0x32>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart_data, 50);
 8000440:	2232      	movs	r2, #50	@ 0x32
 8000442:	4909      	ldr	r1, [pc, #36]	@ (8000468 <HAL_UARTEx_RxEventCallback+0x40>)
 8000444:	4807      	ldr	r0, [pc, #28]	@ (8000464 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000446:	f003 fa2e 	bl	80038a6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800044a:	4b08      	ldr	r3, [pc, #32]	@ (800046c <HAL_UARTEx_RxEventCallback+0x44>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	4b06      	ldr	r3, [pc, #24]	@ (800046c <HAL_UARTEx_RxEventCallback+0x44>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	f022 0204 	bic.w	r2, r2, #4
 8000458:	601a      	str	r2, [r3, #0]
	}
}
 800045a:	bf00      	nop
 800045c:	3708      	adds	r7, #8
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	200000a4 	.word	0x200000a4
 8000468:	20000154 	.word	0x20000154
 800046c:	200000ec 	.word	0x200000ec

08000470 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	4b05      	ldr	r3, [pc, #20]	@ (8000494 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	429a      	cmp	r2, r3
 8000482:	d102      	bne.n	800048a <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8000484:	4804      	ldr	r0, [pc, #16]	@ (8000498 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000486:	f002 f91f 	bl	80026c8 <HAL_IWDG_Refresh>
	}
}
 800048a:	bf00      	nop
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	2000005c 	.word	0x2000005c
 8000498:	20000050 	.word	0x20000050

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	b089      	sub	sp, #36	@ 0x24
 80004a0:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a2:	f000 fd6f 	bl	8000f84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f96d 	bl	8000784 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_DBGMCU_FREEZE_IWDG();
 80004aa:	4b9d      	ldr	r3, [pc, #628]	@ (8000720 <main+0x284>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	4a9c      	ldr	r2, [pc, #624]	@ (8000720 <main+0x284>)
 80004b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004b4:	6053      	str	r3, [r2, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 fa95 	bl	80009e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ba:	f000 fa75 	bl	80009a8 <MX_DMA_Init>
  MX_CAN_Init();
 80004be:	f000 f9a9 	bl	8000814 <MX_CAN_Init>
  MX_USART2_UART_Init();
 80004c2:	f000 fa47 	bl	8000954 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004c6:	f000 f9f7 	bl	80008b8 <MX_TIM3_Init>
  MX_IWDG_Init();
 80004ca:	f000 f9db 	bl	8000884 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80004ce:	4895      	ldr	r0, [pc, #596]	@ (8000724 <main+0x288>)
 80004d0:	f002 fd6c 	bl	8002fac <HAL_TIM_Base_Start_IT>
  while (!detect_speed)
 80004d4:	e050      	b.n	8000578 <main+0xdc>
  {
	  if (!read_speed)
 80004d6:	4b94      	ldr	r3, [pc, #592]	@ (8000728 <main+0x28c>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	f083 0301 	eor.w	r3, r3, #1
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d032      	beq.n	800054a <main+0xae>
	  {
		  if (abs(HAL_GetTick() - timer) > 500)
 80004e4:	f000 fda6 	bl	8001034 <HAL_GetTick>
 80004e8:	4602      	mov	r2, r0
 80004ea:	4b90      	ldr	r3, [pc, #576]	@ (800072c <main+0x290>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	1ad3      	subs	r3, r2, r3
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	bfb8      	it	lt
 80004f4:	425b      	neglt	r3, r3
 80004f6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80004fa:	dd3d      	ble.n	8000578 <main+0xdc>
		  {
			  timer = HAL_GetTick();
 80004fc:	f000 fd9a 	bl	8001034 <HAL_GetTick>
 8000500:	4603      	mov	r3, r0
 8000502:	4a8a      	ldr	r2, [pc, #552]	@ (800072c <main+0x290>)
 8000504:	6013      	str	r3, [r2, #0]
			  speed ++;
 8000506:	4b8a      	ldr	r3, [pc, #552]	@ (8000730 <main+0x294>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	3301      	adds	r3, #1
 800050c:	b2da      	uxtb	r2, r3
 800050e:	4b88      	ldr	r3, [pc, #544]	@ (8000730 <main+0x294>)
 8000510:	701a      	strb	r2, [r3, #0]
			  if (speed > 3)
 8000512:	4b87      	ldr	r3, [pc, #540]	@ (8000730 <main+0x294>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b03      	cmp	r3, #3
 8000518:	d902      	bls.n	8000520 <main+0x84>
			  {
				  speed = 1;
 800051a:	4b85      	ldr	r3, [pc, #532]	@ (8000730 <main+0x294>)
 800051c:	2201      	movs	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
			  }
			  Set_speed_can(hcan, detect_speed, speed);
 8000520:	4b84      	ldr	r3, [pc, #528]	@ (8000734 <main+0x298>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	4a82      	ldr	r2, [pc, #520]	@ (8000730 <main+0x294>)
 8000526:	7812      	ldrb	r2, [r2, #0]
 8000528:	4e83      	ldr	r6, [pc, #524]	@ (8000738 <main+0x29c>)
 800052a:	9207      	str	r2, [sp, #28]
 800052c:	9306      	str	r3, [sp, #24]
 800052e:	466d      	mov	r5, sp
 8000530:	f106 0410 	add.w	r4, r6, #16
 8000534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000536:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000538:	e894 0003 	ldmia.w	r4, {r0, r1}
 800053c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000540:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000544:	f000 faca 	bl	8000adc <Set_speed_can>
 8000548:	e016      	b.n	8000578 <main+0xdc>
		  }
	  } else
	  {
		  detect_speed = true;
 800054a:	4b7a      	ldr	r3, [pc, #488]	@ (8000734 <main+0x298>)
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
		  Set_speed_can(hcan, detect_speed, speed);
 8000550:	4b78      	ldr	r3, [pc, #480]	@ (8000734 <main+0x298>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	4a76      	ldr	r2, [pc, #472]	@ (8000730 <main+0x294>)
 8000556:	7812      	ldrb	r2, [r2, #0]
 8000558:	4e77      	ldr	r6, [pc, #476]	@ (8000738 <main+0x29c>)
 800055a:	9207      	str	r2, [sp, #28]
 800055c:	9306      	str	r3, [sp, #24]
 800055e:	466d      	mov	r5, sp
 8000560:	f106 0410 	add.w	r4, r6, #16
 8000564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000568:	e894 0003 	ldmia.w	r4, {r0, r1}
 800056c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000570:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000574:	f000 fab2 	bl	8000adc <Set_speed_can>
  while (!detect_speed)
 8000578:	4b6e      	ldr	r3, [pc, #440]	@ (8000734 <main+0x298>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	f083 0301 	eor.w	r3, r3, #1
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d1a7      	bne.n	80004d6 <main+0x3a>
	  }
  }
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart_data, 50);
 8000586:	2232      	movs	r2, #50	@ 0x32
 8000588:	496c      	ldr	r1, [pc, #432]	@ (800073c <main+0x2a0>)
 800058a:	486d      	ldr	r0, [pc, #436]	@ (8000740 <main+0x2a4>)
 800058c:	f003 f98b 	bl	80038a6 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000590:	4b6c      	ldr	r3, [pc, #432]	@ (8000744 <main+0x2a8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	4b6b      	ldr	r3, [pc, #428]	@ (8000744 <main+0x2a8>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f022 0204 	bic.w	r2, r2, #4
 800059e:	601a      	str	r2, [r3, #0]
  DF_Init(30);
 80005a0:	201e      	movs	r0, #30
 80005a2:	f7ff fe13 	bl	80001cc <DF_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (speakFloor)
 80005a6:	4b68      	ldr	r3, [pc, #416]	@ (8000748 <main+0x2ac>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d022      	beq.n	80005f4 <main+0x158>
	  {
		  if (!isSpeakFloor)
 80005ae:	4b67      	ldr	r3, [pc, #412]	@ (800074c <main+0x2b0>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	f083 0301 	eor.w	r3, r3, #1
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d01e      	beq.n	80005fa <main+0x15e>
		  {
			  floorNow = speaker_floor_funtion(tenFloor, oneFloor);
 80005bc:	4b64      	ldr	r3, [pc, #400]	@ (8000750 <main+0x2b4>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	4a64      	ldr	r2, [pc, #400]	@ (8000754 <main+0x2b8>)
 80005c2:	7812      	ldrb	r2, [r2, #0]
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fa58 	bl	8000a7c <speaker_floor_funtion>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b61      	ldr	r3, [pc, #388]	@ (8000758 <main+0x2bc>)
 80005d2:	701a      	strb	r2, [r3, #0]
			  DF_Play(floorNow);
 80005d4:	4b60      	ldr	r3, [pc, #384]	@ (8000758 <main+0x2bc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff fe12 	bl	8000202 <DF_Play>
			  while (uart_data[6] != floorNow);
 80005de:	bf00      	nop
 80005e0:	4b56      	ldr	r3, [pc, #344]	@ (800073c <main+0x2a0>)
 80005e2:	799a      	ldrb	r2, [r3, #6]
 80005e4:	4b5c      	ldr	r3, [pc, #368]	@ (8000758 <main+0x2bc>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d1f9      	bne.n	80005e0 <main+0x144>
			  isSpeakFloor = true;
 80005ec:	4b57      	ldr	r3, [pc, #348]	@ (800074c <main+0x2b0>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	e002      	b.n	80005fa <main+0x15e>
		  }
	  } else
	  {
		  isSpeakFloor = false;
 80005f4:	4b55      	ldr	r3, [pc, #340]	@ (800074c <main+0x2b0>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]
	  }
	  if (speakDoorOpen) // door open
 80005fa:	4b58      	ldr	r3, [pc, #352]	@ (800075c <main+0x2c0>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d012      	beq.n	8000628 <main+0x18c>
	  {
		  if (!isSpeakDoorOpen)
 8000602:	4b57      	ldr	r3, [pc, #348]	@ (8000760 <main+0x2c4>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	f083 0301 	eor.w	r3, r3, #1
 800060a:	b2db      	uxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	d00e      	beq.n	800062e <main+0x192>
		  {
			  DF_Play(35);
 8000610:	2023      	movs	r0, #35	@ 0x23
 8000612:	f7ff fdf6 	bl	8000202 <DF_Play>
			  while (uart_data[6] != 35);
 8000616:	bf00      	nop
 8000618:	4b48      	ldr	r3, [pc, #288]	@ (800073c <main+0x2a0>)
 800061a:	799b      	ldrb	r3, [r3, #6]
 800061c:	2b23      	cmp	r3, #35	@ 0x23
 800061e:	d1fb      	bne.n	8000618 <main+0x17c>
			  isSpeakDoorOpen = true;
 8000620:	4b4f      	ldr	r3, [pc, #316]	@ (8000760 <main+0x2c4>)
 8000622:	2201      	movs	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	e002      	b.n	800062e <main+0x192>
		  }
	  } else
	  {
		  isSpeakDoorOpen = false;
 8000628:	4b4d      	ldr	r3, [pc, #308]	@ (8000760 <main+0x2c4>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	  }
	  if (speakDoorClose) // door close
 800062e:	4b4d      	ldr	r3, [pc, #308]	@ (8000764 <main+0x2c8>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d012      	beq.n	800065c <main+0x1c0>
	  {
		  if (!isSpeakDoorClose)
 8000636:	4b4c      	ldr	r3, [pc, #304]	@ (8000768 <main+0x2cc>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	f083 0301 	eor.w	r3, r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00e      	beq.n	8000662 <main+0x1c6>
		  {
			  DF_Play(36);
 8000644:	2024      	movs	r0, #36	@ 0x24
 8000646:	f7ff fddc 	bl	8000202 <DF_Play>
			  while (uart_data[6] != 36);
 800064a:	bf00      	nop
 800064c:	4b3b      	ldr	r3, [pc, #236]	@ (800073c <main+0x2a0>)
 800064e:	799b      	ldrb	r3, [r3, #6]
 8000650:	2b24      	cmp	r3, #36	@ 0x24
 8000652:	d1fb      	bne.n	800064c <main+0x1b0>
			  isSpeakDoorClose = true;
 8000654:	4b44      	ldr	r3, [pc, #272]	@ (8000768 <main+0x2cc>)
 8000656:	2201      	movs	r2, #1
 8000658:	701a      	strb	r2, [r3, #0]
 800065a:	e002      	b.n	8000662 <main+0x1c6>
		  }
	  } else
	  {
		  isSpeakDoorClose = false;
 800065c:	4b42      	ldr	r3, [pc, #264]	@ (8000768 <main+0x2cc>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
	  }
	  if (speakDiriectionUp) // direction up
 8000662:	4b42      	ldr	r3, [pc, #264]	@ (800076c <main+0x2d0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d012      	beq.n	8000690 <main+0x1f4>
	  {
		  if (!isSpeakDiriectionUp)
 800066a:	4b41      	ldr	r3, [pc, #260]	@ (8000770 <main+0x2d4>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	f083 0301 	eor.w	r3, r3, #1
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00e      	beq.n	8000696 <main+0x1fa>
		  {
			  DF_Play(37);
 8000678:	2025      	movs	r0, #37	@ 0x25
 800067a:	f7ff fdc2 	bl	8000202 <DF_Play>
			  while (uart_data[6] != 37);
 800067e:	bf00      	nop
 8000680:	4b2e      	ldr	r3, [pc, #184]	@ (800073c <main+0x2a0>)
 8000682:	799b      	ldrb	r3, [r3, #6]
 8000684:	2b25      	cmp	r3, #37	@ 0x25
 8000686:	d1fb      	bne.n	8000680 <main+0x1e4>
			  isSpeakDiriectionUp = true;
 8000688:	4b39      	ldr	r3, [pc, #228]	@ (8000770 <main+0x2d4>)
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
 800068e:	e002      	b.n	8000696 <main+0x1fa>
		  }
	  } else
	  {
		  isSpeakDiriectionUp = false;
 8000690:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <main+0x2d4>)
 8000692:	2200      	movs	r2, #0
 8000694:	701a      	strb	r2, [r3, #0]
	  }
	  if (speakDirectionDown) // direction dowwn
 8000696:	4b37      	ldr	r3, [pc, #220]	@ (8000774 <main+0x2d8>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d012      	beq.n	80006c4 <main+0x228>
	  {
		  if (!isSpeakDirectionDown)
 800069e:	4b36      	ldr	r3, [pc, #216]	@ (8000778 <main+0x2dc>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	f083 0301 	eor.w	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00e      	beq.n	80006ca <main+0x22e>
		  {
			  DF_Play(38);
 80006ac:	2026      	movs	r0, #38	@ 0x26
 80006ae:	f7ff fda8 	bl	8000202 <DF_Play>
			  while (uart_data[6] != 38);
 80006b2:	bf00      	nop
 80006b4:	4b21      	ldr	r3, [pc, #132]	@ (800073c <main+0x2a0>)
 80006b6:	799b      	ldrb	r3, [r3, #6]
 80006b8:	2b26      	cmp	r3, #38	@ 0x26
 80006ba:	d1fb      	bne.n	80006b4 <main+0x218>
			  isSpeakDirectionDown = true;
 80006bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000778 <main+0x2dc>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	e002      	b.n	80006ca <main+0x22e>
		  }
	  } else
	  {
		  isSpeakDirectionDown = false;
 80006c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000778 <main+0x2dc>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
	  }
	  if (speakFire) // fire
 80006ca:	4b2c      	ldr	r3, [pc, #176]	@ (800077c <main+0x2e0>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00e      	beq.n	80006f0 <main+0x254>
	  {
		  DF_Play(39);
 80006d2:	2027      	movs	r0, #39	@ 0x27
 80006d4:	f7ff fd95 	bl	8000202 <DF_Play>
		  while (uart_data[6] != 39);
 80006d8:	bf00      	nop
 80006da:	4b18      	ldr	r3, [pc, #96]	@ (800073c <main+0x2a0>)
 80006dc:	799b      	ldrb	r3, [r3, #6]
 80006de:	2b27      	cmp	r3, #39	@ 0x27
 80006e0:	d1fb      	bne.n	80006da <main+0x23e>
		  HAL_Delay(1000);
 80006e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006e6:	f000 fcaf 	bl	8001048 <HAL_Delay>
		  speakFire = false;
 80006ea:	4b24      	ldr	r3, [pc, #144]	@ (800077c <main+0x2e0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
	  }

	  if (speakOverLoad) // overload
 80006f0:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <main+0x2e4>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d00e      	beq.n	8000716 <main+0x27a>
	  {
		  DF_Play(40);
 80006f8:	2028      	movs	r0, #40	@ 0x28
 80006fa:	f7ff fd82 	bl	8000202 <DF_Play>
		  while (uart_data[6] != 40);
 80006fe:	bf00      	nop
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <main+0x2a0>)
 8000702:	799b      	ldrb	r3, [r3, #6]
 8000704:	2b28      	cmp	r3, #40	@ 0x28
 8000706:	d1fb      	bne.n	8000700 <main+0x264>
		  HAL_Delay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070c:	f000 fc9c 	bl	8001048 <HAL_Delay>
		  speakOverLoad = false;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <main+0x2e4>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(100);
 8000716:	2064      	movs	r0, #100	@ 0x64
 8000718:	f000 fc96 	bl	8001048 <HAL_Delay>
	  if (speakFloor)
 800071c:	e743      	b.n	80005a6 <main+0x10a>
 800071e:	bf00      	nop
 8000720:	e0042000 	.word	0xe0042000
 8000724:	2000005c 	.word	0x2000005c
 8000728:	20000197 	.word	0x20000197
 800072c:	20000198 	.word	0x20000198
 8000730:	20000189 	.word	0x20000189
 8000734:	20000196 	.word	0x20000196
 8000738:	20000028 	.word	0x20000028
 800073c:	20000154 	.word	0x20000154
 8000740:	200000a4 	.word	0x200000a4
 8000744:	200000ec 	.word	0x200000ec
 8000748:	2000018a 	.word	0x2000018a
 800074c:	20000191 	.word	0x20000191
 8000750:	20000187 	.word	0x20000187
 8000754:	20000186 	.word	0x20000186
 8000758:	20000188 	.word	0x20000188
 800075c:	2000018b 	.word	0x2000018b
 8000760:	20000192 	.word	0x20000192
 8000764:	2000018c 	.word	0x2000018c
 8000768:	20000193 	.word	0x20000193
 800076c:	2000018d 	.word	0x2000018d
 8000770:	20000194 	.word	0x20000194
 8000774:	2000018e 	.word	0x2000018e
 8000778:	20000195 	.word	0x20000195
 800077c:	2000018f 	.word	0x2000018f
 8000780:	20000190 	.word	0x20000190

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b090      	sub	sp, #64	@ 0x40
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	2228      	movs	r2, #40	@ 0x28
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f003 ffd8 	bl	8004748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007a6:	2309      	movs	r3, #9
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80007b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80007b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b6:	2301      	movs	r3, #1
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ba:	2301      	movs	r3, #1
 80007bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007be:	2302      	movs	r3, #2
 80007c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007c8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ce:	f107 0318 	add.w	r3, r7, #24
 80007d2:	4618      	mov	r0, r3
 80007d4:	f001 ff88 	bl	80026e8 <HAL_RCC_OscConfig>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007de:	f000 fa23 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e2:	230f      	movs	r3, #15
 80007e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e6:	2302      	movs	r3, #2
 80007e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2102      	movs	r1, #2
 80007fc:	4618      	mov	r0, r3
 80007fe:	f002 f9f5 	bl	8002bec <HAL_RCC_ClockConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000808:	f000 fa0e 	bl	8000c28 <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3740      	adds	r7, #64	@ 0x40
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000818:	4b18      	ldr	r3, [pc, #96]	@ (800087c <MX_CAN_Init+0x68>)
 800081a:	4a19      	ldr	r2, [pc, #100]	@ (8000880 <MX_CAN_Init+0x6c>)
 800081c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 36;
 800081e:	4b17      	ldr	r3, [pc, #92]	@ (800087c <MX_CAN_Init+0x68>)
 8000820:	2224      	movs	r2, #36	@ 0x24
 8000822:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <MX_CAN_Init+0x68>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800082a:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_CAN_Init+0x68>)
 800082c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000830:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_CAN_Init+0x68>)
 8000834:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000838:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 800083a:	4b10      	ldr	r3, [pc, #64]	@ (800087c <MX_CAN_Init+0x68>)
 800083c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000840:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_CAN_Init+0x68>)
 8000844:	2200      	movs	r2, #0
 8000846:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_CAN_Init+0x68>)
 800084a:	2201      	movs	r2, #1
 800084c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_CAN_Init+0x68>)
 8000850:	2200      	movs	r2, #0
 8000852:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000854:	4b09      	ldr	r3, [pc, #36]	@ (800087c <MX_CAN_Init+0x68>)
 8000856:	2201      	movs	r2, #1
 8000858:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <MX_CAN_Init+0x68>)
 800085c:	2200      	movs	r2, #0
 800085e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MX_CAN_Init+0x68>)
 8000862:	2200      	movs	r2, #0
 8000864:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_CAN_Init+0x68>)
 8000868:	f000 fc12 	bl	8001090 <HAL_CAN_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000872:	f000 f9d9 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20000028 	.word	0x20000028
 8000880:	40006400 	.word	0x40006400

08000884 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_IWDG_Init+0x2c>)
 800088a:	4a0a      	ldr	r2, [pc, #40]	@ (80008b4 <MX_IWDG_Init+0x30>)
 800088c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_IWDG_Init+0x2c>)
 8000890:	2204      	movs	r2, #4
 8000892:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_IWDG_Init+0x2c>)
 8000896:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800089a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <MX_IWDG_Init+0x2c>)
 800089e:	f001 fecf 	bl	8002640 <HAL_IWDG_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80008a8:	f000 f9be 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000050 	.word	0x20000050
 80008b4:	40003000 	.word	0x40003000

080008b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <MX_TIM3_Init+0x94>)
 80008d6:	4a1e      	ldr	r2, [pc, #120]	@ (8000950 <MX_TIM3_Init+0x98>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 80008da:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <MX_TIM3_Init+0x94>)
 80008dc:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80008e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b1a      	ldr	r3, [pc, #104]	@ (800094c <MX_TIM3_Init+0x94>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80008e8:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_TIM3_Init+0x94>)
 80008ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_TIM3_Init+0x94>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_TIM3_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008fc:	4813      	ldr	r0, [pc, #76]	@ (800094c <MX_TIM3_Init+0x94>)
 80008fe:	f002 fb05 	bl	8002f0c <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000908:	f000 f98e 	bl	8000c28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000910:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000912:	f107 0308 	add.w	r3, r7, #8
 8000916:	4619      	mov	r1, r3
 8000918:	480c      	ldr	r0, [pc, #48]	@ (800094c <MX_TIM3_Init+0x94>)
 800091a:	f002 fc89 	bl	8003230 <HAL_TIM_ConfigClockSource>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000924:	f000 f980 	bl	8000c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_TIM3_Init+0x94>)
 8000936:	f002 fe6b 	bl	8003610 <HAL_TIMEx_MasterConfigSynchronization>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000940:	f000 f972 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000005c 	.word	0x2000005c
 8000950:	40000400 	.word	0x40000400

08000954 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000958:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800095a:	4a12      	ldr	r2, [pc, #72]	@ (80009a4 <MX_USART2_UART_Init+0x50>)
 800095c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800095e:	4b10      	ldr	r3, [pc, #64]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000960:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000964:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	@ (80009a0 <MX_USART2_UART_Init+0x4c>)
 800098c:	f002 feb0 	bl	80036f0 <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000996:	f000 f947 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200000a4 	.word	0x200000a4
 80009a4:	40004400 	.word	0x40004400

080009a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_DMA_Init+0x38>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	4a0b      	ldr	r2, [pc, #44]	@ (80009e0 <MX_DMA_Init+0x38>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6153      	str	r3, [r2, #20]
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_DMA_Init+0x38>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2010      	movs	r0, #16
 80009cc:	f001 f9bf 	bl	8001d4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80009d0:	2010      	movs	r0, #16
 80009d2:	f001 f9d8 	bl	8001d86 <HAL_NVIC_EnableIRQ>

}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a74 <MX_GPIO_Init+0x90>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a74 <MX_GPIO_Init+0x90>)
 80009fe:	f043 0320 	orr.w	r3, r3, #32
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <MX_GPIO_Init+0x90>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0320 	and.w	r3, r3, #32
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <MX_GPIO_Init+0x90>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a17      	ldr	r2, [pc, #92]	@ (8000a74 <MX_GPIO_Init+0x90>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <MX_GPIO_Init+0x90>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a28:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <MX_GPIO_Init+0x90>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a11      	ldr	r2, [pc, #68]	@ (8000a74 <MX_GPIO_Init+0x90>)
 8000a2e:	f043 0308 	orr.w	r3, r3, #8
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b0f      	ldr	r3, [pc, #60]	@ (8000a74 <MX_GPIO_Init+0x90>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S_CAN_GPIO_Port, S_CAN_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a46:	480c      	ldr	r0, [pc, #48]	@ (8000a78 <MX_GPIO_Init+0x94>)
 8000a48:	f001 fde2 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : S_CAN_Pin */
  GPIO_InitStruct.Pin = S_CAN_Pin;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S_CAN_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	4804      	ldr	r0, [pc, #16]	@ (8000a78 <MX_GPIO_Init+0x94>)
 8000a66:	f001 fc4f 	bl	8002308 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3720      	adds	r7, #32
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010c00 	.word	0x40010c00

08000a7c <speaker_floor_funtion>:

/* USER CODE BEGIN 4 */

uint8_t speaker_floor_funtion(uint8_t tenFloor,uint8_t oneFloor)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	460a      	mov	r2, r1
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	4613      	mov	r3, r2
 8000a8a:	71bb      	strb	r3, [r7, #6]
	uint8_t floor;
	if (tenFloor == 0x48) // H
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	2b48      	cmp	r3, #72	@ 0x48
 8000a90:	d10b      	bne.n	8000aaa <speaker_floor_funtion+0x2e>
	{
		if (oneFloor == 0x31)
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	2b31      	cmp	r3, #49	@ 0x31
 8000a96:	d102      	bne.n	8000a9e <speaker_floor_funtion+0x22>
		{
			floor = 33;
 8000a98:	2321      	movs	r3, #33	@ 0x21
 8000a9a:	73fb      	strb	r3, [r7, #15]
 8000a9c:	e017      	b.n	8000ace <speaker_floor_funtion+0x52>
		} else if (oneFloor == 0x32)
 8000a9e:	79bb      	ldrb	r3, [r7, #6]
 8000aa0:	2b32      	cmp	r3, #50	@ 0x32
 8000aa2:	d114      	bne.n	8000ace <speaker_floor_funtion+0x52>
		{
			floor = 34;
 8000aa4:	2322      	movs	r3, #34	@ 0x22
 8000aa6:	73fb      	strb	r3, [r7, #15]
 8000aa8:	e011      	b.n	8000ace <speaker_floor_funtion+0x52>
		}
	} else if (tenFloor == 0x20)
 8000aaa:	79fb      	ldrb	r3, [r7, #7]
 8000aac:	2b20      	cmp	r3, #32
 8000aae:	d103      	bne.n	8000ab8 <speaker_floor_funtion+0x3c>
	{
		floor = oneFloor - 0x30;
 8000ab0:	79bb      	ldrb	r3, [r7, #6]
 8000ab2:	3b30      	subs	r3, #48	@ 0x30
 8000ab4:	73fb      	strb	r3, [r7, #15]
 8000ab6:	e00a      	b.n	8000ace <speaker_floor_funtion+0x52>
	} else
	{
		floor = (tenFloor - 0x30)*10 + (oneFloor - 0x30);
 8000ab8:	79fb      	ldrb	r3, [r7, #7]
 8000aba:	461a      	mov	r2, r3
 8000abc:	0092      	lsls	r2, r2, #2
 8000abe:	4413      	add	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	3b10      	subs	r3, #16
 8000acc:	73fb      	strb	r3, [r7, #15]
	}
	return floor;
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
	...

08000adc <Set_speed_can>:
void Set_speed_can(CAN_HandleTypeDef hcan, bool detect_speed, uint8_t speed)
{
 8000adc:	b084      	sub	sp, #16
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b08a      	sub	sp, #40	@ 0x28
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 8000ae8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hcan.Init.Mode = CAN_MODE_SILENT;
 8000aec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000af0:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (speed == 1)
 8000af2:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d108      	bne.n	8000b0c <Set_speed_can+0x30>
	{
		hcan.Init.Prescaler = 30;
 8000afa:	231e      	movs	r3, #30
 8000afc:	637b      	str	r3, [r7, #52]	@ 0x34
		hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000afe:	f44f 23e0 	mov.w	r3, #458752	@ 0x70000
 8000b02:	643b      	str	r3, [r7, #64]	@ 0x40
		hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000b04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000b08:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b0a:	e018      	b.n	8000b3e <Set_speed_can+0x62>
	} else if (speed == 2)
 8000b0c:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000b10:	2b02      	cmp	r3, #2
 8000b12:	d108      	bne.n	8000b26 <Set_speed_can+0x4a>
	{
		hcan.Init.Prescaler = 40;
 8000b14:	2328      	movs	r3, #40	@ 0x28
 8000b16:	637b      	str	r3, [r7, #52]	@ 0x34
		hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000b18:	f44f 2330 	mov.w	r3, #720896	@ 0xb0000
 8000b1c:	643b      	str	r3, [r7, #64]	@ 0x40
		hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000b1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b24:	e00b      	b.n	8000b3e <Set_speed_can+0x62>
	} else if (speed == 3)
 8000b26:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000b2a:	2b03      	cmp	r3, #3
 8000b2c:	d107      	bne.n	8000b3e <Set_speed_can+0x62>
	{
		hcan.Init.Prescaler = 60;//80
 8000b2e:	233c      	movs	r3, #60	@ 0x3c
 8000b30:	637b      	str	r3, [r7, #52]	@ 0x34
		hcan.Init.TimeSeg1 = CAN_BS1_16TQ;//15
 8000b32:	f44f 2370 	mov.w	r3, #983040	@ 0xf0000
 8000b36:	643b      	str	r3, [r7, #64]	@ 0x40
		hcan.Init.TimeSeg2 = CAN_BS2_7TQ;//2
 8000b38:	f44f 03c0 	mov.w	r3, #6291456	@ 0x600000
 8000b3c:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	hcan.Init.AutoRetransmission = ENABLE;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8000b44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b48:	63fb      	str	r3, [r7, #60]	@ 0x3c
	hcan.Init.AutoBusOff = ENABLE;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

	HAL_CAN_Init(&hcan);
 8000b50:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000b54:	f000 fa9c 	bl	8001090 <HAL_CAN_Init>
	if (detect_speed)
 8000b58:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d036      	beq.n	8000bce <Set_speed_can+0xf2>
	{
		CAN_FilterTypeDef canfilterconfig;
		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0x501<<5;
 8000b6c:	f24a 0320 	movw	r3, #40992	@ 0xa020
 8000b70:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 8000b76:	4b2b      	ldr	r3, [pc, #172]	@ (8000c24 <Set_speed_can+0x148>)
 8000b78:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
		canfilterconfig.SlaveStartFilterBank = 14;
 8000b86:	230e      	movs	r3, #14
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000b92:	f000 fb78 	bl	8001286 <HAL_CAN_ConfigFilter>
		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b96:	2301      	movs	r3, #1
 8000b98:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0x502<<5;
 8000ba2:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8000ba6:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <Set_speed_can+0x148>)
 8000bae:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	61fb      	str	r3, [r7, #28]
		canfilterconfig.SlaveStartFilterBank = 14;
 8000bbc:	230e      	movs	r3, #14
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000bc0:	463b      	mov	r3, r7
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000bc8:	f000 fb5d 	bl	8001286 <HAL_CAN_ConfigFilter>
 8000bcc:	e019      	b.n	8000c02 <Set_speed_can+0x126>
	} else
	{
		CAN_FilterTypeDef canfilterconfig;
		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0<<5;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0<<5;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61fb      	str	r3, [r7, #28]
		canfilterconfig.SlaveStartFilterBank = 14;
 8000bf2:	230e      	movs	r3, #14
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000bf6:	463b      	mov	r3, r7
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000bfe:	f000 fb42 	bl	8001286 <HAL_CAN_ConfigFilter>
	}
	HAL_CAN_Start(&hcan);
 8000c02:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000c06:	f000 fc07 	bl	8001418 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000c10:	f000 fd67 	bl	80016e2 <HAL_CAN_ActivateNotification>
}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	@ 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c1e:	b004      	add	sp, #16
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	0001ffe0 	.word	0x0001ffe0

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a14      	ldr	r2, [pc, #80]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	4b0f      	ldr	r3, [pc, #60]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	4a0e      	ldr	r2, [pc, #56]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c5c:	61d3      	str	r3, [r2, #28]
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <HAL_MspInit+0x5c>)
 8000c60:	69db      	ldr	r3, [r3, #28]
 8000c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <HAL_MspInit+0x60>)
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_MspInit+0x60>)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40010000 	.word	0x40010000

08000c98 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b088      	sub	sp, #32
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a20      	ldr	r2, [pc, #128]	@ (8000d34 <HAL_CAN_MspInit+0x9c>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d139      	bne.n	8000d2c <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d38 <HAL_CAN_MspInit+0xa0>)
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8000d38 <HAL_CAN_MspInit+0xa0>)
 8000cbe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cc2:	61d3      	str	r3, [r2, #28]
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <HAL_CAN_MspInit+0xa0>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b19      	ldr	r3, [pc, #100]	@ (8000d38 <HAL_CAN_MspInit+0xa0>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a18      	ldr	r2, [pc, #96]	@ (8000d38 <HAL_CAN_MspInit+0xa0>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <HAL_CAN_MspInit+0xa0>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ce8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 0310 	add.w	r3, r7, #16
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	480f      	ldr	r0, [pc, #60]	@ (8000d3c <HAL_CAN_MspInit+0xa4>)
 8000cfe:	f001 fb03 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	4619      	mov	r1, r3
 8000d16:	4809      	ldr	r0, [pc, #36]	@ (8000d3c <HAL_CAN_MspInit+0xa4>)
 8000d18:	f001 faf6 	bl	8002308 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2101      	movs	r1, #1
 8000d20:	2014      	movs	r0, #20
 8000d22:	f001 f814 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000d26:	2014      	movs	r0, #20
 8000d28:	f001 f82d 	bl	8001d86 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40006400 	.word	0x40006400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	40010800 	.word	0x40010800

08000d40 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d84 <HAL_TIM_Base_MspInit+0x44>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d113      	bne.n	8000d7a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <HAL_TIM_Base_MspInit+0x48>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a0c      	ldr	r2, [pc, #48]	@ (8000d88 <HAL_TIM_Base_MspInit+0x48>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_TIM_Base_MspInit+0x48>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2103      	movs	r1, #3
 8000d6e:	201d      	movs	r0, #29
 8000d70:	f000 ffed 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d74:	201d      	movs	r0, #29
 8000d76:	f001 f806 	bl	8001d86 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40000400 	.word	0x40000400
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a32      	ldr	r2, [pc, #200]	@ (8000e70 <HAL_UART_MspInit+0xe4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d15d      	bne.n	8000e68 <HAL_UART_MspInit+0xdc>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dac:	4b31      	ldr	r3, [pc, #196]	@ (8000e74 <HAL_UART_MspInit+0xe8>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	4a30      	ldr	r2, [pc, #192]	@ (8000e74 <HAL_UART_MspInit+0xe8>)
 8000db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db6:	61d3      	str	r3, [r2, #28]
 8000db8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e74 <HAL_UART_MspInit+0xe8>)
 8000dba:	69db      	ldr	r3, [r3, #28]
 8000dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <HAL_UART_MspInit+0xe8>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8000e74 <HAL_UART_MspInit+0xe8>)
 8000dca:	f043 0304 	orr.w	r3, r3, #4
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <HAL_UART_MspInit+0xe8>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0304 	and.w	r3, r3, #4
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de0:	2302      	movs	r3, #2
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	4619      	mov	r1, r3
 8000dee:	4822      	ldr	r0, [pc, #136]	@ (8000e78 <HAL_UART_MspInit+0xec>)
 8000df0:	f001 fa8a 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000df4:	2308      	movs	r3, #8
 8000df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	481c      	ldr	r0, [pc, #112]	@ (8000e78 <HAL_UART_MspInit+0xec>)
 8000e08:	f001 fa7e 	bl	8002308 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <HAL_UART_MspInit+0xf0>)
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e80 <HAL_UART_MspInit+0xf4>)
 8000e10:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <HAL_UART_MspInit+0xf0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <HAL_UART_MspInit+0xf0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <HAL_UART_MspInit+0xf0>)
 8000e20:	2280      	movs	r2, #128	@ 0x80
 8000e22:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <HAL_UART_MspInit+0xf0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	@ (8000e7c <HAL_UART_MspInit+0xf0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e30:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <HAL_UART_MspInit+0xf0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e36:	4b11      	ldr	r3, [pc, #68]	@ (8000e7c <HAL_UART_MspInit+0xf0>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e3c:	480f      	ldr	r0, [pc, #60]	@ (8000e7c <HAL_UART_MspInit+0xf0>)
 8000e3e:	f000 ffc1 	bl	8001dc4 <HAL_DMA_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000e48:	f7ff feee 	bl	8000c28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e7c <HAL_UART_MspInit+0xf0>)
 8000e50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e52:	4a0a      	ldr	r2, [pc, #40]	@ (8000e7c <HAL_UART_MspInit+0xf0>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2102      	movs	r1, #2
 8000e5c:	2026      	movs	r0, #38	@ 0x26
 8000e5e:	f000 ff76 	bl	8001d4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e62:	2026      	movs	r0, #38	@ 0x26
 8000e64:	f000 ff8f 	bl	8001d86 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e68:	bf00      	nop
 8000e6a:	3720      	adds	r7, #32
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40004400 	.word	0x40004400
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	200000ec 	.word	0x200000ec
 8000e80:	4002006c 	.word	0x4002006c

08000e84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e88:	bf00      	nop
 8000e8a:	e7fd      	b.n	8000e88 <NMI_Handler+0x4>

08000e8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e90:	bf00      	nop
 8000e92:	e7fd      	b.n	8000e90 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	bf00      	nop
 8000e9a:	e7fd      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed4:	f000 f89c 	bl	8001010 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	bd80      	pop	{r7, pc}

08000edc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ee0:	4802      	ldr	r0, [pc, #8]	@ (8000eec <DMA1_Channel6_IRQHandler+0x10>)
 8000ee2:	f001 f8dd 	bl	80020a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000ec 	.word	0x200000ec

08000ef0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ef6:	f000 fc19 	bl	800172c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000028 	.word	0x20000028

08000f04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f08:	4802      	ldr	r0, [pc, #8]	@ (8000f14 <TIM3_IRQHandler+0x10>)
 8000f0a:	f002 f8a1 	bl	8003050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000005c 	.word	0x2000005c

08000f18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <USART2_IRQHandler+0x10>)
 8000f1e:	f002 fd1b 	bl	8003958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	200000a4 	.word	0x200000a4

08000f2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr

08000f38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f38:	f7ff fff8 	bl	8000f2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f3c:	480b      	ldr	r0, [pc, #44]	@ (8000f6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f3e:	490c      	ldr	r1, [pc, #48]	@ (8000f70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f40:	4a0c      	ldr	r2, [pc, #48]	@ (8000f74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f44:	e002      	b.n	8000f4c <LoopCopyDataInit>

08000f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f4a:	3304      	adds	r3, #4

08000f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f50:	d3f9      	bcc.n	8000f46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f52:	4a09      	ldr	r2, [pc, #36]	@ (8000f78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f54:	4c09      	ldr	r4, [pc, #36]	@ (8000f7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f58:	e001      	b.n	8000f5e <LoopFillZerobss>

08000f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f5c:	3204      	adds	r2, #4

08000f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f60:	d3fb      	bcc.n	8000f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f62:	f003 fbf9 	bl	8004758 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f66:	f7ff fa99 	bl	800049c <main>
  bx lr
 8000f6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f74:	080047ec 	.word	0x080047ec
  ldr r2, =_sbss
 8000f78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f7c:	200001a0 	.word	0x200001a0

08000f80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f80:	e7fe      	b.n	8000f80 <ADC1_2_IRQHandler>
	...

08000f84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_Init+0x28>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a07      	ldr	r2, [pc, #28]	@ (8000fac <HAL_Init+0x28>)
 8000f8e:	f043 0310 	orr.w	r3, r3, #16
 8000f92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f94:	2003      	movs	r0, #3
 8000f96:	f000 fecf 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f000 f808 	bl	8000fb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa0:	f7ff fe48 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40022000 	.word	0x40022000

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <HAL_InitTick+0x54>)
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_InitTick+0x58>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 feeb 	bl	8001daa <HAL_SYSTICK_Config>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00e      	b.n	8000ffc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d80a      	bhi.n	8000ffa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f000 feaf 	bl	8001d4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff0:	4a06      	ldr	r2, [pc, #24]	@ (800100c <HAL_InitTick+0x5c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e000      	b.n	8000ffc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000000 	.word	0x20000000
 8001008:	20000008 	.word	0x20000008
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001014:	4b05      	ldr	r3, [pc, #20]	@ (800102c <HAL_IncTick+0x1c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	4b05      	ldr	r3, [pc, #20]	@ (8001030 <HAL_IncTick+0x20>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a03      	ldr	r2, [pc, #12]	@ (8001030 <HAL_IncTick+0x20>)
 8001022:	6013      	str	r3, [r2, #0]
}
 8001024:	bf00      	nop
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	20000008 	.word	0x20000008
 8001030:	2000019c 	.word	0x2000019c

08001034 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b02      	ldr	r3, [pc, #8]	@ (8001044 <HAL_GetTick+0x10>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	2000019c 	.word	0x2000019c

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff fff0 	bl	8001034 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_Delay+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffe0 	bl	8001034 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000008 	.word	0x20000008

08001090 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e0ed      	b.n	800127e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fdf2 	bl	8000c98 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f042 0201 	orr.w	r2, r2, #1
 80010c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c4:	f7ff ffb6 	bl	8001034 <HAL_GetTick>
 80010c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ca:	e012      	b.n	80010f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010cc:	f7ff ffb2 	bl	8001034 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b0a      	cmp	r3, #10
 80010d8:	d90b      	bls.n	80010f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2205      	movs	r2, #5
 80010ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e0c5      	b.n	800127e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0e5      	beq.n	80010cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f022 0202 	bic.w	r2, r2, #2
 800110e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001110:	f7ff ff90 	bl	8001034 <HAL_GetTick>
 8001114:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001116:	e012      	b.n	800113e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001118:	f7ff ff8c 	bl	8001034 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b0a      	cmp	r3, #10
 8001124:	d90b      	bls.n	800113e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2205      	movs	r2, #5
 8001136:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e09f      	b.n	800127e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e5      	bne.n	8001118 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7e1b      	ldrb	r3, [r3, #24]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d108      	bne.n	8001166 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	e007      	b.n	8001176 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001174:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7e5b      	ldrb	r3, [r3, #25]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d108      	bne.n	8001190 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e007      	b.n	80011a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800119e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7e9b      	ldrb	r3, [r3, #26]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d108      	bne.n	80011ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f042 0220 	orr.w	r2, r2, #32
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e007      	b.n	80011ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0220 	bic.w	r2, r2, #32
 80011c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	7edb      	ldrb	r3, [r3, #27]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d108      	bne.n	80011e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0210 	bic.w	r2, r2, #16
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0210 	orr.w	r2, r2, #16
 80011f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7f1b      	ldrb	r3, [r3, #28]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d108      	bne.n	800120e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0208 	orr.w	r2, r2, #8
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e007      	b.n	800121e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0208 	bic.w	r2, r2, #8
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7f5b      	ldrb	r3, [r3, #29]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d108      	bne.n	8001238 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 0204 	orr.w	r2, r2, #4
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e007      	b.n	8001248 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0204 	bic.w	r2, r2, #4
 8001246:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	ea42 0103 	orr.w	r1, r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	1e5a      	subs	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001286:	b480      	push	{r7}
 8001288:	b087      	sub	sp, #28
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800129e:	7cfb      	ldrb	r3, [r7, #19]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d003      	beq.n	80012ac <HAL_CAN_ConfigFilter+0x26>
 80012a4:	7cfb      	ldrb	r3, [r7, #19]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	f040 80aa 	bne.w	8001400 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012b2:	f043 0201 	orr.w	r2, r3, #1
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	695b      	ldr	r3, [r3, #20]
 80012c0:	f003 031f 	and.w	r3, r3, #31
 80012c4:	2201      	movs	r2, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d123      	bne.n	800132e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	43db      	mvns	r3, r3
 80012f0:	401a      	ands	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001308:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	3248      	adds	r2, #72	@ 0x48
 800130e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001322:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001324:	6979      	ldr	r1, [r7, #20]
 8001326:	3348      	adds	r3, #72	@ 0x48
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	440b      	add	r3, r1
 800132c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d122      	bne.n	800137c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	431a      	orrs	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001356:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3248      	adds	r2, #72	@ 0x48
 800135c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001370:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001372:	6979      	ldr	r1, [r7, #20]
 8001374:	3348      	adds	r3, #72	@ 0x48
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d109      	bne.n	8001398 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43db      	mvns	r3, r3
 800138e:	401a      	ands	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001396:	e007      	b.n	80013a8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d109      	bne.n	80013c4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80013c2:	e007      	b.n	80013d4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	431a      	orrs	r2, r3
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d107      	bne.n	80013ec <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013f2:	f023 0201 	bic.w	r2, r3, #1
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e006      	b.n	800140e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001404:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
  }
}
 800140e:	4618      	mov	r0, r3
 8001410:	371c      	adds	r7, #28
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b01      	cmp	r3, #1
 800142a:	d12e      	bne.n	800148a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2202      	movs	r2, #2
 8001430:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0201 	bic.w	r2, r2, #1
 8001442:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001444:	f7ff fdf6 	bl	8001034 <HAL_GetTick>
 8001448:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800144a:	e012      	b.n	8001472 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800144c:	f7ff fdf2 	bl	8001034 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b0a      	cmp	r3, #10
 8001458:	d90b      	bls.n	8001472 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2205      	movs	r2, #5
 800146a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e012      	b.n	8001498 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1e5      	bne.n	800144c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e006      	b.n	8001498 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800148e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
  }
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d003      	beq.n	80014c4 <HAL_CAN_GetRxMessage+0x24>
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	f040 8103 	bne.w	80016ca <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10e      	bne.n	80014e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d116      	bne.n	8001506 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0f7      	b.n	80016d8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d107      	bne.n	8001506 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e0e8      	b.n	80016d8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	331b      	adds	r3, #27
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4413      	add	r3, r2
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0204 	and.w	r2, r3, #4
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10c      	bne.n	800153e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	331b      	adds	r3, #27
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	4413      	add	r3, r2
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	0d5b      	lsrs	r3, r3, #21
 8001534:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	e00b      	b.n	8001556 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	331b      	adds	r3, #27
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	4413      	add	r3, r2
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	08db      	lsrs	r3, r3, #3
 800154e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	331b      	adds	r3, #27
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	4413      	add	r3, r2
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0202 	and.w	r2, r3, #2
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	331b      	adds	r3, #27
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	4413      	add	r3, r2
 8001578:	3304      	adds	r3, #4
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2208      	movs	r2, #8
 8001588:	611a      	str	r2, [r3, #16]
 800158a:	e00b      	b.n	80015a4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	331b      	adds	r3, #27
 8001594:	011b      	lsls	r3, r3, #4
 8001596:	4413      	add	r3, r2
 8001598:	3304      	adds	r3, #4
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 020f 	and.w	r2, r3, #15
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	331b      	adds	r3, #27
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	4413      	add	r3, r2
 80015b0:	3304      	adds	r3, #4
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	331b      	adds	r3, #27
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	4413      	add	r3, r2
 80015c8:	3304      	adds	r3, #4
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	0c1b      	lsrs	r3, r3, #16
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4413      	add	r3, r2
 80015de:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	4413      	add	r3, r2
 80015f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	0a1a      	lsrs	r2, r3, #8
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	011b      	lsls	r3, r3, #4
 800160c:	4413      	add	r3, r2
 800160e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0c1a      	lsrs	r2, r3, #16
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	3302      	adds	r3, #2
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	4413      	add	r3, r2
 8001628:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	0e1a      	lsrs	r2, r3, #24
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	3303      	adds	r3, #3
 8001634:	b2d2      	uxtb	r2, r2
 8001636:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	4413      	add	r3, r2
 8001642:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	3304      	adds	r3, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4413      	add	r3, r2
 800165a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	0a1a      	lsrs	r2, r3, #8
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	3305      	adds	r3, #5
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	011b      	lsls	r3, r3, #4
 8001672:	4413      	add	r3, r2
 8001674:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	0c1a      	lsrs	r2, r3, #16
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	3306      	adds	r3, #6
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4413      	add	r3, r2
 800168e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	0e1a      	lsrs	r2, r3, #24
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	3307      	adds	r3, #7
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d108      	bne.n	80016b6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f042 0220 	orr.w	r2, r2, #32
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	e007      	b.n	80016c6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0220 	orr.w	r2, r2, #32
 80016c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e006      	b.n	80016d8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
  }
}
 80016d8:	4618      	mov	r0, r3
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b085      	sub	sp, #20
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d002      	beq.n	8001700 <HAL_CAN_ActivateNotification+0x1e>
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d109      	bne.n	8001714 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6959      	ldr	r1, [r3, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	e006      	b.n	8001722 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
  }
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	d07c      	beq.n	800186c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d023      	beq.n	80017c4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2201      	movs	r2, #1
 8001782:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f983 	bl	8001a9a <HAL_CAN_TxMailbox0CompleteCallback>
 8001794:	e016      	b.n	80017c4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	f003 0304 	and.w	r3, r3, #4
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a8:	e00c      	b.n	80017c4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	f003 0308 	and.w	r3, r3, #8
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80017bc:	e002      	b.n	80017c4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f986 	bl	8001ad0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d024      	beq.n	8001818 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f962 	bl	8001aac <HAL_CAN_TxMailbox1CompleteCallback>
 80017e8:	e016      	b.n	8001818 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d004      	beq.n	80017fe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80017fc:	e00c      	b.n	8001818 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001804:	2b00      	cmp	r3, #0
 8001806:	d004      	beq.n	8001812 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800180e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001810:	e002      	b.n	8001818 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f965 	bl	8001ae2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d024      	beq.n	800186c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800182a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f000 f941 	bl	8001abe <HAL_CAN_TxMailbox2CompleteCallback>
 800183c:	e016      	b.n	800186c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001850:	e00c      	b.n	800186c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d004      	beq.n	8001866 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800185c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
 8001864:	e002      	b.n	800186c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f944 	bl	8001af4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00c      	beq.n	8001890 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f003 0310 	and.w	r3, r3, #16
 800187c:	2b00      	cmp	r3, #0
 800187e:	d007      	beq.n	8001890 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001886:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2210      	movs	r2, #16
 800188e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001890:	6a3b      	ldr	r3, [r7, #32]
 8001892:	f003 0304 	and.w	r3, r3, #4
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d006      	beq.n	80018b2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2208      	movs	r2, #8
 80018aa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 f92a 	bl	8001b06 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d009      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7fe fcac 	bl	8000228 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80018d0:	6a3b      	ldr	r3, [r7, #32]
 80018d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00c      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	f003 0310 	and.w	r3, r3, #16
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d007      	beq.n	80018f4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2210      	movs	r2, #16
 80018f2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	f003 0320 	and.w	r3, r3, #32
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00b      	beq.n	8001916 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d006      	beq.n	8001916 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2208      	movs	r2, #8
 800190e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f90a 	bl	8001b2a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001916:	6a3b      	ldr	r3, [r7, #32]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	2b00      	cmp	r3, #0
 800191e:	d009      	beq.n	8001934 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f8f2 	bl	8001b18 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	2b00      	cmp	r3, #0
 8001946:	d006      	beq.n	8001956 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2210      	movs	r2, #16
 800194e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f8f3 	bl	8001b3c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00b      	beq.n	8001978 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d006      	beq.n	8001978 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2208      	movs	r2, #8
 8001970:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f8eb 	bl	8001b4e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001978:	6a3b      	ldr	r3, [r7, #32]
 800197a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d07b      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	f003 0304 	and.w	r3, r3, #4
 8001988:	2b00      	cmp	r3, #0
 800198a:	d072      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800198c:	6a3b      	ldr	r3, [r7, #32]
 800198e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d008      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d008      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d008      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d043      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d03e      	beq.n	8001a72 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019fa:	2b60      	cmp	r3, #96	@ 0x60
 80019fc:	d02b      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x32a>
 80019fe:	2b60      	cmp	r3, #96	@ 0x60
 8001a00:	d82e      	bhi.n	8001a60 <HAL_CAN_IRQHandler+0x334>
 8001a02:	2b50      	cmp	r3, #80	@ 0x50
 8001a04:	d022      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x320>
 8001a06:	2b50      	cmp	r3, #80	@ 0x50
 8001a08:	d82a      	bhi.n	8001a60 <HAL_CAN_IRQHandler+0x334>
 8001a0a:	2b40      	cmp	r3, #64	@ 0x40
 8001a0c:	d019      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x316>
 8001a0e:	2b40      	cmp	r3, #64	@ 0x40
 8001a10:	d826      	bhi.n	8001a60 <HAL_CAN_IRQHandler+0x334>
 8001a12:	2b30      	cmp	r3, #48	@ 0x30
 8001a14:	d010      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x30c>
 8001a16:	2b30      	cmp	r3, #48	@ 0x30
 8001a18:	d822      	bhi.n	8001a60 <HAL_CAN_IRQHandler+0x334>
 8001a1a:	2b10      	cmp	r3, #16
 8001a1c:	d002      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x2f8>
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	d005      	beq.n	8001a2e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001a22:	e01d      	b.n	8001a60 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a26:	f043 0308 	orr.w	r3, r3, #8
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a2c:	e019      	b.n	8001a62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	f043 0310 	orr.w	r3, r3, #16
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a36:	e014      	b.n	8001a62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	f043 0320 	orr.w	r3, r3, #32
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a40:	e00f      	b.n	8001a62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a4a:	e00a      	b.n	8001a62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a54:	e005      	b.n	8001a62 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001a5e:	e000      	b.n	8001a62 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a60:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699a      	ldr	r2, [r3, #24]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001a70:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2204      	movs	r2, #4
 8001a78:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f867 	bl	8001b60 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	@ 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr

08001aac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ac6:	bf00      	nop
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr

08001af4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr

08001b06 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr

08001b2a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr

08001b4e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
	...

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bc80      	pop	{r7}
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bc80      	pop	{r7}
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4906      	ldr	r1, [pc, #24]	@ (8001c0c <__NVIC_EnableIRQ+0x34>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	6039      	str	r1, [r7, #0]
 8001c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	db0a      	blt.n	8001c3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	490c      	ldr	r1, [pc, #48]	@ (8001c5c <__NVIC_SetPriority+0x4c>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	0112      	lsls	r2, r2, #4
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	440b      	add	r3, r1
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c38:	e00a      	b.n	8001c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4908      	ldr	r1, [pc, #32]	@ (8001c60 <__NVIC_SetPriority+0x50>)
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	3b04      	subs	r3, #4
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	761a      	strb	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	e000e100 	.word	0xe000e100
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b089      	sub	sp, #36	@ 0x24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f1c3 0307 	rsb	r3, r3, #7
 8001c7e:	2b04      	cmp	r3, #4
 8001c80:	bf28      	it	cs
 8001c82:	2304      	movcs	r3, #4
 8001c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d902      	bls.n	8001c94 <NVIC_EncodePriority+0x30>
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3b03      	subs	r3, #3
 8001c92:	e000      	b.n	8001c96 <NVIC_EncodePriority+0x32>
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	f04f 32ff 	mov.w	r2, #4294967295
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43da      	mvns	r2, r3
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cac:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	4313      	orrs	r3, r2
         );
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3724      	adds	r7, #36	@ 0x24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ccc:	f3bf 8f4f 	dsb	sy
}
 8001cd0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001cd2:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <__NVIC_SystemReset+0x24>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001cda:	4904      	ldr	r1, [pc, #16]	@ (8001cec <__NVIC_SystemReset+0x24>)
 8001cdc:	4b04      	ldr	r3, [pc, #16]	@ (8001cf0 <__NVIC_SystemReset+0x28>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce2:	f3bf 8f4f 	dsb	sy
}
 8001ce6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ce8:	bf00      	nop
 8001cea:	e7fd      	b.n	8001ce8 <__NVIC_SystemReset+0x20>
 8001cec:	e000ed00 	.word	0xe000ed00
 8001cf0:	05fa0004 	.word	0x05fa0004

08001cf4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d04:	d301      	bcc.n	8001d0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00f      	b.n	8001d2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d34 <SysTick_Config+0x40>)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d12:	210f      	movs	r1, #15
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f7ff ff7a 	bl	8001c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <SysTick_Config+0x40>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <SysTick_Config+0x40>)
 8001d24:	2207      	movs	r2, #7
 8001d26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	e000e010 	.word	0xe000e010

08001d38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f7ff ff17 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b086      	sub	sp, #24
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	4603      	mov	r3, r0
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d60:	f7ff ff2c 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68b9      	ldr	r1, [r7, #8]
 8001d6a:	6978      	ldr	r0, [r7, #20]
 8001d6c:	f7ff ff7a 	bl	8001c64 <NVIC_EncodePriority>
 8001d70:	4602      	mov	r2, r0
 8001d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d76:	4611      	mov	r1, r2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff49 	bl	8001c10 <__NVIC_SetPriority>
}
 8001d7e:	bf00      	nop
 8001d80:	3718      	adds	r7, #24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff ff1f 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001da6:	f7ff ff8f 	bl	8001cc8 <__NVIC_SystemReset>

08001daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f7ff ff9e 	bl	8001cf4 <SysTick_Config>
 8001db8:	4603      	mov	r3, r0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e043      	b.n	8001e62 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b22      	ldr	r3, [pc, #136]	@ (8001e6c <HAL_DMA_Init+0xa8>)
 8001de2:	4413      	add	r3, r2
 8001de4:	4a22      	ldr	r2, [pc, #136]	@ (8001e70 <HAL_DMA_Init+0xac>)
 8001de6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	009a      	lsls	r2, r3, #2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a1f      	ldr	r2, [pc, #124]	@ (8001e74 <HAL_DMA_Init+0xb0>)
 8001df6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001e0e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001e12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	bffdfff8 	.word	0xbffdfff8
 8001e70:	cccccccd 	.word	0xcccccccd
 8001e74:	40020000 	.word	0x40020000

08001e78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <HAL_DMA_Start_IT+0x20>
 8001e94:	2302      	movs	r3, #2
 8001e96:	e04b      	b.n	8001f30 <HAL_DMA_Start_IT+0xb8>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d13a      	bne.n	8001f22 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0201 	bic.w	r2, r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	68b9      	ldr	r1, [r7, #8]
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f9eb 	bl	80022ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 020e 	orr.w	r2, r2, #14
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e00f      	b.n	8001f10 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0204 	bic.w	r2, r2, #4
 8001efe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 020a 	orr.w	r2, r2, #10
 8001f0e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	e005      	b.n	8001f2e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}

08001f38 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d008      	beq.n	8001f62 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2204      	movs	r2, #4
 8001f54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e020      	b.n	8001fa4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 020e 	bic.w	r2, r2, #14
 8001f70:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f90:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d005      	beq.n	8001fd4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2204      	movs	r2, #4
 8001fcc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
 8001fd2:	e051      	b.n	8002078 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 020e 	bic.w	r2, r2, #14
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a22      	ldr	r2, [pc, #136]	@ (8002084 <HAL_DMA_Abort_IT+0xd4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d029      	beq.n	8002052 <HAL_DMA_Abort_IT+0xa2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a21      	ldr	r2, [pc, #132]	@ (8002088 <HAL_DMA_Abort_IT+0xd8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <HAL_DMA_Abort_IT+0x9e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1f      	ldr	r2, [pc, #124]	@ (800208c <HAL_DMA_Abort_IT+0xdc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d01a      	beq.n	8002048 <HAL_DMA_Abort_IT+0x98>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1e      	ldr	r2, [pc, #120]	@ (8002090 <HAL_DMA_Abort_IT+0xe0>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d012      	beq.n	8002042 <HAL_DMA_Abort_IT+0x92>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1c      	ldr	r2, [pc, #112]	@ (8002094 <HAL_DMA_Abort_IT+0xe4>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00a      	beq.n	800203c <HAL_DMA_Abort_IT+0x8c>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <HAL_DMA_Abort_IT+0xe8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d102      	bne.n	8002036 <HAL_DMA_Abort_IT+0x86>
 8002030:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002034:	e00e      	b.n	8002054 <HAL_DMA_Abort_IT+0xa4>
 8002036:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800203a:	e00b      	b.n	8002054 <HAL_DMA_Abort_IT+0xa4>
 800203c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002040:	e008      	b.n	8002054 <HAL_DMA_Abort_IT+0xa4>
 8002042:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002046:	e005      	b.n	8002054 <HAL_DMA_Abort_IT+0xa4>
 8002048:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800204c:	e002      	b.n	8002054 <HAL_DMA_Abort_IT+0xa4>
 800204e:	2310      	movs	r3, #16
 8002050:	e000      	b.n	8002054 <HAL_DMA_Abort_IT+0xa4>
 8002052:	2301      	movs	r3, #1
 8002054:	4a11      	ldr	r2, [pc, #68]	@ (800209c <HAL_DMA_Abort_IT+0xec>)
 8002056:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	4798      	blx	r3
    } 
  }
  return status;
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40020008 	.word	0x40020008
 8002088:	4002001c 	.word	0x4002001c
 800208c:	40020030 	.word	0x40020030
 8002090:	40020044 	.word	0x40020044
 8002094:	40020058 	.word	0x40020058
 8002098:	4002006c 	.word	0x4002006c
 800209c:	40020000 	.word	0x40020000

080020a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	2204      	movs	r2, #4
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d04f      	beq.n	8002168 <HAL_DMA_IRQHandler+0xc8>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0304 	and.w	r3, r3, #4
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d04a      	beq.n	8002168 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0204 	bic.w	r2, r2, #4
 80020ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a66      	ldr	r2, [pc, #408]	@ (8002290 <HAL_DMA_IRQHandler+0x1f0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d029      	beq.n	800214e <HAL_DMA_IRQHandler+0xae>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a65      	ldr	r2, [pc, #404]	@ (8002294 <HAL_DMA_IRQHandler+0x1f4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d022      	beq.n	800214a <HAL_DMA_IRQHandler+0xaa>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a63      	ldr	r2, [pc, #396]	@ (8002298 <HAL_DMA_IRQHandler+0x1f8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d01a      	beq.n	8002144 <HAL_DMA_IRQHandler+0xa4>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a62      	ldr	r2, [pc, #392]	@ (800229c <HAL_DMA_IRQHandler+0x1fc>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d012      	beq.n	800213e <HAL_DMA_IRQHandler+0x9e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a60      	ldr	r2, [pc, #384]	@ (80022a0 <HAL_DMA_IRQHandler+0x200>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d00a      	beq.n	8002138 <HAL_DMA_IRQHandler+0x98>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a5f      	ldr	r2, [pc, #380]	@ (80022a4 <HAL_DMA_IRQHandler+0x204>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d102      	bne.n	8002132 <HAL_DMA_IRQHandler+0x92>
 800212c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002130:	e00e      	b.n	8002150 <HAL_DMA_IRQHandler+0xb0>
 8002132:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002136:	e00b      	b.n	8002150 <HAL_DMA_IRQHandler+0xb0>
 8002138:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800213c:	e008      	b.n	8002150 <HAL_DMA_IRQHandler+0xb0>
 800213e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002142:	e005      	b.n	8002150 <HAL_DMA_IRQHandler+0xb0>
 8002144:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002148:	e002      	b.n	8002150 <HAL_DMA_IRQHandler+0xb0>
 800214a:	2340      	movs	r3, #64	@ 0x40
 800214c:	e000      	b.n	8002150 <HAL_DMA_IRQHandler+0xb0>
 800214e:	2304      	movs	r3, #4
 8002150:	4a55      	ldr	r2, [pc, #340]	@ (80022a8 <HAL_DMA_IRQHandler+0x208>)
 8002152:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 8094 	beq.w	8002286 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002166:	e08e      	b.n	8002286 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	2202      	movs	r2, #2
 800216e:	409a      	lsls	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4013      	ands	r3, r2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d056      	beq.n	8002226 <HAL_DMA_IRQHandler+0x186>
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d051      	beq.n	8002226 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0320 	and.w	r3, r3, #32
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10b      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 020a 	bic.w	r2, r2, #10
 800219e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a38      	ldr	r2, [pc, #224]	@ (8002290 <HAL_DMA_IRQHandler+0x1f0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d029      	beq.n	8002206 <HAL_DMA_IRQHandler+0x166>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a37      	ldr	r2, [pc, #220]	@ (8002294 <HAL_DMA_IRQHandler+0x1f4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d022      	beq.n	8002202 <HAL_DMA_IRQHandler+0x162>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a35      	ldr	r2, [pc, #212]	@ (8002298 <HAL_DMA_IRQHandler+0x1f8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01a      	beq.n	80021fc <HAL_DMA_IRQHandler+0x15c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a34      	ldr	r2, [pc, #208]	@ (800229c <HAL_DMA_IRQHandler+0x1fc>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d012      	beq.n	80021f6 <HAL_DMA_IRQHandler+0x156>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a32      	ldr	r2, [pc, #200]	@ (80022a0 <HAL_DMA_IRQHandler+0x200>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00a      	beq.n	80021f0 <HAL_DMA_IRQHandler+0x150>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a31      	ldr	r2, [pc, #196]	@ (80022a4 <HAL_DMA_IRQHandler+0x204>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d102      	bne.n	80021ea <HAL_DMA_IRQHandler+0x14a>
 80021e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80021e8:	e00e      	b.n	8002208 <HAL_DMA_IRQHandler+0x168>
 80021ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ee:	e00b      	b.n	8002208 <HAL_DMA_IRQHandler+0x168>
 80021f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021f4:	e008      	b.n	8002208 <HAL_DMA_IRQHandler+0x168>
 80021f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021fa:	e005      	b.n	8002208 <HAL_DMA_IRQHandler+0x168>
 80021fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002200:	e002      	b.n	8002208 <HAL_DMA_IRQHandler+0x168>
 8002202:	2320      	movs	r3, #32
 8002204:	e000      	b.n	8002208 <HAL_DMA_IRQHandler+0x168>
 8002206:	2302      	movs	r3, #2
 8002208:	4a27      	ldr	r2, [pc, #156]	@ (80022a8 <HAL_DMA_IRQHandler+0x208>)
 800220a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d034      	beq.n	8002286 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002224:	e02f      	b.n	8002286 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	2208      	movs	r2, #8
 800222c:	409a      	lsls	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d028      	beq.n	8002288 <HAL_DMA_IRQHandler+0x1e8>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b00      	cmp	r3, #0
 800223e:	d023      	beq.n	8002288 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 020e 	bic.w	r2, r2, #14
 800224e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002258:	2101      	movs	r1, #1
 800225a:	fa01 f202 	lsl.w	r2, r1, r2
 800225e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	4798      	blx	r3
    }
  }
  return;
 8002286:	bf00      	nop
 8002288:	bf00      	nop
}
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40020008 	.word	0x40020008
 8002294:	4002001c 	.word	0x4002001c
 8002298:	40020030 	.word	0x40020030
 800229c:	40020044 	.word	0x40020044
 80022a0:	40020058 	.word	0x40020058
 80022a4:	4002006c 	.word	0x4002006c
 80022a8:	40020000 	.word	0x40020000

080022ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022c2:	2101      	movs	r1, #1
 80022c4:	fa01 f202 	lsl.w	r2, r1, r2
 80022c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	d108      	bne.n	80022ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022ea:	e007      	b.n	80022fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68ba      	ldr	r2, [r7, #8]
 80022f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	60da      	str	r2, [r3, #12]
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
	...

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	b480      	push	{r7}
 800230a:	b08b      	sub	sp, #44	@ 0x2c
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002312:	2300      	movs	r3, #0
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800231a:	e169      	b.n	80025f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800231c:	2201      	movs	r2, #1
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 8158 	bne.w	80025ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	4a9a      	ldr	r2, [pc, #616]	@ (80025a8 <HAL_GPIO_Init+0x2a0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d05e      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002344:	4a98      	ldr	r2, [pc, #608]	@ (80025a8 <HAL_GPIO_Init+0x2a0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d875      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 800234a:	4a98      	ldr	r2, [pc, #608]	@ (80025ac <HAL_GPIO_Init+0x2a4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d058      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002350:	4a96      	ldr	r2, [pc, #600]	@ (80025ac <HAL_GPIO_Init+0x2a4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d86f      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 8002356:	4a96      	ldr	r2, [pc, #600]	@ (80025b0 <HAL_GPIO_Init+0x2a8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d052      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 800235c:	4a94      	ldr	r2, [pc, #592]	@ (80025b0 <HAL_GPIO_Init+0x2a8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d869      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 8002362:	4a94      	ldr	r2, [pc, #592]	@ (80025b4 <HAL_GPIO_Init+0x2ac>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d04c      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002368:	4a92      	ldr	r2, [pc, #584]	@ (80025b4 <HAL_GPIO_Init+0x2ac>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d863      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 800236e:	4a92      	ldr	r2, [pc, #584]	@ (80025b8 <HAL_GPIO_Init+0x2b0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d046      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
 8002374:	4a90      	ldr	r2, [pc, #576]	@ (80025b8 <HAL_GPIO_Init+0x2b0>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d85d      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 800237a:	2b12      	cmp	r3, #18
 800237c:	d82a      	bhi.n	80023d4 <HAL_GPIO_Init+0xcc>
 800237e:	2b12      	cmp	r3, #18
 8002380:	d859      	bhi.n	8002436 <HAL_GPIO_Init+0x12e>
 8002382:	a201      	add	r2, pc, #4	@ (adr r2, 8002388 <HAL_GPIO_Init+0x80>)
 8002384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002388:	08002403 	.word	0x08002403
 800238c:	080023dd 	.word	0x080023dd
 8002390:	080023ef 	.word	0x080023ef
 8002394:	08002431 	.word	0x08002431
 8002398:	08002437 	.word	0x08002437
 800239c:	08002437 	.word	0x08002437
 80023a0:	08002437 	.word	0x08002437
 80023a4:	08002437 	.word	0x08002437
 80023a8:	08002437 	.word	0x08002437
 80023ac:	08002437 	.word	0x08002437
 80023b0:	08002437 	.word	0x08002437
 80023b4:	08002437 	.word	0x08002437
 80023b8:	08002437 	.word	0x08002437
 80023bc:	08002437 	.word	0x08002437
 80023c0:	08002437 	.word	0x08002437
 80023c4:	08002437 	.word	0x08002437
 80023c8:	08002437 	.word	0x08002437
 80023cc:	080023e5 	.word	0x080023e5
 80023d0:	080023f9 	.word	0x080023f9
 80023d4:	4a79      	ldr	r2, [pc, #484]	@ (80025bc <HAL_GPIO_Init+0x2b4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023da:	e02c      	b.n	8002436 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	623b      	str	r3, [r7, #32]
          break;
 80023e2:	e029      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	3304      	adds	r3, #4
 80023ea:	623b      	str	r3, [r7, #32]
          break;
 80023ec:	e024      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	3308      	adds	r3, #8
 80023f4:	623b      	str	r3, [r7, #32]
          break;
 80023f6:	e01f      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	330c      	adds	r3, #12
 80023fe:	623b      	str	r3, [r7, #32]
          break;
 8002400:	e01a      	b.n	8002438 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800240a:	2304      	movs	r3, #4
 800240c:	623b      	str	r3, [r7, #32]
          break;
 800240e:	e013      	b.n	8002438 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d105      	bne.n	8002424 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002418:	2308      	movs	r3, #8
 800241a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	611a      	str	r2, [r3, #16]
          break;
 8002422:	e009      	b.n	8002438 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002424:	2308      	movs	r3, #8
 8002426:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	615a      	str	r2, [r3, #20]
          break;
 800242e:	e003      	b.n	8002438 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
          break;
 8002434:	e000      	b.n	8002438 <HAL_GPIO_Init+0x130>
          break;
 8002436:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2bff      	cmp	r3, #255	@ 0xff
 800243c:	d801      	bhi.n	8002442 <HAL_GPIO_Init+0x13a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	e001      	b.n	8002446 <HAL_GPIO_Init+0x13e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3304      	adds	r3, #4
 8002446:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2bff      	cmp	r3, #255	@ 0xff
 800244c:	d802      	bhi.n	8002454 <HAL_GPIO_Init+0x14c>
 800244e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	e002      	b.n	800245a <HAL_GPIO_Init+0x152>
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	3b08      	subs	r3, #8
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	210f      	movs	r1, #15
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	401a      	ands	r2, r3
 800246c:	6a39      	ldr	r1, [r7, #32]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	431a      	orrs	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80b1 	beq.w	80025ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002488:	4b4d      	ldr	r3, [pc, #308]	@ (80025c0 <HAL_GPIO_Init+0x2b8>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	4a4c      	ldr	r2, [pc, #304]	@ (80025c0 <HAL_GPIO_Init+0x2b8>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6193      	str	r3, [r2, #24]
 8002494:	4b4a      	ldr	r3, [pc, #296]	@ (80025c0 <HAL_GPIO_Init+0x2b8>)
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024a0:	4a48      	ldr	r2, [pc, #288]	@ (80025c4 <HAL_GPIO_Init+0x2bc>)
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3302      	adds	r3, #2
 80024a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a40      	ldr	r2, [pc, #256]	@ (80025c8 <HAL_GPIO_Init+0x2c0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d013      	beq.n	80024f4 <HAL_GPIO_Init+0x1ec>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3f      	ldr	r2, [pc, #252]	@ (80025cc <HAL_GPIO_Init+0x2c4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00d      	beq.n	80024f0 <HAL_GPIO_Init+0x1e8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3e      	ldr	r2, [pc, #248]	@ (80025d0 <HAL_GPIO_Init+0x2c8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d007      	beq.n	80024ec <HAL_GPIO_Init+0x1e4>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a3d      	ldr	r2, [pc, #244]	@ (80025d4 <HAL_GPIO_Init+0x2cc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_GPIO_Init+0x1e0>
 80024e4:	2303      	movs	r3, #3
 80024e6:	e006      	b.n	80024f6 <HAL_GPIO_Init+0x1ee>
 80024e8:	2304      	movs	r3, #4
 80024ea:	e004      	b.n	80024f6 <HAL_GPIO_Init+0x1ee>
 80024ec:	2302      	movs	r3, #2
 80024ee:	e002      	b.n	80024f6 <HAL_GPIO_Init+0x1ee>
 80024f0:	2301      	movs	r3, #1
 80024f2:	e000      	b.n	80024f6 <HAL_GPIO_Init+0x1ee>
 80024f4:	2300      	movs	r3, #0
 80024f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024f8:	f002 0203 	and.w	r2, r2, #3
 80024fc:	0092      	lsls	r2, r2, #2
 80024fe:	4093      	lsls	r3, r2
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4313      	orrs	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002506:	492f      	ldr	r1, [pc, #188]	@ (80025c4 <HAL_GPIO_Init+0x2bc>)
 8002508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	3302      	adds	r3, #2
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d006      	beq.n	800252e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002520:	4b2d      	ldr	r3, [pc, #180]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	492c      	ldr	r1, [pc, #176]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]
 800252c:	e006      	b.n	800253c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800252e:	4b2a      	ldr	r3, [pc, #168]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	43db      	mvns	r3, r3
 8002536:	4928      	ldr	r1, [pc, #160]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002538:	4013      	ands	r3, r2
 800253a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d006      	beq.n	8002556 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002548:	4b23      	ldr	r3, [pc, #140]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	4922      	ldr	r1, [pc, #136]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	60cb      	str	r3, [r1, #12]
 8002554:	e006      	b.n	8002564 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002556:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	43db      	mvns	r3, r3
 800255e:	491e      	ldr	r1, [pc, #120]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002560:	4013      	ands	r3, r2
 8002562:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d006      	beq.n	800257e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002570:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	4918      	ldr	r1, [pc, #96]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
 800257c:	e006      	b.n	800258c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800257e:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002580:	685a      	ldr	r2, [r3, #4]
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	43db      	mvns	r3, r3
 8002586:	4914      	ldr	r1, [pc, #80]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 8002588:	4013      	ands	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d021      	beq.n	80025dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002598:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	490e      	ldr	r1, [pc, #56]	@ (80025d8 <HAL_GPIO_Init+0x2d0>)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
 80025a4:	e021      	b.n	80025ea <HAL_GPIO_Init+0x2e2>
 80025a6:	bf00      	nop
 80025a8:	10320000 	.word	0x10320000
 80025ac:	10310000 	.word	0x10310000
 80025b0:	10220000 	.word	0x10220000
 80025b4:	10210000 	.word	0x10210000
 80025b8:	10120000 	.word	0x10120000
 80025bc:	10110000 	.word	0x10110000
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40010800 	.word	0x40010800
 80025cc:	40010c00 	.word	0x40010c00
 80025d0:	40011000 	.word	0x40011000
 80025d4:	40011400 	.word	0x40011400
 80025d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025dc:	4b0b      	ldr	r3, [pc, #44]	@ (800260c <HAL_GPIO_Init+0x304>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	43db      	mvns	r3, r3
 80025e4:	4909      	ldr	r1, [pc, #36]	@ (800260c <HAL_GPIO_Init+0x304>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	3301      	adds	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	fa22 f303 	lsr.w	r3, r2, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f47f ae8e 	bne.w	800231c <HAL_GPIO_Init+0x14>
  }
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	372c      	adds	r7, #44	@ 0x2c
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	40010400 	.word	0x40010400

08002610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	460b      	mov	r3, r1
 800261a:	807b      	strh	r3, [r7, #2]
 800261c:	4613      	mov	r3, r2
 800261e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002620:	787b      	ldrb	r3, [r7, #1]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002626:	887a      	ldrh	r2, [r7, #2]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800262c:	e003      	b.n	8002636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800262e:	887b      	ldrh	r3, [r7, #2]
 8002630:	041a      	lsls	r2, r3, #16
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	611a      	str	r2, [r3, #16]
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e036      	b.n	80026c0 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800265a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002664:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6852      	ldr	r2, [r2, #4]
 800266e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6892      	ldr	r2, [r2, #8]
 8002678:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800267a:	f7fe fcdb 	bl	8001034 <HAL_GetTick>
 800267e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002680:	e011      	b.n	80026a6 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002682:	f7fe fcd7 	bl	8001034 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 323c 	movw	r2, #4924	@ 0x133c
 8002690:	4293      	cmp	r3, r2
 8002692:	d908      	bls.n	80026a6 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e00c      	b.n	80026c0 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1e6      	bne.n	8002682 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80026bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80026d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
	...

080026e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e272      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8087 	beq.w	8002816 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002708:	4b92      	ldr	r3, [pc, #584]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b04      	cmp	r3, #4
 8002712:	d00c      	beq.n	800272e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002714:	4b8f      	ldr	r3, [pc, #572]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b08      	cmp	r3, #8
 800271e:	d112      	bne.n	8002746 <HAL_RCC_OscConfig+0x5e>
 8002720:	4b8c      	ldr	r3, [pc, #560]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800272c:	d10b      	bne.n	8002746 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272e:	4b89      	ldr	r3, [pc, #548]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d06c      	beq.n	8002814 <HAL_RCC_OscConfig+0x12c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d168      	bne.n	8002814 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e24c      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x76>
 8002750:	4b80      	ldr	r3, [pc, #512]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a7f      	ldr	r2, [pc, #508]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	e02e      	b.n	80027bc <HAL_RCC_OscConfig+0xd4>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x98>
 8002766:	4b7b      	ldr	r3, [pc, #492]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a7a      	ldr	r2, [pc, #488]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800276c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b78      	ldr	r3, [pc, #480]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a77      	ldr	r2, [pc, #476]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002778:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e01d      	b.n	80027bc <HAL_RCC_OscConfig+0xd4>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0xbc>
 800278a:	4b72      	ldr	r3, [pc, #456]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a71      	ldr	r2, [pc, #452]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	4b6f      	ldr	r3, [pc, #444]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a6e      	ldr	r2, [pc, #440]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800279c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0xd4>
 80027a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b68      	ldr	r3, [pc, #416]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a67      	ldr	r2, [pc, #412]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d013      	beq.n	80027ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe fc36 	bl	8001034 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027cc:	f7fe fc32 	bl	8001034 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	@ 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e200      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	4b5d      	ldr	r3, [pc, #372]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0xe4>
 80027ea:	e014      	b.n	8002816 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe fc22 	bl	8001034 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fe fc1e 	bl	8001034 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b64      	cmp	r3, #100	@ 0x64
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e1ec      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	4b53      	ldr	r3, [pc, #332]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x10c>
 8002812:	e000      	b.n	8002816 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d063      	beq.n	80028ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002822:	4b4c      	ldr	r3, [pc, #304]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800282e:	4b49      	ldr	r3, [pc, #292]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b08      	cmp	r3, #8
 8002838:	d11c      	bne.n	8002874 <HAL_RCC_OscConfig+0x18c>
 800283a:	4b46      	ldr	r3, [pc, #280]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d116      	bne.n	8002874 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002846:	4b43      	ldr	r3, [pc, #268]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d005      	beq.n	800285e <HAL_RCC_OscConfig+0x176>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d001      	beq.n	800285e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e1c0      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4939      	ldr	r1, [pc, #228]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800286e:	4313      	orrs	r3, r2
 8002870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002872:	e03a      	b.n	80028ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d020      	beq.n	80028be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800287c:	4b36      	ldr	r3, [pc, #216]	@ (8002958 <HAL_RCC_OscConfig+0x270>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe fbd7 	bl	8001034 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe fbd3 	bl	8001034 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1a1      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	4b2d      	ldr	r3, [pc, #180]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4927      	ldr	r1, [pc, #156]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	600b      	str	r3, [r1, #0]
 80028bc:	e015      	b.n	80028ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028be:	4b26      	ldr	r3, [pc, #152]	@ (8002958 <HAL_RCC_OscConfig+0x270>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c4:	f7fe fbb6 	bl	8001034 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028cc:	f7fe fbb2 	bl	8001034 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e180      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d03a      	beq.n	800296c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d019      	beq.n	8002932 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028fe:	4b17      	ldr	r3, [pc, #92]	@ (800295c <HAL_RCC_OscConfig+0x274>)
 8002900:	2201      	movs	r2, #1
 8002902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002904:	f7fe fb96 	bl	8001034 <HAL_GetTick>
 8002908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	e008      	b.n	800291e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800290c:	f7fe fb92 	bl	8001034 <HAL_GetTick>
 8002910:	4602      	mov	r2, r0
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d901      	bls.n	800291e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e160      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	4b0d      	ldr	r3, [pc, #52]	@ (8002954 <HAL_RCC_OscConfig+0x26c>)
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d0f0      	beq.n	800290c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800292a:	2001      	movs	r0, #1
 800292c:	f000 fad0 	bl	8002ed0 <RCC_Delay>
 8002930:	e01c      	b.n	800296c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002932:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <HAL_RCC_OscConfig+0x274>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002938:	f7fe fb7c 	bl	8001034 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800293e:	e00f      	b.n	8002960 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe fb78 	bl	8001034 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d908      	bls.n	8002960 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e146      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	42420000 	.word	0x42420000
 800295c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b92      	ldr	r3, [pc, #584]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1e9      	bne.n	8002940 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a6 	beq.w	8002ac6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b8b      	ldr	r3, [pc, #556]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10d      	bne.n	80029a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	4b88      	ldr	r3, [pc, #544]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4a87      	ldr	r2, [pc, #540]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002994:	61d3      	str	r3, [r2, #28]
 8002996:	4b85      	ldr	r3, [pc, #532]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a2:	2301      	movs	r3, #1
 80029a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	4b82      	ldr	r3, [pc, #520]	@ (8002bb0 <HAL_RCC_OscConfig+0x4c8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d118      	bne.n	80029e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b2:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb0 <HAL_RCC_OscConfig+0x4c8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a7e      	ldr	r2, [pc, #504]	@ (8002bb0 <HAL_RCC_OscConfig+0x4c8>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029be:	f7fe fb39 	bl	8001034 <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	e008      	b.n	80029d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c6:	f7fe fb35 	bl	8001034 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b64      	cmp	r3, #100	@ 0x64
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e103      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	4b75      	ldr	r3, [pc, #468]	@ (8002bb0 <HAL_RCC_OscConfig+0x4c8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d106      	bne.n	80029fa <HAL_RCC_OscConfig+0x312>
 80029ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	4a6e      	ldr	r2, [pc, #440]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	6213      	str	r3, [r2, #32]
 80029f8:	e02d      	b.n	8002a56 <HAL_RCC_OscConfig+0x36e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x334>
 8002a02:	4b6a      	ldr	r3, [pc, #424]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4a69      	ldr	r2, [pc, #420]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	f023 0301 	bic.w	r3, r3, #1
 8002a0c:	6213      	str	r3, [r2, #32]
 8002a0e:	4b67      	ldr	r3, [pc, #412]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	4a66      	ldr	r2, [pc, #408]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	6213      	str	r3, [r2, #32]
 8002a1a:	e01c      	b.n	8002a56 <HAL_RCC_OscConfig+0x36e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d10c      	bne.n	8002a3e <HAL_RCC_OscConfig+0x356>
 8002a24:	4b61      	ldr	r3, [pc, #388]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	4a60      	ldr	r2, [pc, #384]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a2a:	f043 0304 	orr.w	r3, r3, #4
 8002a2e:	6213      	str	r3, [r2, #32]
 8002a30:	4b5e      	ldr	r3, [pc, #376]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	4a5d      	ldr	r2, [pc, #372]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a36:	f043 0301 	orr.w	r3, r3, #1
 8002a3a:	6213      	str	r3, [r2, #32]
 8002a3c:	e00b      	b.n	8002a56 <HAL_RCC_OscConfig+0x36e>
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	4a5a      	ldr	r2, [pc, #360]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	6213      	str	r3, [r2, #32]
 8002a4a:	4b58      	ldr	r3, [pc, #352]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4a57      	ldr	r2, [pc, #348]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d015      	beq.n	8002a8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a5e:	f7fe fae9 	bl	8001034 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a64:	e00a      	b.n	8002a7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a66:	f7fe fae5 	bl	8001034 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d901      	bls.n	8002a7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e0b1      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7c:	4b4b      	ldr	r3, [pc, #300]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0ee      	beq.n	8002a66 <HAL_RCC_OscConfig+0x37e>
 8002a88:	e014      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8a:	f7fe fad3 	bl	8001034 <HAL_GetTick>
 8002a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a90:	e00a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a92:	f7fe facf 	bl	8001034 <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	1ad3      	subs	r3, r2, r3
 8002a9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e09b      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa8:	4b40      	ldr	r3, [pc, #256]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1ee      	bne.n	8002a92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ab4:	7dfb      	ldrb	r3, [r7, #23]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d105      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aba:	4b3c      	ldr	r3, [pc, #240]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	4a3b      	ldr	r2, [pc, #236]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002ac0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8087 	beq.w	8002bde <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ad0:	4b36      	ldr	r3, [pc, #216]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d061      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d146      	bne.n	8002b72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ae4:	4b33      	ldr	r3, [pc, #204]	@ (8002bb4 <HAL_RCC_OscConfig+0x4cc>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aea:	f7fe faa3 	bl	8001034 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af2:	f7fe fa9f 	bl	8001034 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e06d      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b04:	4b29      	ldr	r3, [pc, #164]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f0      	bne.n	8002af2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b18:	d108      	bne.n	8002b2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b1a:	4b24      	ldr	r3, [pc, #144]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	4921      	ldr	r1, [pc, #132]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a19      	ldr	r1, [r3, #32]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	430b      	orrs	r3, r1
 8002b3e:	491b      	ldr	r1, [pc, #108]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b44:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fa73 	bl	8001034 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b52:	f7fe fa6f 	bl	8001034 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e03d      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b64:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x46a>
 8002b70:	e035      	b.n	8002bde <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b72:	4b10      	ldr	r3, [pc, #64]	@ (8002bb4 <HAL_RCC_OscConfig+0x4cc>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b78:	f7fe fa5c 	bl	8001034 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fa58 	bl	8001034 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e026      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b92:	4b06      	ldr	r3, [pc, #24]	@ (8002bac <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x498>
 8002b9e:	e01e      	b.n	8002bde <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69db      	ldr	r3, [r3, #28]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d107      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e019      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002be8 <HAL_RCC_OscConfig+0x500>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d001      	beq.n	8002bde <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000

08002bec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0d0      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c00:	4b6a      	ldr	r3, [pc, #424]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d910      	bls.n	8002c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b67      	ldr	r3, [pc, #412]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0207 	bic.w	r2, r3, #7
 8002c16:	4965      	ldr	r1, [pc, #404]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c1e:	4b63      	ldr	r3, [pc, #396]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0307 	and.w	r3, r3, #7
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d001      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0b8      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d020      	beq.n	8002c7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c48:	4b59      	ldr	r3, [pc, #356]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4a58      	ldr	r2, [pc, #352]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c60:	4b53      	ldr	r3, [pc, #332]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4a52      	ldr	r2, [pc, #328]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002c6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c6c:	4b50      	ldr	r3, [pc, #320]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	494d      	ldr	r1, [pc, #308]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d040      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	4b47      	ldr	r3, [pc, #284]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d115      	bne.n	8002cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e07f      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d107      	bne.n	8002cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002caa:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e073      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cba:	4b3d      	ldr	r3, [pc, #244]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e06b      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cca:	4b39      	ldr	r3, [pc, #228]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f023 0203 	bic.w	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	4936      	ldr	r1, [pc, #216]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cdc:	f7fe f9aa 	bl	8001034 <HAL_GetTick>
 8002ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	e00a      	b.n	8002cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce4:	f7fe f9a6 	bl	8001034 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e053      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f003 020c 	and.w	r2, r3, #12
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d1eb      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d0c:	4b27      	ldr	r3, [pc, #156]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d210      	bcs.n	8002d3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1a:	4b24      	ldr	r3, [pc, #144]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 0207 	bic.w	r2, r3, #7
 8002d22:	4922      	ldr	r1, [pc, #136]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2a:	4b20      	ldr	r3, [pc, #128]	@ (8002dac <HAL_RCC_ClockConfig+0x1c0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d001      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e032      	b.n	8002da2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d008      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d48:	4b19      	ldr	r3, [pc, #100]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4916      	ldr	r1, [pc, #88]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0308 	and.w	r3, r3, #8
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d009      	beq.n	8002d7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d66:	4b12      	ldr	r3, [pc, #72]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	490e      	ldr	r1, [pc, #56]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d7a:	f000 f821 	bl	8002dc0 <HAL_RCC_GetSysClockFreq>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	490a      	ldr	r1, [pc, #40]	@ (8002db4 <HAL_RCC_ClockConfig+0x1c8>)
 8002d8c:	5ccb      	ldrb	r3, [r1, r3]
 8002d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d92:	4a09      	ldr	r2, [pc, #36]	@ (8002db8 <HAL_RCC_ClockConfig+0x1cc>)
 8002d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d96:	4b09      	ldr	r3, [pc, #36]	@ (8002dbc <HAL_RCC_ClockConfig+0x1d0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fe f908 	bl	8000fb0 <HAL_InitTick>

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40021000 	.word	0x40021000
 8002db4:	080047b8 	.word	0x080047b8
 8002db8:	20000000 	.word	0x20000000
 8002dbc:	20000004 	.word	0x20000004

08002dc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b087      	sub	sp, #28
 8002dc4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dda:	4b1e      	ldr	r3, [pc, #120]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 030c 	and.w	r3, r3, #12
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d002      	beq.n	8002df0 <HAL_RCC_GetSysClockFreq+0x30>
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d003      	beq.n	8002df6 <HAL_RCC_GetSysClockFreq+0x36>
 8002dee:	e027      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002df0:	4b19      	ldr	r3, [pc, #100]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002df2:	613b      	str	r3, [r7, #16]
      break;
 8002df4:	e027      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	0c9b      	lsrs	r3, r3, #18
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	4a17      	ldr	r2, [pc, #92]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e00:	5cd3      	ldrb	r3, [r2, r3]
 8002e02:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d010      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e0e:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x94>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	0c5b      	lsrs	r3, r3, #17
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	4a11      	ldr	r2, [pc, #68]	@ (8002e60 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e1a:	5cd3      	ldrb	r3, [r2, r3]
 8002e1c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a0d      	ldr	r2, [pc, #52]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e22:	fb03 f202 	mul.w	r2, r3, r2
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	e004      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a0c      	ldr	r2, [pc, #48]	@ (8002e64 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e34:	fb02 f303 	mul.w	r3, r2, r3
 8002e38:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	613b      	str	r3, [r7, #16]
      break;
 8002e3e:	e002      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002e42:	613b      	str	r3, [r7, #16]
      break;
 8002e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e46:	693b      	ldr	r3, [r7, #16]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	00f42400 	.word	0x00f42400
 8002e5c:	080047d0 	.word	0x080047d0
 8002e60:	080047e0 	.word	0x080047e0
 8002e64:	003d0900 	.word	0x003d0900
 8002e68:	007a1200 	.word	0x007a1200

08002e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e70:	4b02      	ldr	r3, [pc, #8]	@ (8002e7c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	20000000 	.word	0x20000000

08002e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e84:	f7ff fff2 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	4903      	ldr	r1, [pc, #12]	@ (8002ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e96:	5ccb      	ldrb	r3, [r1, r3]
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	080047c8 	.word	0x080047c8

08002ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002eac:	f7ff ffde 	bl	8002e6c <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	0adb      	lsrs	r3, r3, #11
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4903      	ldr	r1, [pc, #12]	@ (8002ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	080047c8 	.word	0x080047c8

08002ed0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f04 <RCC_Delay+0x34>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <RCC_Delay+0x38>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0a5b      	lsrs	r3, r3, #9
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002eec:	bf00      	nop
  }
  while (Delay --);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1e5a      	subs	r2, r3, #1
 8002ef2:	60fa      	str	r2, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1f9      	bne.n	8002eec <RCC_Delay+0x1c>
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	20000000 	.word	0x20000000
 8002f08:	10624dd3 	.word	0x10624dd3

08002f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e041      	b.n	8002fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fd ff04 	bl	8000d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	f000 fa5c 	bl	8003408 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d001      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e03a      	b.n	800303a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a18      	ldr	r2, [pc, #96]	@ (8003044 <HAL_TIM_Base_Start_IT+0x98>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d00e      	beq.n	8003004 <HAL_TIM_Base_Start_IT+0x58>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fee:	d009      	beq.n	8003004 <HAL_TIM_Base_Start_IT+0x58>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a14      	ldr	r2, [pc, #80]	@ (8003048 <HAL_TIM_Base_Start_IT+0x9c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d004      	beq.n	8003004 <HAL_TIM_Base_Start_IT+0x58>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a13      	ldr	r2, [pc, #76]	@ (800304c <HAL_TIM_Base_Start_IT+0xa0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d111      	bne.n	8003028 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2b06      	cmp	r3, #6
 8003014:	d010      	beq.n	8003038 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0201 	orr.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003026:	e007      	b.n	8003038 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	40012c00 	.word	0x40012c00
 8003048:	40000400 	.word	0x40000400
 800304c:	40000800 	.word	0x40000800

08003050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d020      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01b      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0202 	mvn.w	r2, #2
 8003084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f998 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 80030a0:	e005      	b.n	80030ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f98b 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f99a 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d020      	beq.n	8003100 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 0304 	and.w	r3, r3, #4
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01b      	beq.n	8003100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0204 	mvn.w	r2, #4
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2202      	movs	r2, #2
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f972 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f965 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f974 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d020      	beq.n	800314c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d01b      	beq.n	800314c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0208 	mvn.w	r2, #8
 800311c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2204      	movs	r2, #4
 8003122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f94c 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f93f 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f94e 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f003 0310 	and.w	r3, r3, #16
 8003152:	2b00      	cmp	r3, #0
 8003154:	d020      	beq.n	8003198 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0310 	and.w	r3, r3, #16
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01b      	beq.n	8003198 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0210 	mvn.w	r2, #16
 8003168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2208      	movs	r2, #8
 800316e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f926 	bl	80033d0 <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f919 	bl	80033be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f928 	bl	80033e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00c      	beq.n	80031bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d007      	beq.n	80031bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0201 	mvn.w	r2, #1
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7fd f95a 	bl	8000470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa7f 	bl	80036de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8f8 	bl	80033f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0220 	mvn.w	r2, #32
 8003220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fa52 	bl	80036cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003244:	2b01      	cmp	r3, #1
 8003246:	d101      	bne.n	800324c <HAL_TIM_ConfigClockSource+0x1c>
 8003248:	2302      	movs	r3, #2
 800324a:	e0b4      	b.n	80033b6 <HAL_TIM_ConfigClockSource+0x186>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800326a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003284:	d03e      	beq.n	8003304 <HAL_TIM_ConfigClockSource+0xd4>
 8003286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800328a:	f200 8087 	bhi.w	800339c <HAL_TIM_ConfigClockSource+0x16c>
 800328e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003292:	f000 8086 	beq.w	80033a2 <HAL_TIM_ConfigClockSource+0x172>
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800329a:	d87f      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b70      	cmp	r3, #112	@ 0x70
 800329e:	d01a      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0xa6>
 80032a0:	2b70      	cmp	r3, #112	@ 0x70
 80032a2:	d87b      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b60      	cmp	r3, #96	@ 0x60
 80032a6:	d050      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x11a>
 80032a8:	2b60      	cmp	r3, #96	@ 0x60
 80032aa:	d877      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b50      	cmp	r3, #80	@ 0x50
 80032ae:	d03c      	beq.n	800332a <HAL_TIM_ConfigClockSource+0xfa>
 80032b0:	2b50      	cmp	r3, #80	@ 0x50
 80032b2:	d873      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b40      	cmp	r3, #64	@ 0x40
 80032b6:	d058      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x13a>
 80032b8:	2b40      	cmp	r3, #64	@ 0x40
 80032ba:	d86f      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 80032bc:	2b30      	cmp	r3, #48	@ 0x30
 80032be:	d064      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x15a>
 80032c0:	2b30      	cmp	r3, #48	@ 0x30
 80032c2:	d86b      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d060      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x15a>
 80032c8:	2b20      	cmp	r3, #32
 80032ca:	d867      	bhi.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d05c      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x15a>
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d05a      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x15a>
 80032d4:	e062      	b.n	800339c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032e6:	f000 f974 	bl	80035d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80032f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	609a      	str	r2, [r3, #8]
      break;
 8003302:	e04f      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003314:	f000 f95d 	bl	80035d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003326:	609a      	str	r2, [r3, #8]
      break;
 8003328:	e03c      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003336:	461a      	mov	r2, r3
 8003338:	f000 f8d4 	bl	80034e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2150      	movs	r1, #80	@ 0x50
 8003342:	4618      	mov	r0, r3
 8003344:	f000 f92b 	bl	800359e <TIM_ITRx_SetConfig>
      break;
 8003348:	e02c      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003356:	461a      	mov	r2, r3
 8003358:	f000 f8f2 	bl	8003540 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2160      	movs	r1, #96	@ 0x60
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f91b 	bl	800359e <TIM_ITRx_SetConfig>
      break;
 8003368:	e01c      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	461a      	mov	r2, r3
 8003378:	f000 f8b4 	bl	80034e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2140      	movs	r1, #64	@ 0x40
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f90b 	bl	800359e <TIM_ITRx_SetConfig>
      break;
 8003388:	e00c      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	f000 f902 	bl	800359e <TIM_ITRx_SetConfig>
      break;
 800339a:	e003      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
      break;
 80033a0:	e000      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bc80      	pop	{r7}
 80033ce:	4770      	bx	lr

080033d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr

080033e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b083      	sub	sp, #12
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr

080033f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
	...

08003408 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a2f      	ldr	r2, [pc, #188]	@ (80034d8 <TIM_Base_SetConfig+0xd0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00b      	beq.n	8003438 <TIM_Base_SetConfig+0x30>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003426:	d007      	beq.n	8003438 <TIM_Base_SetConfig+0x30>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a2c      	ldr	r2, [pc, #176]	@ (80034dc <TIM_Base_SetConfig+0xd4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_Base_SetConfig+0x30>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a2b      	ldr	r2, [pc, #172]	@ (80034e0 <TIM_Base_SetConfig+0xd8>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d108      	bne.n	800344a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800343e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4313      	orrs	r3, r2
 8003448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a22      	ldr	r2, [pc, #136]	@ (80034d8 <TIM_Base_SetConfig+0xd0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00b      	beq.n	800346a <TIM_Base_SetConfig+0x62>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003458:	d007      	beq.n	800346a <TIM_Base_SetConfig+0x62>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1f      	ldr	r2, [pc, #124]	@ (80034dc <TIM_Base_SetConfig+0xd4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d003      	beq.n	800346a <TIM_Base_SetConfig+0x62>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1e      	ldr	r2, [pc, #120]	@ (80034e0 <TIM_Base_SetConfig+0xd8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d108      	bne.n	800347c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a0d      	ldr	r2, [pc, #52]	@ (80034d8 <TIM_Base_SetConfig+0xd0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d103      	bne.n	80034b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f023 0201 	bic.w	r2, r3, #1
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	611a      	str	r2, [r3, #16]
  }
}
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr
 80034d8:	40012c00 	.word	0x40012c00
 80034dc:	40000400 	.word	0x40000400
 80034e0:	40000800 	.word	0x40000800

080034e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	f023 0201 	bic.w	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800350e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4313      	orrs	r3, r2
 8003518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	f023 030a 	bic.w	r3, r3, #10
 8003520:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	4313      	orrs	r3, r2
 8003528:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr

08003540 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	f023 0210 	bic.w	r2, r3, #16
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800356a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	031b      	lsls	r3, r3, #12
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800357c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	621a      	str	r2, [r3, #32]
}
 8003594:	bf00      	nop
 8003596:	371c      	adds	r7, #28
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr

0800359e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800359e:	b480      	push	{r7}
 80035a0:	b085      	sub	sp, #20
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f043 0307 	orr.w	r3, r3, #7
 80035c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	609a      	str	r2, [r3, #8]
}
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr

080035d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b087      	sub	sp, #28
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
 80035de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	021a      	lsls	r2, r3, #8
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	609a      	str	r2, [r3, #8]
}
 8003606:	bf00      	nop
 8003608:	371c      	adds	r7, #28
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e046      	b.n	80036b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a16      	ldr	r2, [pc, #88]	@ (80036c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d00e      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003674:	d009      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a12      	ldr	r2, [pc, #72]	@ (80036c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d004      	beq.n	800368a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a10      	ldr	r2, [pc, #64]	@ (80036c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d10c      	bne.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003690:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	4313      	orrs	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr
 80036c0:	40012c00 	.word	0x40012c00
 80036c4:	40000400 	.word	0x40000400
 80036c8:	40000800 	.word	0x40000800

080036cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	bc80      	pop	{r7}
 80036dc:	4770      	bx	lr

080036de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr

080036f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e042      	b.n	8003788 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fb38 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	@ 0x24
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003732:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 ff79 	bl	800462c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	695a      	ldr	r2, [r3, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003758:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003768:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2220      	movs	r2, #32
 8003774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	@ 0x28
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d175      	bne.n	800389c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_UART_Transmit+0x2c>
 80037b6:	88fb      	ldrh	r3, [r7, #6]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e06e      	b.n	800389e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2221      	movs	r2, #33	@ 0x21
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037ce:	f7fd fc31 	bl	8001034 <HAL_GetTick>
 80037d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	88fa      	ldrh	r2, [r7, #6]
 80037de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e8:	d108      	bne.n	80037fc <HAL_UART_Transmit+0x6c>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	e003      	b.n	8003804 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003800:	2300      	movs	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003804:	e02e      	b.n	8003864 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	2200      	movs	r2, #0
 800380e:	2180      	movs	r1, #128	@ 0x80
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f000 fc55 	bl	80040c0 <UART_WaitOnFlagUntilTimeout>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e03a      	b.n	800389e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10b      	bne.n	8003846 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800383c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	3302      	adds	r3, #2
 8003842:	61bb      	str	r3, [r7, #24]
 8003844:	e007      	b.n	8003856 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	3301      	adds	r3, #1
 8003854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1cb      	bne.n	8003806 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2140      	movs	r1, #64	@ 0x40
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fc21 	bl	80040c0 <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d005      	beq.n	8003890 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e006      	b.n	800389e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800389c:	2302      	movs	r3, #2
  }
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08c      	sub	sp, #48	@ 0x30
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	4613      	mov	r3, r2
 80038b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d146      	bne.n	800394e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80038c6:	88fb      	ldrh	r3, [r7, #6]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e03f      	b.n	8003950 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80038dc:	88fb      	ldrh	r3, [r7, #6]
 80038de:	461a      	mov	r2, r3
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	f000 fc46 	bl	8004174 <UART_Start_Receive_DMA>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d125      	bne.n	8003942 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038f6:	2300      	movs	r3, #0
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	613b      	str	r3, [r7, #16]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	330c      	adds	r3, #12
 8003912:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	e853 3f00 	ldrex	r3, [r3]
 800391a:	617b      	str	r3, [r7, #20]
   return(result);
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f043 0310 	orr.w	r3, r3, #16
 8003922:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800392c:	627a      	str	r2, [r7, #36]	@ 0x24
 800392e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	6a39      	ldr	r1, [r7, #32]
 8003932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	61fb      	str	r3, [r7, #28]
   return(result);
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e5      	bne.n	800390c <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8003940:	e002      	b.n	8003948 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8003948:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800394c:	e000      	b.n	8003950 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800394e:	2302      	movs	r3, #2
  }
}
 8003950:	4618      	mov	r0, r3
 8003952:	3730      	adds	r7, #48	@ 0x30
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b0ba      	sub	sp, #232	@ 0xe8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800398a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800399e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <HAL_UART_IRQHandler+0x66>
 80039aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ae:	f003 0320 	and.w	r3, r3, #32
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 fd7a 	bl	80044b0 <UART_Receive_IT>
      return;
 80039bc:	e25b      	b.n	8003e76 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	f000 80de 	beq.w	8003b84 <HAL_UART_IRQHandler+0x22c>
 80039c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d106      	bne.n	80039e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 80d1 	beq.w	8003b84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <HAL_UART_IRQHandler+0xae>
 80039ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d005      	beq.n	8003a06 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a0a:	f003 0304 	and.w	r3, r3, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_UART_IRQHandler+0xd2>
 8003a12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a16:	f003 0301 	and.w	r3, r3, #1
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	f043 0202 	orr.w	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00b      	beq.n	8003a4e <HAL_UART_IRQHandler+0xf6>
 8003a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	f043 0204 	orr.w	r2, r3, #4
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d011      	beq.n	8003a7e <HAL_UART_IRQHandler+0x126>
 8003a5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d105      	bne.n	8003a72 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d005      	beq.n	8003a7e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a76:	f043 0208 	orr.w	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 81f2 	beq.w	8003e6c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8c:	f003 0320 	and.w	r3, r3, #32
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d008      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x14e>
 8003a94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fd05 	bl	80044b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac2:	f003 0308 	and.w	r3, r3, #8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <HAL_UART_IRQHandler+0x17a>
 8003aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d04f      	beq.n	8003b72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fc0f 	bl	80042f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d041      	beq.n	8003b6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	3314      	adds	r3, #20
 8003aec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3314      	adds	r3, #20
 8003b0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b22:	e841 2300 	strex	r3, r2, [r1]
 8003b26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1d9      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d013      	beq.n	8003b62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003d38 <HAL_UART_IRQHandler+0x3e0>)
 8003b40:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fe fa32 	bl	8001fb0 <HAL_DMA_Abort_IT>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	e00e      	b.n	8003b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f9a5 	bl	8003eb2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b68:	e00a      	b.n	8003b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f9a1 	bl	8003eb2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	e006      	b.n	8003b80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f99d 	bl	8003eb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b7e:	e175      	b.n	8003e6c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b80:	bf00      	nop
    return;
 8003b82:	e173      	b.n	8003e6c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	f040 814f 	bne.w	8003e2c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 8148 	beq.w	8003e2c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8141 	beq.w	8003e2c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80b6 	beq.w	8003d3c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bdc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8145 	beq.w	8003e70 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	f080 813e 	bcs.w	8003e70 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bfa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	f000 8088 	beq.w	8003d18 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c16:	e853 3f00 	ldrex	r3, [r3]
 8003c1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c34:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c38:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c40:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c44:	e841 2300 	strex	r3, r2, [r1]
 8003c48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1d9      	bne.n	8003c08 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3314      	adds	r3, #20
 8003c5a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c66:	f023 0301 	bic.w	r3, r3, #1
 8003c6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3314      	adds	r3, #20
 8003c74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c78:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c80:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c84:	e841 2300 	strex	r3, r2, [r1]
 8003c88:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e1      	bne.n	8003c54 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3314      	adds	r3, #20
 8003c96:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ca0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3314      	adds	r3, #20
 8003cb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003cb4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cb6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003cba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003cc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e3      	bne.n	8003c90 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	330c      	adds	r3, #12
 8003cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ce6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ce8:	f023 0310 	bic.w	r3, r3, #16
 8003cec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	330c      	adds	r3, #12
 8003cf6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003cfa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cfc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e3      	bne.n	8003cd6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe f910 	bl	8001f38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fc fb7a 	bl	8000428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d34:	e09c      	b.n	8003e70 <HAL_UART_IRQHandler+0x518>
 8003d36:	bf00      	nop
 8003d38:	080043bb 	.word	0x080043bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 808e 	beq.w	8003e74 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 8089 	beq.w	8003e74 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	330c      	adds	r3, #12
 8003d68:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	330c      	adds	r3, #12
 8003d82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d86:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d88:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e3      	bne.n	8003d62 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3314      	adds	r3, #20
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	623b      	str	r3, [r7, #32]
   return(result);
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	f023 0301 	bic.w	r3, r3, #1
 8003db0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3314      	adds	r3, #20
 8003dba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003dbe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc6:	e841 2300 	strex	r3, r2, [r1]
 8003dca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1e3      	bne.n	8003d9a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	e853 3f00 	ldrex	r3, [r3]
 8003dee:	60fb      	str	r3, [r7, #12]
   return(result);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f023 0310 	bic.w	r3, r3, #16
 8003df6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	330c      	adds	r3, #12
 8003e00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e04:	61fa      	str	r2, [r7, #28]
 8003e06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	69b9      	ldr	r1, [r7, #24]
 8003e0a:	69fa      	ldr	r2, [r7, #28]
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	617b      	str	r3, [r7, #20]
   return(result);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e3      	bne.n	8003de0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e22:	4619      	mov	r1, r3
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7fc faff 	bl	8000428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e2a:	e023      	b.n	8003e74 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d009      	beq.n	8003e4c <HAL_UART_IRQHandler+0x4f4>
 8003e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f000 facc 	bl	80043e2 <UART_Transmit_IT>
    return;
 8003e4a:	e014      	b.n	8003e76 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00e      	beq.n	8003e76 <HAL_UART_IRQHandler+0x51e>
 8003e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fb0b 	bl	8004480 <UART_EndTransmit_IT>
    return;
 8003e6a:	e004      	b.n	8003e76 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e6c:	bf00      	nop
 8003e6e:	e002      	b.n	8003e76 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e70:	bf00      	nop
 8003e72:	e000      	b.n	8003e76 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e74:	bf00      	nop
  }
}
 8003e76:	37e8      	adds	r7, #232	@ 0xe8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr

08003e8e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bc80      	pop	{r7}
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr

08003eb2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bc80      	pop	{r7}
 8003ec2:	4770      	bx	lr

08003ec4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b09c      	sub	sp, #112	@ 0x70
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d172      	bne.n	8003fc6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003f06:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f08:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3314      	adds	r3, #20
 8003f20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f24:	e853 3f00 	ldrex	r3, [r3]
 8003f28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	3314      	adds	r3, #20
 8003f38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e5      	bne.n	8003f1a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3314      	adds	r3, #20
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f64:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3314      	adds	r3, #20
 8003f6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f76:	e841 2300 	strex	r3, r2, [r1]
 8003f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1e5      	bne.n	8003f4e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d119      	bne.n	8003fc6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f023 0310 	bic.w	r3, r3, #16
 8003fa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003fb2:	61fa      	str	r2, [r7, #28]
 8003fb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	69b9      	ldr	r1, [r7, #24]
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e5      	bne.n	8003f92 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fc8:	2200      	movs	r2, #0
 8003fca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d106      	bne.n	8003fe2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003fdc:	f7fc fa24 	bl	8000428 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fe0:	e002      	b.n	8003fe8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003fe2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003fe4:	f7ff ff53 	bl	8003e8e <HAL_UART_RxCpltCallback>
}
 8003fe8:	bf00      	nop
 8003fea:	3770      	adds	r7, #112	@ 0x70
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004008:	2b01      	cmp	r3, #1
 800400a:	d108      	bne.n	800401e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	b29b      	uxth	r3, r3
 8004014:	4619      	mov	r1, r3
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f7fc fa06 	bl	8000428 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800401c:	e002      	b.n	8004024 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff ff3e 	bl	8003ea0 <HAL_UART_RxHalfCpltCallback>
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf14      	ite	ne
 800404c:	2301      	movne	r3, #1
 800404e:	2300      	moveq	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b21      	cmp	r3, #33	@ 0x21
 800405e:	d108      	bne.n	8004072 <UART_DMAError+0x46>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d005      	beq.n	8004072 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2200      	movs	r2, #0
 800406a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800406c:	68b8      	ldr	r0, [r7, #8]
 800406e:	f000 f91b 	bl	80042a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800408e:	b2db      	uxtb	r3, r3
 8004090:	2b22      	cmp	r3, #34	@ 0x22
 8004092:	d108      	bne.n	80040a6 <UART_DMAError+0x7a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2200      	movs	r2, #0
 800409e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80040a0:	68b8      	ldr	r0, [r7, #8]
 80040a2:	f000 f928 	bl	80042f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040aa:	f043 0210 	orr.w	r2, r3, #16
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040b2:	68b8      	ldr	r0, [r7, #8]
 80040b4:	f7ff fefd 	bl	8003eb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040b8:	bf00      	nop
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	4613      	mov	r3, r2
 80040ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d0:	e03b      	b.n	800414a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d8:	d037      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040da:	f7fc ffab 	bl	8001034 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	6a3a      	ldr	r2, [r7, #32]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d302      	bcc.n	80040f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80040ea:	6a3b      	ldr	r3, [r7, #32]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e03a      	b.n	800416a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d023      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b80      	cmp	r3, #128	@ 0x80
 8004106:	d020      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b40      	cmp	r3, #64	@ 0x40
 800410c:	d01d      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b08      	cmp	r3, #8
 800411a:	d116      	bne.n	800414a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 f8df 	bl	80042f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2208      	movs	r2, #8
 800413c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e00f      	b.n	800416a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	429a      	cmp	r2, r3
 8004158:	bf0c      	ite	eq
 800415a:	2301      	moveq	r3, #1
 800415c:	2300      	movne	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	79fb      	ldrb	r3, [r7, #7]
 8004164:	429a      	cmp	r2, r3
 8004166:	d0b4      	beq.n	80040d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3718      	adds	r7, #24
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b098      	sub	sp, #96	@ 0x60
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	88fa      	ldrh	r2, [r7, #6]
 800418c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2222      	movs	r2, #34	@ 0x22
 8004198:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a0:	4a3e      	ldr	r2, [pc, #248]	@ (800429c <UART_Start_Receive_DMA+0x128>)
 80041a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a8:	4a3d      	ldr	r2, [pc, #244]	@ (80042a0 <UART_Start_Receive_DMA+0x12c>)
 80041aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b0:	4a3c      	ldr	r2, [pc, #240]	@ (80042a4 <UART_Start_Receive_DMA+0x130>)
 80041b2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b8:	2200      	movs	r2, #0
 80041ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80041bc:	f107 0308 	add.w	r3, r7, #8
 80041c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3304      	adds	r3, #4
 80041cc:	4619      	mov	r1, r3
 80041ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	f7fd fe50 	bl	8001e78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80041d8:	2300      	movs	r3, #0
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d019      	beq.n	800422a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	330c      	adds	r3, #12
 80041fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800420c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004216:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004218:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800421c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004224:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e5      	bne.n	80041f6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3314      	adds	r3, #20
 8004230:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800423a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	657b      	str	r3, [r7, #84]	@ 0x54
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3314      	adds	r3, #20
 8004248:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800424a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800424c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004250:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e5      	bne.n	800422a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3314      	adds	r3, #20
 8004264:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	617b      	str	r3, [r7, #20]
   return(result);
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004274:	653b      	str	r3, [r7, #80]	@ 0x50
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3314      	adds	r3, #20
 800427c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800427e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	6a39      	ldr	r1, [r7, #32]
 8004284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	61fb      	str	r3, [r7, #28]
   return(result);
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e5      	bne.n	800425e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3760      	adds	r7, #96	@ 0x60
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}
 800429c:	08003ec5 	.word	0x08003ec5
 80042a0:	08003ff1 	.word	0x08003ff1
 80042a4:	0800402d 	.word	0x0800402d

080042a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b089      	sub	sp, #36	@ 0x24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80042c6:	61fb      	str	r3, [r7, #28]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	61ba      	str	r2, [r7, #24]
 80042d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6979      	ldr	r1, [r7, #20]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	613b      	str	r3, [r7, #16]
   return(result);
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e5      	bne.n	80042b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80042ec:	bf00      	nop
 80042ee:	3724      	adds	r7, #36	@ 0x24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b095      	sub	sp, #84	@ 0x54
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	330c      	adds	r3, #12
 8004304:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004308:	e853 3f00 	ldrex	r3, [r3]
 800430c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	330c      	adds	r3, #12
 800431c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800431e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004320:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004322:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004324:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004326:	e841 2300 	strex	r3, r2, [r1]
 800432a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800432c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1e5      	bne.n	80042fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3314      	adds	r3, #20
 8004338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	e853 3f00 	ldrex	r3, [r3]
 8004340:	61fb      	str	r3, [r7, #28]
   return(result);
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	3314      	adds	r3, #20
 8004350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004354:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1e5      	bne.n	8004332 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	2b01      	cmp	r3, #1
 800436c:	d119      	bne.n	80043a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	330c      	adds	r3, #12
 8004374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	60bb      	str	r3, [r7, #8]
   return(result);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f023 0310 	bic.w	r3, r3, #16
 8004384:	647b      	str	r3, [r7, #68]	@ 0x44
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800438e:	61ba      	str	r2, [r7, #24]
 8004390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004392:	6979      	ldr	r1, [r7, #20]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	e841 2300 	strex	r3, r2, [r1]
 800439a:	613b      	str	r3, [r7, #16]
   return(result);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1e5      	bne.n	800436e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043b0:	bf00      	nop
 80043b2:	3754      	adds	r7, #84	@ 0x54
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff fd6c 	bl	8003eb2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043da:	bf00      	nop
 80043dc:	3710      	adds	r7, #16
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b21      	cmp	r3, #33	@ 0x21
 80043f4:	d13e      	bne.n	8004474 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043fe:	d114      	bne.n	800442a <UART_Transmit_IT+0x48>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d110      	bne.n	800442a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800441c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	1c9a      	adds	r2, r3, #2
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	621a      	str	r2, [r3, #32]
 8004428:	e008      	b.n	800443c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	1c59      	adds	r1, r3, #1
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6211      	str	r1, [r2, #32]
 8004434:	781a      	ldrb	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29b      	uxth	r3, r3
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	4619      	mov	r1, r3
 800444a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10f      	bne.n	8004470 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800445e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800446e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004470:	2300      	movs	r3, #0
 8004472:	e000      	b.n	8004476 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004474:	2302      	movs	r3, #2
  }
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	bc80      	pop	{r7}
 800447e:	4770      	bx	lr

08004480 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004496:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fceb 	bl	8003e7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b08c      	sub	sp, #48	@ 0x30
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b22      	cmp	r3, #34	@ 0x22
 80044c2:	f040 80ae 	bne.w	8004622 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044ce:	d117      	bne.n	8004500 <UART_Receive_IT+0x50>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d113      	bne.n	8004500 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f8:	1c9a      	adds	r2, r3, #2
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80044fe:	e026      	b.n	800454e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004504:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004506:	2300      	movs	r3, #0
 8004508:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004512:	d007      	beq.n	8004524 <UART_Receive_IT+0x74>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <UART_Receive_IT+0x82>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d106      	bne.n	8004532 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	b2da      	uxtb	r2, r3
 800452c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	e008      	b.n	8004544 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800453e:	b2da      	uxtb	r2, r3
 8004540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004542:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29b      	uxth	r3, r3
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	4619      	mov	r1, r3
 800455c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800455e:	2b00      	cmp	r3, #0
 8004560:	d15d      	bne.n	800461e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0220 	bic.w	r2, r2, #32
 8004570:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004580:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d135      	bne.n	8004614 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	613b      	str	r3, [r7, #16]
   return(result);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f023 0310 	bic.w	r3, r3, #16
 80045c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	330c      	adds	r3, #12
 80045cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ce:	623a      	str	r2, [r7, #32]
 80045d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	69f9      	ldr	r1, [r7, #28]
 80045d4:	6a3a      	ldr	r2, [r7, #32]
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	61bb      	str	r3, [r7, #24]
   return(result);
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e5      	bne.n	80045ae <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b10      	cmp	r3, #16
 80045ee:	d10a      	bne.n	8004606 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800460a:	4619      	mov	r1, r3
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7fb ff0b 	bl	8000428 <HAL_UARTEx_RxEventCallback>
 8004612:	e002      	b.n	800461a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f7ff fc3a 	bl	8003e8e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	e002      	b.n	8004624 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	e000      	b.n	8004624 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004622:	2302      	movs	r3, #2
  }
}
 8004624:	4618      	mov	r0, r3
 8004626:	3730      	adds	r7, #48	@ 0x30
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004666:	f023 030c 	bic.w	r3, r3, #12
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	430b      	orrs	r3, r1
 8004672:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a2c      	ldr	r2, [pc, #176]	@ (8004740 <UART_SetConfig+0x114>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d103      	bne.n	800469c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe fc08 	bl	8002ea8 <HAL_RCC_GetPCLK2Freq>
 8004698:	60f8      	str	r0, [r7, #12]
 800469a:	e002      	b.n	80046a2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800469c:	f7fe fbf0 	bl	8002e80 <HAL_RCC_GetPCLK1Freq>
 80046a0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	009a      	lsls	r2, r3, #2
 80046ac:	441a      	add	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	4a22      	ldr	r2, [pc, #136]	@ (8004744 <UART_SetConfig+0x118>)
 80046ba:	fba2 2303 	umull	r2, r3, r2, r3
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	0119      	lsls	r1, r3, #4
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	009a      	lsls	r2, r3, #2
 80046cc:	441a      	add	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004744 <UART_SetConfig+0x118>)
 80046da:	fba3 0302 	umull	r0, r3, r3, r2
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	2064      	movs	r0, #100	@ 0x64
 80046e2:	fb00 f303 	mul.w	r3, r0, r3
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	3332      	adds	r3, #50	@ 0x32
 80046ec:	4a15      	ldr	r2, [pc, #84]	@ (8004744 <UART_SetConfig+0x118>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046f8:	4419      	add	r1, r3
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	009a      	lsls	r2, r3, #2
 8004704:	441a      	add	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004710:	4b0c      	ldr	r3, [pc, #48]	@ (8004744 <UART_SetConfig+0x118>)
 8004712:	fba3 0302 	umull	r0, r3, r3, r2
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	2064      	movs	r0, #100	@ 0x64
 800471a:	fb00 f303 	mul.w	r3, r0, r3
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	3332      	adds	r3, #50	@ 0x32
 8004724:	4a07      	ldr	r2, [pc, #28]	@ (8004744 <UART_SetConfig+0x118>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	095b      	lsrs	r3, r3, #5
 800472c:	f003 020f 	and.w	r2, r3, #15
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	440a      	add	r2, r1
 8004736:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004738:	bf00      	nop
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40013800 	.word	0x40013800
 8004744:	51eb851f 	.word	0x51eb851f

08004748 <memset>:
 8004748:	4603      	mov	r3, r0
 800474a:	4402      	add	r2, r0
 800474c:	4293      	cmp	r3, r2
 800474e:	d100      	bne.n	8004752 <memset+0xa>
 8004750:	4770      	bx	lr
 8004752:	f803 1b01 	strb.w	r1, [r3], #1
 8004756:	e7f9      	b.n	800474c <memset+0x4>

08004758 <__libc_init_array>:
 8004758:	b570      	push	{r4, r5, r6, lr}
 800475a:	2600      	movs	r6, #0
 800475c:	4d0c      	ldr	r5, [pc, #48]	@ (8004790 <__libc_init_array+0x38>)
 800475e:	4c0d      	ldr	r4, [pc, #52]	@ (8004794 <__libc_init_array+0x3c>)
 8004760:	1b64      	subs	r4, r4, r5
 8004762:	10a4      	asrs	r4, r4, #2
 8004764:	42a6      	cmp	r6, r4
 8004766:	d109      	bne.n	800477c <__libc_init_array+0x24>
 8004768:	f000 f81a 	bl	80047a0 <_init>
 800476c:	2600      	movs	r6, #0
 800476e:	4d0a      	ldr	r5, [pc, #40]	@ (8004798 <__libc_init_array+0x40>)
 8004770:	4c0a      	ldr	r4, [pc, #40]	@ (800479c <__libc_init_array+0x44>)
 8004772:	1b64      	subs	r4, r4, r5
 8004774:	10a4      	asrs	r4, r4, #2
 8004776:	42a6      	cmp	r6, r4
 8004778:	d105      	bne.n	8004786 <__libc_init_array+0x2e>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004780:	4798      	blx	r3
 8004782:	3601      	adds	r6, #1
 8004784:	e7ee      	b.n	8004764 <__libc_init_array+0xc>
 8004786:	f855 3b04 	ldr.w	r3, [r5], #4
 800478a:	4798      	blx	r3
 800478c:	3601      	adds	r6, #1
 800478e:	e7f2      	b.n	8004776 <__libc_init_array+0x1e>
 8004790:	080047e4 	.word	0x080047e4
 8004794:	080047e4 	.word	0x080047e4
 8004798:	080047e4 	.word	0x080047e4
 800479c:	080047e8 	.word	0x080047e8

080047a0 <_init>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr

080047ac <_fini>:
 80047ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ae:	bf00      	nop
 80047b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047b2:	bc08      	pop	{r3}
 80047b4:	469e      	mov	lr, r3
 80047b6:	4770      	bx	lr
