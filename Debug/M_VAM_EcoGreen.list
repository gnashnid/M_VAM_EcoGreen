
M_VAM_EcoGreen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080048e4  080048e4  000058e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004910  08004910  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004910  08004910  0000600c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004910  08004910  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004910  08004910  00005910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004914  08004914  00005914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004918  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  2000000c  08004924  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004924  000061d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e776  00000000  00000000  00006035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021d7  00000000  00000000  000147ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00016988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aea  00000000  00000000  00017780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001835d  00000000  00000000  0001826a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5f5  00000000  00000000  000305c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d4e1  00000000  00000000  0003fbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd09d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a58  00000000  00000000  000cd0e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000d0b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080048cc 	.word	0x080048cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080048cc 	.word	0x080048cc

0800014c <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	460b      	mov	r3, r1
 8000158:	71bb      	strb	r3, [r7, #6]
 800015a:	4613      	mov	r3, r2
 800015c:	717b      	strb	r3, [r7, #5]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	b29a      	uxth	r2, r3
 8000162:	79bb      	ldrb	r3, [r7, #6]
 8000164:	b29b      	uxth	r3, r3
 8000166:	4413      	add	r3, r2
 8000168:	b29a      	uxth	r2, r3
 800016a:	797b      	ldrb	r3, [r7, #5]
 800016c:	b29b      	uxth	r3, r3
 800016e:	4413      	add	r3, r2
 8000170:	b29b      	uxth	r3, r3
 8000172:	f203 1305 	addw	r3, r3, #261	@ 0x105
 8000176:	82fb      	strh	r3, [r7, #22]
	Checksum = 0-Checksum;
 8000178:	8afb      	ldrh	r3, [r7, #22]
 800017a:	425b      	negs	r3, r3
 800017c:	82fb      	strh	r3, [r7, #22]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 800017e:	237e      	movs	r3, #126	@ 0x7e
 8000180:	733b      	strb	r3, [r7, #12]
 8000182:	23ff      	movs	r3, #255	@ 0xff
 8000184:	737b      	strb	r3, [r7, #13]
 8000186:	2306      	movs	r3, #6
 8000188:	73bb      	strb	r3, [r7, #14]
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	73fb      	strb	r3, [r7, #15]
 800018e:	2300      	movs	r3, #0
 8000190:	743b      	strb	r3, [r7, #16]
 8000192:	79bb      	ldrb	r3, [r7, #6]
 8000194:	747b      	strb	r3, [r7, #17]
 8000196:	797b      	ldrb	r3, [r7, #5]
 8000198:	74bb      	strb	r3, [r7, #18]
 800019a:	8afb      	ldrh	r3, [r7, #22]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	b29b      	uxth	r3, r3
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	74fb      	strb	r3, [r7, #19]
 80001a4:	8afb      	ldrh	r3, [r7, #22]
 80001a6:	b2db      	uxtb	r3, r3
 80001a8:	753b      	strb	r3, [r7, #20]
 80001aa:	23ef      	movs	r3, #239	@ 0xef
 80001ac:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 80001ae:	f107 010c 	add.w	r1, r7, #12
 80001b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001b6:	220a      	movs	r2, #10
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <Send_cmd+0x7c>)
 80001ba:	f003 fb7f 	bl	80038bc <HAL_UART_Transmit>
}
 80001be:	bf00      	nop
 80001c0:	3718      	adds	r7, #24
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd80      	pop	{r7, pc}
 80001c6:	bf00      	nop
 80001c8:	200000a4 	.word	0x200000a4

080001cc <DF_Init>:
  HAL_Delay(200);
}


void DF_Init (uint8_t volume)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	4603      	mov	r3, r0
 80001d4:	71fb      	strb	r3, [r7, #7]
	Send_cmd(0x3F, 0x00, Source);
 80001d6:	2202      	movs	r2, #2
 80001d8:	2100      	movs	r1, #0
 80001da:	203f      	movs	r0, #63	@ 0x3f
 80001dc:	f7ff ffb6 	bl	800014c <Send_cmd>
	HAL_Delay(200);
 80001e0:	20c8      	movs	r0, #200	@ 0xc8
 80001e2:	f000 ffc7 	bl	8001174 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	461a      	mov	r2, r3
 80001ea:	2100      	movs	r1, #0
 80001ec:	2006      	movs	r0, #6
 80001ee:	f7ff ffad 	bl	800014c <Send_cmd>
	HAL_Delay(500);
 80001f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001f6:	f000 ffbd 	bl	8001174 <HAL_Delay>
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}

08000202 <DF_Play>:
		while (HAL_GPIO_ReadPin(Next_Port, Next_Key));
		DF_Next();
	}
}
void DF_Play(uint16_t data)
{
 8000202:	b580      	push	{r7, lr}
 8000204:	b082      	sub	sp, #8
 8000206:	af00      	add	r7, sp, #0
 8000208:	4603      	mov	r3, r0
 800020a:	80fb      	strh	r3, [r7, #6]
  Send_cmd(0x03, (data>>8)&0xFF, data&0xFF);
 800020c:	88fb      	ldrh	r3, [r7, #6]
 800020e:	0a1b      	lsrs	r3, r3, #8
 8000210:	b29b      	uxth	r3, r3
 8000212:	b2db      	uxtb	r3, r3
 8000214:	88fa      	ldrh	r2, [r7, #6]
 8000216:	b2d2      	uxtb	r2, r2
 8000218:	4619      	mov	r1, r3
 800021a:	2003      	movs	r0, #3
 800021c:	f7ff ff96 	bl	800014c <Send_cmd>
  HAL_Delay(200);
 8000220:	20c8      	movs	r0, #200	@ 0xc8
 8000222:	f000 ffa7 	bl	8001174 <HAL_Delay>
}
 8000226:	bf00      	nop
 8000228:	3708      	adds	r7, #8
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000238:	4b6c      	ldr	r3, [pc, #432]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800023a:	4a6d      	ldr	r2, [pc, #436]	@ (80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800023c:	2100      	movs	r1, #0
 800023e:	6878      	ldr	r0, [r7, #4]
 8000240:	f001 f9c4 	bl	80015cc <HAL_CAN_GetRxMessage>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d001      	beq.n	800024e <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		HAL_NVIC_SystemReset();
 800024a:	f001 fe40 	bl	8001ece <HAL_NVIC_SystemReset>
	}
	read_speed = true;
 800024e:	4b69      	ldr	r3, [pc, #420]	@ (80003f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000250:	2201      	movs	r2, #1
 8000252:	701a      	strb	r2, [r3, #0]
	if (RxHeader.StdId == 0x501)
 8000254:	4b66      	ldr	r3, [pc, #408]	@ (80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f240 5201 	movw	r2, #1281	@ 0x501
 800025c:	4293      	cmp	r3, r2
 800025e:	d150      	bne.n	8000302 <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
	{
		if ((RxData[0] & 0x04) == 0x04)
 8000260:	4b62      	ldr	r3, [pc, #392]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	f003 0304 	and.w	r3, r3, #4
 8000268:	2b00      	cmp	r3, #0
 800026a:	f000 80bb 	beq.w	80003e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
		{
			if (RxData[2] == 0x07)
 800026e:	4b5f      	ldr	r3, [pc, #380]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000270:	789b      	ldrb	r3, [r3, #2]
 8000272:	2b07      	cmp	r3, #7
 8000274:	f040 80b6 	bne.w	80003e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
			{
				if (RxData[2] |= rxDataSave[2])
 8000278:	4b5c      	ldr	r3, [pc, #368]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800027a:	789a      	ldrb	r2, [r3, #2]
 800027c:	4b5e      	ldr	r3, [pc, #376]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 800027e:	789b      	ldrb	r3, [r3, #2]
 8000280:	4313      	orrs	r3, r2
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b59      	ldr	r3, [pc, #356]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000286:	709a      	strb	r2, [r3, #2]
 8000288:	4b58      	ldr	r3, [pc, #352]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800028a:	789b      	ldrb	r3, [r3, #2]
 800028c:	2b00      	cmp	r3, #0
 800028e:	f000 80a9 	beq.w	80003e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
				{
					rxDataSave[2] = RxData[2];
 8000292:	4b56      	ldr	r3, [pc, #344]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000294:	789a      	ldrb	r2, [r3, #2]
 8000296:	4b58      	ldr	r3, [pc, #352]	@ (80003f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000298:	709a      	strb	r2, [r3, #2]
					for (uint8_t i=0; i<5; i++)
 800029a:	2300      	movs	r3, #0
 800029c:	73fb      	strb	r3, [r7, #15]
 800029e:	e02c      	b.n	80002fa <HAL_CAN_RxFifo0MsgPendingCallback+0xca>
					{
						if (speakerState[i][0] == 0)
 80002a0:	7bfb      	ldrb	r3, [r7, #15]
 80002a2:	4a56      	ldr	r2, [pc, #344]	@ (80003fc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 80002a4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d123      	bne.n	80002f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>
						{
//							speakerButton[i][0] = ;
							if ((RxData[0] & 0x04) ==  0x04)
 80002ac:	4b4f      	ldr	r3, [pc, #316]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	f003 0304 	and.w	r3, r3, #4
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d006      	beq.n	80002c6 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
							{
								speakerButton[i][1] = 1;
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	4a51      	ldr	r2, [pc, #324]	@ (8000400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	4413      	add	r3, r2
 80002c0:	2201      	movs	r2, #1
 80002c2:	705a      	strb	r2, [r3, #1]
 80002c4:	e005      	b.n	80002d2 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
							} else
							{
								speakerButton[i][1] = 0;
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	4a4d      	ldr	r2, [pc, #308]	@ (8000400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	4413      	add	r3, r2
 80002ce:	2200      	movs	r2, #0
 80002d0:	705a      	strb	r2, [r3, #1]
							}
							speakerButton[i][2] = button[1];
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
 80002d4:	4a4b      	ldr	r2, [pc, #300]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80002d6:	7851      	ldrb	r1, [r2, #1]
 80002d8:	4a49      	ldr	r2, [pc, #292]	@ (8000400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	4413      	add	r3, r2
 80002de:	460a      	mov	r2, r1
 80002e0:	709a      	strb	r2, [r3, #2]
							speakerButton[i][3] = button[2];
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	4a47      	ldr	r2, [pc, #284]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80002e6:	7891      	ldrb	r1, [r2, #2]
 80002e8:	4a45      	ldr	r2, [pc, #276]	@ (8000400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	4413      	add	r3, r2
 80002ee:	460a      	mov	r2, r1
 80002f0:	70da      	strb	r2, [r3, #3]
							return;
 80002f2:	e077      	b.n	80003e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
					for (uint8_t i=0; i<5; i++)
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
 80002f6:	3301      	adds	r3, #1
 80002f8:	73fb      	strb	r3, [r7, #15]
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	2b04      	cmp	r3, #4
 80002fe:	d9cf      	bls.n	80002a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>
 8000300:	e070      	b.n	80003e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
//			speakDoorOpen = false;
//			speakDoorClose = false;
//			speakDiriectionUp = false;
//			speakDirectionDown = false;
//		}
	} else if (RxHeader.StdId == 0x502)
 8000302:	4b3b      	ldr	r3, [pc, #236]	@ (80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f240 5202 	movw	r2, #1282	@ 0x502
 800030a:	4293      	cmp	r3, r2
 800030c:	d108      	bne.n	8000320 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>
	{
		oneFloor = RxData[2];
 800030e:	4b37      	ldr	r3, [pc, #220]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000310:	789a      	ldrb	r2, [r3, #2]
 8000312:	4b3d      	ldr	r3, [pc, #244]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000314:	701a      	strb	r2, [r3, #0]
		tenFloor = RxData[1];
 8000316:	4b35      	ldr	r3, [pc, #212]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000318:	785a      	ldrb	r2, [r3, #1]
 800031a:	4b3c      	ldr	r3, [pc, #240]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800031c:	701a      	strb	r2, [r3, #0]
 800031e:	e061      	b.n	80003e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
	} else if (RxHeader.StdId == 0x503)
 8000320:	4b33      	ldr	r3, [pc, #204]	@ (80003f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f240 5203 	movw	r2, #1283	@ 0x503
 8000328:	4293      	cmp	r3, r2
 800032a:	d15b      	bne.n	80003e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
	{
		if ((RxData[0] & 0x01) ==  0x01)
 800032c:	4b2f      	ldr	r3, [pc, #188]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	2b00      	cmp	r3, #0
 8000336:	d055      	beq.n	80003e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
		{
			if (RxData[0] != button[0] || RxData[2] != button[1] || RxData[3] != button[2])
 8000338:	4b2c      	ldr	r3, [pc, #176]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800033a:	781a      	ldrb	r2, [r3, #0]
 800033c:	4b31      	ldr	r3, [pc, #196]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	429a      	cmp	r2, r3
 8000342:	d10b      	bne.n	800035c <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>
 8000344:	4b29      	ldr	r3, [pc, #164]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000346:	789a      	ldrb	r2, [r3, #2]
 8000348:	4b2e      	ldr	r3, [pc, #184]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 800034a:	785b      	ldrb	r3, [r3, #1]
 800034c:	429a      	cmp	r2, r3
 800034e:	d105      	bne.n	800035c <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>
 8000350:	4b26      	ldr	r3, [pc, #152]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000352:	78da      	ldrb	r2, [r3, #3]
 8000354:	4b2b      	ldr	r3, [pc, #172]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000356:	789b      	ldrb	r3, [r3, #2]
 8000358:	429a      	cmp	r2, r3
 800035a:	d043      	beq.n	80003e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
			{
				button[0] = RxData[0];
 800035c:	4b23      	ldr	r3, [pc, #140]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800035e:	781a      	ldrb	r2, [r3, #0]
 8000360:	4b28      	ldr	r3, [pc, #160]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000362:	701a      	strb	r2, [r3, #0]
				button[1] = RxData[2];
 8000364:	4b21      	ldr	r3, [pc, #132]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000366:	789a      	ldrb	r2, [r3, #2]
 8000368:	4b26      	ldr	r3, [pc, #152]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 800036a:	705a      	strb	r2, [r3, #1]
				button[2] = RxData[3];
 800036c:	4b1f      	ldr	r3, [pc, #124]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800036e:	78da      	ldrb	r2, [r3, #3]
 8000370:	4b24      	ldr	r3, [pc, #144]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000372:	709a      	strb	r2, [r3, #2]
				for (uint8_t i=0; i<5; i++)
 8000374:	2300      	movs	r3, #0
 8000376:	73bb      	strb	r3, [r7, #14]
 8000378:	e031      	b.n	80003de <HAL_CAN_RxFifo0MsgPendingCallback+0x1ae>
				{
					if (speakerButton[i][0] == 0)
 800037a:	7bbb      	ldrb	r3, [r7, #14]
 800037c:	4a20      	ldr	r2, [pc, #128]	@ (8000400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800037e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d128      	bne.n	80003d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>
					{
						speakerButton[i][0] = 1;
 8000386:	7bbb      	ldrb	r3, [r7, #14]
 8000388:	4a1d      	ldr	r2, [pc, #116]	@ (8000400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800038a:	2101      	movs	r1, #1
 800038c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
						if ((RxData[0] & 0x04) ==  0x04)
 8000390:	4b16      	ldr	r3, [pc, #88]	@ (80003ec <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	f003 0304 	and.w	r3, r3, #4
 8000398:	2b00      	cmp	r3, #0
 800039a:	d006      	beq.n	80003aa <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
						{
							speakerButton[i][1] = 1;
 800039c:	7bbb      	ldrb	r3, [r7, #14]
 800039e:	4a18      	ldr	r2, [pc, #96]	@ (8000400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	4413      	add	r3, r2
 80003a4:	2201      	movs	r2, #1
 80003a6:	705a      	strb	r2, [r3, #1]
 80003a8:	e005      	b.n	80003b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x186>
						} else
						{
							speakerButton[i][1] = 0;
 80003aa:	7bbb      	ldrb	r3, [r7, #14]
 80003ac:	4a14      	ldr	r2, [pc, #80]	@ (8000400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	4413      	add	r3, r2
 80003b2:	2200      	movs	r2, #0
 80003b4:	705a      	strb	r2, [r3, #1]
						}
						speakerButton[i][2] = button[1];
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	4a12      	ldr	r2, [pc, #72]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80003ba:	7851      	ldrb	r1, [r2, #1]
 80003bc:	4a10      	ldr	r2, [pc, #64]	@ (8000400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	4413      	add	r3, r2
 80003c2:	460a      	mov	r2, r1
 80003c4:	709a      	strb	r2, [r3, #2]
						speakerButton[i][3] = button[2];
 80003c6:	7bbb      	ldrb	r3, [r7, #14]
 80003c8:	4a0e      	ldr	r2, [pc, #56]	@ (8000404 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 80003ca:	7891      	ldrb	r1, [r2, #2]
 80003cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000400 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	4413      	add	r3, r2
 80003d2:	460a      	mov	r2, r1
 80003d4:	70da      	strb	r2, [r3, #3]
						return;
 80003d6:	e005      	b.n	80003e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>
				for (uint8_t i=0; i<5; i++)
 80003d8:	7bbb      	ldrb	r3, [r7, #14]
 80003da:	3301      	adds	r3, #1
 80003dc:	73bb      	strb	r3, [r7, #14]
 80003de:	7bbb      	ldrb	r3, [r7, #14]
 80003e0:	2b04      	cmp	r3, #4
 80003e2:	d9ca      	bls.n	800037a <HAL_CAN_RxFifo0MsgPendingCallback+0x14a>
					}
				}
			}
		}
	}
}
 80003e4:	3710      	adds	r7, #16
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000014c 	.word	0x2000014c
 80003f0:	20000130 	.word	0x20000130
 80003f4:	200001c4 	.word	0x200001c4
 80003f8:	20000154 	.word	0x20000154
 80003fc:	200001a8 	.word	0x200001a8
 8000400:	20000194 	.word	0x20000194
 8000404:	200001b4 	.word	0x200001b4
 8000408:	2000018e 	.word	0x2000018e
 800040c:	2000018f 	.word	0x2000018f

08000410 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	460b      	mov	r3, r1
 800041a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == huart2.Instance)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681a      	ldr	r2, [r3, #0]
 8000420:	4b15      	ldr	r3, [pc, #84]	@ (8000478 <HAL_UARTEx_RxEventCallback+0x68>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	429a      	cmp	r2, r3
 8000426:	d122      	bne.n	800046e <HAL_UARTEx_RxEventCallback+0x5e>
	{
		HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart_data, Size);
 8000428:	887b      	ldrh	r3, [r7, #2]
 800042a:	461a      	mov	r2, r3
 800042c:	4913      	ldr	r1, [pc, #76]	@ (800047c <HAL_UARTEx_RxEventCallback+0x6c>)
 800042e:	4812      	ldr	r0, [pc, #72]	@ (8000478 <HAL_UARTEx_RxEventCallback+0x68>)
 8000430:	f003 facf 	bl	80039d2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000434:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <HAL_UARTEx_RxEventCallback+0x70>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	4b11      	ldr	r3, [pc, #68]	@ (8000480 <HAL_UARTEx_RxEventCallback+0x70>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f022 0204 	bic.w	r2, r2, #4
 8000442:	601a      	str	r2, [r3, #0]
		if (uart_data[3] == 0x3D || uart_data[3] == 0x3F)
 8000444:	4b0d      	ldr	r3, [pc, #52]	@ (800047c <HAL_UARTEx_RxEventCallback+0x6c>)
 8000446:	78db      	ldrb	r3, [r3, #3]
 8000448:	2b3d      	cmp	r3, #61	@ 0x3d
 800044a:	d003      	beq.n	8000454 <HAL_UARTEx_RxEventCallback+0x44>
 800044c:	4b0b      	ldr	r3, [pc, #44]	@ (800047c <HAL_UARTEx_RxEventCallback+0x6c>)
 800044e:	78db      	ldrb	r3, [r3, #3]
 8000450:	2b3f      	cmp	r3, #63	@ 0x3f
 8000452:	d10c      	bne.n	800046e <HAL_UARTEx_RxEventCallback+0x5e>
		{
			feedbackSpeaker = (uart_data[5]<<8)|uart_data[6];
 8000454:	4b09      	ldr	r3, [pc, #36]	@ (800047c <HAL_UARTEx_RxEventCallback+0x6c>)
 8000456:	795b      	ldrb	r3, [r3, #5]
 8000458:	b21b      	sxth	r3, r3
 800045a:	021b      	lsls	r3, r3, #8
 800045c:	b21a      	sxth	r2, r3
 800045e:	4b07      	ldr	r3, [pc, #28]	@ (800047c <HAL_UARTEx_RxEventCallback+0x6c>)
 8000460:	799b      	ldrb	r3, [r3, #6]
 8000462:	b21b      	sxth	r3, r3
 8000464:	4313      	orrs	r3, r2
 8000466:	b21b      	sxth	r3, r3
 8000468:	b29a      	uxth	r2, r3
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <HAL_UARTEx_RxEventCallback+0x74>)
 800046c:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	200000a4 	.word	0x200000a4
 800047c:	2000015c 	.word	0x2000015c
 8000480:	200000ec 	.word	0x200000ec
 8000484:	200001c6 	.word	0x200001c6

08000488 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4b05      	ldr	r3, [pc, #20]	@ (80004ac <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	429a      	cmp	r2, r3
 800049a:	d102      	bne.n	80004a2 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800049c:	4804      	ldr	r0, [pc, #16]	@ (80004b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800049e:	f002 f9a9 	bl	80027f4 <HAL_IWDG_Refresh>
	}
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2000005c 	.word	0x2000005c
 80004b0:	20000050 	.word	0x20000050

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	b089      	sub	sp, #36	@ 0x24
 80004b8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ba:	f000 fdf9 	bl	80010b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004be:	f000 f96f 	bl	80007a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  __HAL_DBGMCU_FREEZE_IWDG();
 80004c2:	4b9e      	ldr	r3, [pc, #632]	@ (800073c <main+0x288>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	4a9d      	ldr	r2, [pc, #628]	@ (800073c <main+0x288>)
 80004c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004cc:	6053      	str	r3, [r2, #4]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ce:	f000 fa97 	bl	8000a00 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d2:	f000 fa77 	bl	80009c4 <MX_DMA_Init>
  MX_CAN_Init();
 80004d6:	f000 f9ab 	bl	8000830 <MX_CAN_Init>
  MX_USART2_UART_Init();
 80004da:	f000 fa49 	bl	8000970 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004de:	f000 f9f9 	bl	80008d4 <MX_TIM3_Init>
  MX_IWDG_Init();
 80004e2:	f000 f9dd 	bl	80008a0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80004e6:	4896      	ldr	r0, [pc, #600]	@ (8000740 <main+0x28c>)
 80004e8:	f002 fdf6 	bl	80030d8 <HAL_TIM_Base_Start_IT>
  while (!detect_speed)
 80004ec:	e050      	b.n	8000590 <main+0xdc>
  {
	  if (!read_speed)
 80004ee:	4b95      	ldr	r3, [pc, #596]	@ (8000744 <main+0x290>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	f083 0301 	eor.w	r3, r3, #1
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d032      	beq.n	8000562 <main+0xae>
	  {
		  if (abs(HAL_GetTick() - timer) > 500)
 80004fc:	f000 fe30 	bl	8001160 <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	4b91      	ldr	r3, [pc, #580]	@ (8000748 <main+0x294>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	bfb8      	it	lt
 800050c:	425b      	neglt	r3, r3
 800050e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000512:	dd3d      	ble.n	8000590 <main+0xdc>
		  {
			  timer = HAL_GetTick();
 8000514:	f000 fe24 	bl	8001160 <HAL_GetTick>
 8000518:	4603      	mov	r3, r0
 800051a:	4a8b      	ldr	r2, [pc, #556]	@ (8000748 <main+0x294>)
 800051c:	6013      	str	r3, [r2, #0]
			  speed ++;
 800051e:	4b8b      	ldr	r3, [pc, #556]	@ (800074c <main+0x298>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	3301      	adds	r3, #1
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b89      	ldr	r3, [pc, #548]	@ (800074c <main+0x298>)
 8000528:	701a      	strb	r2, [r3, #0]
			  if (speed > 3)
 800052a:	4b88      	ldr	r3, [pc, #544]	@ (800074c <main+0x298>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	2b03      	cmp	r3, #3
 8000530:	d902      	bls.n	8000538 <main+0x84>
			  {
				  speed = 1;
 8000532:	4b86      	ldr	r3, [pc, #536]	@ (800074c <main+0x298>)
 8000534:	2201      	movs	r2, #1
 8000536:	701a      	strb	r2, [r3, #0]
			  }
			  Set_speed_can(hcan, detect_speed, speed);
 8000538:	4b85      	ldr	r3, [pc, #532]	@ (8000750 <main+0x29c>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4a83      	ldr	r2, [pc, #524]	@ (800074c <main+0x298>)
 800053e:	7812      	ldrb	r2, [r2, #0]
 8000540:	4e84      	ldr	r6, [pc, #528]	@ (8000754 <main+0x2a0>)
 8000542:	9207      	str	r2, [sp, #28]
 8000544:	9306      	str	r3, [sp, #24]
 8000546:	466d      	mov	r5, sp
 8000548:	f106 0410 	add.w	r4, r6, #16
 800054c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800054e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000550:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000554:	e885 0003 	stmia.w	r5, {r0, r1}
 8000558:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800055c:	f000 fa9c 	bl	8000a98 <Set_speed_can>
 8000560:	e016      	b.n	8000590 <main+0xdc>
		  }
	  } else
	  {
		  detect_speed = true;
 8000562:	4b7b      	ldr	r3, [pc, #492]	@ (8000750 <main+0x29c>)
 8000564:	2201      	movs	r2, #1
 8000566:	701a      	strb	r2, [r3, #0]
		  Set_speed_can(hcan, detect_speed, speed);
 8000568:	4b79      	ldr	r3, [pc, #484]	@ (8000750 <main+0x29c>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4a77      	ldr	r2, [pc, #476]	@ (800074c <main+0x298>)
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	4e78      	ldr	r6, [pc, #480]	@ (8000754 <main+0x2a0>)
 8000572:	9207      	str	r2, [sp, #28]
 8000574:	9306      	str	r3, [sp, #24]
 8000576:	466d      	mov	r5, sp
 8000578:	f106 0410 	add.w	r4, r6, #16
 800057c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800057e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000580:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000584:	e885 0003 	stmia.w	r5, {r0, r1}
 8000588:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800058c:	f000 fa84 	bl	8000a98 <Set_speed_can>
  while (!detect_speed)
 8000590:	4b6f      	ldr	r3, [pc, #444]	@ (8000750 <main+0x29c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	f083 0301 	eor.w	r3, r3, #1
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d1a7      	bne.n	80004ee <main+0x3a>
	  }
  }
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart_data, 50);
 800059e:	2232      	movs	r2, #50	@ 0x32
 80005a0:	496d      	ldr	r1, [pc, #436]	@ (8000758 <main+0x2a4>)
 80005a2:	486e      	ldr	r0, [pc, #440]	@ (800075c <main+0x2a8>)
 80005a4:	f003 fa15 	bl	80039d2 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80005a8:	4b6d      	ldr	r3, [pc, #436]	@ (8000760 <main+0x2ac>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	681a      	ldr	r2, [r3, #0]
 80005ae:	4b6c      	ldr	r3, [pc, #432]	@ (8000760 <main+0x2ac>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f022 0204 	bic.w	r2, r2, #4
 80005b6:	601a      	str	r2, [r3, #0]
  while (feedbackSpeaker != 0x02)
 80005b8:	e002      	b.n	80005c0 <main+0x10c>
  HAL_Delay(100);
 80005ba:	2064      	movs	r0, #100	@ 0x64
 80005bc:	f000 fdda 	bl	8001174 <HAL_Delay>
  while (feedbackSpeaker != 0x02)
 80005c0:	4b68      	ldr	r3, [pc, #416]	@ (8000764 <main+0x2b0>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d1f8      	bne.n	80005ba <main+0x106>
  feedbackSpeaker = 0;
 80005c8:	4b66      	ldr	r3, [pc, #408]	@ (8000764 <main+0x2b0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	801a      	strh	r2, [r3, #0]
  DF_Init(30);
 80005ce:	201e      	movs	r0, #30
 80005d0:	f7ff fdfc 	bl	80001cc <DF_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  speaker_push_button(speakerButton);
 80005d4:	4864      	ldr	r0, [pc, #400]	@ (8000768 <main+0x2b4>)
 80005d6:	f000 fb63 	bl	8000ca0 <speaker_push_button>

	  if (speakFloor)
 80005da:	4b64      	ldr	r3, [pc, #400]	@ (800076c <main+0x2b8>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d016      	beq.n	8000610 <main+0x15c>
	  {
		  if (!isSpeakFloor)
 80005e2:	4b63      	ldr	r3, [pc, #396]	@ (8000770 <main+0x2bc>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	f083 0301 	eor.w	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d012      	beq.n	8000616 <main+0x162>
		  {
//			  floorNow = speaker_floor_funtion(tenFloor, oneFloor);
			  DF_Play(floorNow);
 80005f0:	4b60      	ldr	r3, [pc, #384]	@ (8000774 <main+0x2c0>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fe04 	bl	8000202 <DF_Play>
			  while (uart_data[6] != floorNow);
 80005fa:	bf00      	nop
 80005fc:	4b56      	ldr	r3, [pc, #344]	@ (8000758 <main+0x2a4>)
 80005fe:	799a      	ldrb	r2, [r3, #6]
 8000600:	4b5c      	ldr	r3, [pc, #368]	@ (8000774 <main+0x2c0>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	d1f9      	bne.n	80005fc <main+0x148>
			  isSpeakFloor = true;
 8000608:	4b59      	ldr	r3, [pc, #356]	@ (8000770 <main+0x2bc>)
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	e002      	b.n	8000616 <main+0x162>
		  }
	  } else
	  {
		  isSpeakFloor = false;
 8000610:	4b57      	ldr	r3, [pc, #348]	@ (8000770 <main+0x2bc>)
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
	  }
	  if (speakDoorOpen) // door open
 8000616:	4b58      	ldr	r3, [pc, #352]	@ (8000778 <main+0x2c4>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d012      	beq.n	8000644 <main+0x190>
	  {
		  if (!isSpeakDoorOpen)
 800061e:	4b57      	ldr	r3, [pc, #348]	@ (800077c <main+0x2c8>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	f083 0301 	eor.w	r3, r3, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	2b00      	cmp	r3, #0
 800062a:	d00e      	beq.n	800064a <main+0x196>
		  {
			  DF_Play(35);
 800062c:	2023      	movs	r0, #35	@ 0x23
 800062e:	f7ff fde8 	bl	8000202 <DF_Play>
			  while (uart_data[6] != 35);
 8000632:	bf00      	nop
 8000634:	4b48      	ldr	r3, [pc, #288]	@ (8000758 <main+0x2a4>)
 8000636:	799b      	ldrb	r3, [r3, #6]
 8000638:	2b23      	cmp	r3, #35	@ 0x23
 800063a:	d1fb      	bne.n	8000634 <main+0x180>
			  isSpeakDoorOpen = true;
 800063c:	4b4f      	ldr	r3, [pc, #316]	@ (800077c <main+0x2c8>)
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
 8000642:	e002      	b.n	800064a <main+0x196>
		  }
	  } else
	  {
		  isSpeakDoorOpen = false;
 8000644:	4b4d      	ldr	r3, [pc, #308]	@ (800077c <main+0x2c8>)
 8000646:	2200      	movs	r2, #0
 8000648:	701a      	strb	r2, [r3, #0]
	  }
	  if (speakDoorClose) // door close
 800064a:	4b4d      	ldr	r3, [pc, #308]	@ (8000780 <main+0x2cc>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d012      	beq.n	8000678 <main+0x1c4>
	  {
		  if (!isSpeakDoorClose)
 8000652:	4b4c      	ldr	r3, [pc, #304]	@ (8000784 <main+0x2d0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	f083 0301 	eor.w	r3, r3, #1
 800065a:	b2db      	uxtb	r3, r3
 800065c:	2b00      	cmp	r3, #0
 800065e:	d00e      	beq.n	800067e <main+0x1ca>
		  {
			  DF_Play(36);
 8000660:	2024      	movs	r0, #36	@ 0x24
 8000662:	f7ff fdce 	bl	8000202 <DF_Play>
			  while (uart_data[6] != 36);
 8000666:	bf00      	nop
 8000668:	4b3b      	ldr	r3, [pc, #236]	@ (8000758 <main+0x2a4>)
 800066a:	799b      	ldrb	r3, [r3, #6]
 800066c:	2b24      	cmp	r3, #36	@ 0x24
 800066e:	d1fb      	bne.n	8000668 <main+0x1b4>
			  isSpeakDoorClose = true;
 8000670:	4b44      	ldr	r3, [pc, #272]	@ (8000784 <main+0x2d0>)
 8000672:	2201      	movs	r2, #1
 8000674:	701a      	strb	r2, [r3, #0]
 8000676:	e002      	b.n	800067e <main+0x1ca>
		  }
	  } else
	  {
		  isSpeakDoorClose = false;
 8000678:	4b42      	ldr	r3, [pc, #264]	@ (8000784 <main+0x2d0>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
	  }
	  if (speakDiriectionUp) // direction up
 800067e:	4b42      	ldr	r3, [pc, #264]	@ (8000788 <main+0x2d4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d012      	beq.n	80006ac <main+0x1f8>
	  {
		  if (!isSpeakDiriectionUp)
 8000686:	4b41      	ldr	r3, [pc, #260]	@ (800078c <main+0x2d8>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	f083 0301 	eor.w	r3, r3, #1
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	d00e      	beq.n	80006b2 <main+0x1fe>
		  {
			  DF_Play(37);
 8000694:	2025      	movs	r0, #37	@ 0x25
 8000696:	f7ff fdb4 	bl	8000202 <DF_Play>
			  while (uart_data[6] != 37);
 800069a:	bf00      	nop
 800069c:	4b2e      	ldr	r3, [pc, #184]	@ (8000758 <main+0x2a4>)
 800069e:	799b      	ldrb	r3, [r3, #6]
 80006a0:	2b25      	cmp	r3, #37	@ 0x25
 80006a2:	d1fb      	bne.n	800069c <main+0x1e8>
			  isSpeakDiriectionUp = true;
 80006a4:	4b39      	ldr	r3, [pc, #228]	@ (800078c <main+0x2d8>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	701a      	strb	r2, [r3, #0]
 80006aa:	e002      	b.n	80006b2 <main+0x1fe>
		  }
	  } else
	  {
		  isSpeakDiriectionUp = false;
 80006ac:	4b37      	ldr	r3, [pc, #220]	@ (800078c <main+0x2d8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
	  }
	  if (speakDirectionDown) // direction dowwn
 80006b2:	4b37      	ldr	r3, [pc, #220]	@ (8000790 <main+0x2dc>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d012      	beq.n	80006e0 <main+0x22c>
	  {
		  if (!isSpeakDirectionDown)
 80006ba:	4b36      	ldr	r3, [pc, #216]	@ (8000794 <main+0x2e0>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	f083 0301 	eor.w	r3, r3, #1
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d00e      	beq.n	80006e6 <main+0x232>
		  {
			  DF_Play(38);
 80006c8:	2026      	movs	r0, #38	@ 0x26
 80006ca:	f7ff fd9a 	bl	8000202 <DF_Play>
			  while (uart_data[6] != 38);
 80006ce:	bf00      	nop
 80006d0:	4b21      	ldr	r3, [pc, #132]	@ (8000758 <main+0x2a4>)
 80006d2:	799b      	ldrb	r3, [r3, #6]
 80006d4:	2b26      	cmp	r3, #38	@ 0x26
 80006d6:	d1fb      	bne.n	80006d0 <main+0x21c>
			  isSpeakDirectionDown = true;
 80006d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000794 <main+0x2e0>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	e002      	b.n	80006e6 <main+0x232>
		  }
	  } else
	  {
		  isSpeakDirectionDown = false;
 80006e0:	4b2c      	ldr	r3, [pc, #176]	@ (8000794 <main+0x2e0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
	  }
	  if (speakFire) // fire
 80006e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <main+0x2e4>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d00e      	beq.n	800070c <main+0x258>
	  {
		  DF_Play(39);
 80006ee:	2027      	movs	r0, #39	@ 0x27
 80006f0:	f7ff fd87 	bl	8000202 <DF_Play>
		  while (uart_data[6] != 39);
 80006f4:	bf00      	nop
 80006f6:	4b18      	ldr	r3, [pc, #96]	@ (8000758 <main+0x2a4>)
 80006f8:	799b      	ldrb	r3, [r3, #6]
 80006fa:	2b27      	cmp	r3, #39	@ 0x27
 80006fc:	d1fb      	bne.n	80006f6 <main+0x242>
		  HAL_Delay(1000);
 80006fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000702:	f000 fd37 	bl	8001174 <HAL_Delay>
		  speakFire = false;
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <main+0x2e4>)
 8000708:	2200      	movs	r2, #0
 800070a:	701a      	strb	r2, [r3, #0]
	  }

	  if (speakOverLoad) // overload
 800070c:	4b23      	ldr	r3, [pc, #140]	@ (800079c <main+0x2e8>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d00e      	beq.n	8000732 <main+0x27e>
	  {
		  DF_Play(40);
 8000714:	2028      	movs	r0, #40	@ 0x28
 8000716:	f7ff fd74 	bl	8000202 <DF_Play>
		  while (uart_data[6] != 40);
 800071a:	bf00      	nop
 800071c:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <main+0x2a4>)
 800071e:	799b      	ldrb	r3, [r3, #6]
 8000720:	2b28      	cmp	r3, #40	@ 0x28
 8000722:	d1fb      	bne.n	800071c <main+0x268>
		  HAL_Delay(1000);
 8000724:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000728:	f000 fd24 	bl	8001174 <HAL_Delay>
		  speakOverLoad = false;
 800072c:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <main+0x2e8>)
 800072e:	2200      	movs	r2, #0
 8000730:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(100);
 8000732:	2064      	movs	r0, #100	@ 0x64
 8000734:	f000 fd1e 	bl	8001174 <HAL_Delay>
	  speaker_push_button(speakerButton);
 8000738:	e74c      	b.n	80005d4 <main+0x120>
 800073a:	bf00      	nop
 800073c:	e0042000 	.word	0xe0042000
 8000740:	2000005c 	.word	0x2000005c
 8000744:	200001c4 	.word	0x200001c4
 8000748:	200001c8 	.word	0x200001c8
 800074c:	20000191 	.word	0x20000191
 8000750:	200001c3 	.word	0x200001c3
 8000754:	20000028 	.word	0x20000028
 8000758:	2000015c 	.word	0x2000015c
 800075c:	200000a4 	.word	0x200000a4
 8000760:	200000ec 	.word	0x200000ec
 8000764:	200001c6 	.word	0x200001c6
 8000768:	20000194 	.word	0x20000194
 800076c:	200001b7 	.word	0x200001b7
 8000770:	200001be 	.word	0x200001be
 8000774:	20000190 	.word	0x20000190
 8000778:	200001b8 	.word	0x200001b8
 800077c:	200001bf 	.word	0x200001bf
 8000780:	200001b9 	.word	0x200001b9
 8000784:	200001c0 	.word	0x200001c0
 8000788:	200001ba 	.word	0x200001ba
 800078c:	200001c1 	.word	0x200001c1
 8000790:	200001bb 	.word	0x200001bb
 8000794:	200001c2 	.word	0x200001c2
 8000798:	200001bc 	.word	0x200001bc
 800079c:	200001bd 	.word	0x200001bd

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b090      	sub	sp, #64	@ 0x40
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	2228      	movs	r2, #40	@ 0x28
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 f860 	bl	8004874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007c2:	2309      	movs	r3, #9
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80007cc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80007d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d2:	2301      	movs	r3, #1
 80007d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007d6:	2301      	movs	r3, #1
 80007d8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007da:	2302      	movs	r3, #2
 80007dc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007e4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80007e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	4618      	mov	r0, r3
 80007f0:	f002 f810 	bl	8002814 <HAL_RCC_OscConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007fa:	f000 faaa 	bl	8000d52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fe:	230f      	movs	r3, #15
 8000800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000802:	2302      	movs	r3, #2
 8000804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800080a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800080e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2102      	movs	r1, #2
 8000818:	4618      	mov	r0, r3
 800081a:	f002 fa7d 	bl	8002d18 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000824:	f000 fa95 	bl	8000d52 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3740      	adds	r7, #64	@ 0x40
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_CAN_Init+0x68>)
 8000836:	4a19      	ldr	r2, [pc, #100]	@ (800089c <MX_CAN_Init+0x6c>)
 8000838:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 36;
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_CAN_Init+0x68>)
 800083c:	2224      	movs	r2, #36	@ 0x24
 800083e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000840:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <MX_CAN_Init+0x68>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_CAN_Init+0x68>)
 8000848:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800084c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_CAN_Init+0x68>)
 8000850:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 8000854:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000856:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <MX_CAN_Init+0x68>)
 8000858:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800085c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_CAN_Init+0x68>)
 8000860:	2200      	movs	r2, #0
 8000862:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_CAN_Init+0x68>)
 8000866:	2201      	movs	r2, #1
 8000868:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_CAN_Init+0x68>)
 800086c:	2200      	movs	r2, #0
 800086e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_CAN_Init+0x68>)
 8000872:	2201      	movs	r2, #1
 8000874:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_CAN_Init+0x68>)
 8000878:	2200      	movs	r2, #0
 800087a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_CAN_Init+0x68>)
 800087e:	2200      	movs	r2, #0
 8000880:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_CAN_Init+0x68>)
 8000884:	f000 fc9a 	bl	80011bc <HAL_CAN_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800088e:	f000 fa60 	bl	8000d52 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000028 	.word	0x20000028
 800089c:	40006400 	.word	0x40006400

080008a0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_IWDG_Init+0x2c>)
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <MX_IWDG_Init+0x30>)
 80008a8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80008aa:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <MX_IWDG_Init+0x2c>)
 80008ac:	2204      	movs	r2, #4
 80008ae:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80008b0:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_IWDG_Init+0x2c>)
 80008b2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80008b6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_IWDG_Init+0x2c>)
 80008ba:	f001 ff57 	bl	800276c <HAL_IWDG_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80008c4:	f000 fa45 	bl	8000d52 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000050 	.word	0x20000050
 80008d0:	40003000 	.word	0x40003000

080008d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <MX_TIM3_Init+0x94>)
 80008f2:	4a1e      	ldr	r2, [pc, #120]	@ (800096c <MX_TIM3_Init+0x98>)
 80008f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35999;
 80008f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <MX_TIM3_Init+0x94>)
 80008f8:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80008fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fe:	4b1a      	ldr	r3, [pc, #104]	@ (8000968 <MX_TIM3_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000904:	4b18      	ldr	r3, [pc, #96]	@ (8000968 <MX_TIM3_Init+0x94>)
 8000906:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800090a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090c:	4b16      	ldr	r3, [pc, #88]	@ (8000968 <MX_TIM3_Init+0x94>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <MX_TIM3_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000918:	4813      	ldr	r0, [pc, #76]	@ (8000968 <MX_TIM3_Init+0x94>)
 800091a:	f002 fb8d 	bl	8003038 <HAL_TIM_Base_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000924:	f000 fa15 	bl	8000d52 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000928:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800092c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800092e:	f107 0308 	add.w	r3, r7, #8
 8000932:	4619      	mov	r1, r3
 8000934:	480c      	ldr	r0, [pc, #48]	@ (8000968 <MX_TIM3_Init+0x94>)
 8000936:	f002 fd11 	bl	800335c <HAL_TIM_ConfigClockSource>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000940:	f000 fa07 	bl	8000d52 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_TIM3_Init+0x94>)
 8000952:	f002 fef3 	bl	800373c <HAL_TIMEx_MasterConfigSynchronization>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800095c:	f000 f9f9 	bl	8000d52 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000005c 	.word	0x2000005c
 800096c:	40000400 	.word	0x40000400

08000970 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000974:	4b11      	ldr	r3, [pc, #68]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 8000976:	4a12      	ldr	r2, [pc, #72]	@ (80009c0 <MX_USART2_UART_Init+0x50>)
 8000978:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 800097c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000980:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000982:	4b0e      	ldr	r3, [pc, #56]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000988:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 8000996:	220c      	movs	r2, #12
 8000998:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099a:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a0:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	@ (80009bc <MX_USART2_UART_Init+0x4c>)
 80009a8:	f002 ff38 	bl	800381c <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009b2:	f000 f9ce 	bl	8000d52 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000a4 	.word	0x200000a4
 80009c0:	40004400 	.word	0x40004400

080009c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ca:	4b0c      	ldr	r3, [pc, #48]	@ (80009fc <MX_DMA_Init+0x38>)
 80009cc:	695b      	ldr	r3, [r3, #20]
 80009ce:	4a0b      	ldr	r2, [pc, #44]	@ (80009fc <MX_DMA_Init+0x38>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6153      	str	r3, [r2, #20]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <MX_DMA_Init+0x38>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2010      	movs	r0, #16
 80009e8:	f001 fa47 	bl	8001e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80009ec:	2010      	movs	r0, #16
 80009ee:	f001 fa60 	bl	8001eb2 <HAL_NVIC_EnableIRQ>

}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a14:	4b1e      	ldr	r3, [pc, #120]	@ (8000a90 <MX_GPIO_Init+0x90>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a1d      	ldr	r2, [pc, #116]	@ (8000a90 <MX_GPIO_Init+0x90>)
 8000a1a:	f043 0320 	orr.w	r3, r3, #32
 8000a1e:	6193      	str	r3, [r2, #24]
 8000a20:	4b1b      	ldr	r3, [pc, #108]	@ (8000a90 <MX_GPIO_Init+0x90>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	f003 0320 	and.w	r3, r3, #32
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2c:	4b18      	ldr	r3, [pc, #96]	@ (8000a90 <MX_GPIO_Init+0x90>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a17      	ldr	r2, [pc, #92]	@ (8000a90 <MX_GPIO_Init+0x90>)
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	6193      	str	r3, [r2, #24]
 8000a38:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <MX_GPIO_Init+0x90>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	f003 0304 	and.w	r3, r3, #4
 8000a40:	60bb      	str	r3, [r7, #8]
 8000a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	4b12      	ldr	r3, [pc, #72]	@ (8000a90 <MX_GPIO_Init+0x90>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a11      	ldr	r2, [pc, #68]	@ (8000a90 <MX_GPIO_Init+0x90>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <MX_GPIO_Init+0x90>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S_CAN_GPIO_Port, S_CAN_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a62:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <MX_GPIO_Init+0x94>)
 8000a64:	f001 fe6a 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : S_CAN_Pin */
  GPIO_InitStruct.Pin = S_CAN_Pin;
 8000a68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S_CAN_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <MX_GPIO_Init+0x94>)
 8000a82:	f001 fcd7 	bl	8002434 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a86:	bf00      	nop
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40010c00 	.word	0x40010c00

08000a98 <Set_speed_can>:

/* USER CODE BEGIN 4 */


void Set_speed_can(CAN_HandleTypeDef hcan, bool detect_speed, uint8_t speed)
{
 8000a98:	b084      	sub	sp, #16
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b08a      	sub	sp, #40	@ 0x28
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	f107 0c30 	add.w	ip, r7, #48	@ 0x30
 8000aa4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hcan.Init.Mode = CAN_MODE_SILENT;
 8000aa8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000aac:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (speed == 1)
 8000aae:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d108      	bne.n	8000ac8 <Set_speed_can+0x30>
	{
		hcan.Init.Prescaler = 30;
 8000ab6:	231e      	movs	r3, #30
 8000ab8:	637b      	str	r3, [r7, #52]	@ 0x34
		hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000aba:	f44f 23e0 	mov.w	r3, #458752	@ 0x70000
 8000abe:	643b      	str	r3, [r7, #64]	@ 0x40
		hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ac0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000ac4:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ac6:	e018      	b.n	8000afa <Set_speed_can+0x62>
	} else if (speed == 2)
 8000ac8:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000acc:	2b02      	cmp	r3, #2
 8000ace:	d108      	bne.n	8000ae2 <Set_speed_can+0x4a>
	{
		hcan.Init.Prescaler = 40;
 8000ad0:	2328      	movs	r3, #40	@ 0x28
 8000ad2:	637b      	str	r3, [r7, #52]	@ 0x34
		hcan.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000ad4:	f44f 2330 	mov.w	r3, #720896	@ 0xb0000
 8000ad8:	643b      	str	r3, [r7, #64]	@ 0x40
		hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ade:	647b      	str	r3, [r7, #68]	@ 0x44
 8000ae0:	e00b      	b.n	8000afa <Set_speed_can+0x62>
	} else if (speed == 3)
 8000ae2:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d107      	bne.n	8000afa <Set_speed_can+0x62>
	{
		hcan.Init.Prescaler = 60;//80
 8000aea:	233c      	movs	r3, #60	@ 0x3c
 8000aec:	637b      	str	r3, [r7, #52]	@ 0x34
		hcan.Init.TimeSeg1 = CAN_BS1_16TQ;//15
 8000aee:	f44f 2370 	mov.w	r3, #983040	@ 0xf0000
 8000af2:	643b      	str	r3, [r7, #64]	@ 0x40
		hcan.Init.TimeSeg2 = CAN_BS2_7TQ;//2
 8000af4:	f44f 03c0 	mov.w	r3, #6291456	@ 0x600000
 8000af8:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	hcan.Init.AutoRetransmission = ENABLE;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	hcan.Init.SyncJumpWidth = CAN_SJW_3TQ;
 8000b00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b04:	63fb      	str	r3, [r7, #60]	@ 0x3c
	hcan.Init.AutoBusOff = ENABLE;
 8000b06:	2301      	movs	r3, #1
 8000b08:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

	HAL_CAN_Init(&hcan);
 8000b0c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000b10:	f000 fb54 	bl	80011bc <HAL_CAN_Init>
	if (detect_speed)
 8000b14:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d051      	beq.n	8000bc0 <Set_speed_can+0x128>
	{
		CAN_FilterTypeDef canfilterconfig;
		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0x501<<5;
 8000b28:	f24a 0320 	movw	r3, #40992	@ 0xa020
 8000b2c:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 8000b32:	4b38      	ldr	r3, [pc, #224]	@ (8000c14 <Set_speed_can+0x17c>)
 8000b34:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61fb      	str	r3, [r7, #28]
		canfilterconfig.SlaveStartFilterBank = 14;
 8000b42:	230e      	movs	r3, #14
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000b46:	463b      	mov	r3, r7
 8000b48:	4619      	mov	r1, r3
 8000b4a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000b4e:	f000 fc30 	bl	80013b2 <HAL_CAN_ConfigFilter>
		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b52:	2301      	movs	r3, #1
 8000b54:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0x502<<5;
 8000b5e:	f24a 0340 	movw	r3, #41024	@ 0xa040
 8000b62:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 8000b68:	4b2a      	ldr	r3, [pc, #168]	@ (8000c14 <Set_speed_can+0x17c>)
 8000b6a:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b74:	2301      	movs	r3, #1
 8000b76:	61fb      	str	r3, [r7, #28]
		canfilterconfig.SlaveStartFilterBank = 14;
 8000b78:	230e      	movs	r3, #14
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000b84:	f000 fc15 	bl	80013b2 <HAL_CAN_ConfigFilter>
		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 3;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0x503<<5;
 8000b94:	f24a 0360 	movw	r3, #41056	@ 0xa060
 8000b98:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0xFFF<<5;
 8000b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <Set_speed_can+0x17c>)
 8000ba0:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61fb      	str	r3, [r7, #28]
		canfilterconfig.SlaveStartFilterBank = 14;
 8000bae:	230e      	movs	r3, #14
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000bba:	f000 fbfa 	bl	80013b2 <HAL_CAN_ConfigFilter>
 8000bbe:	e019      	b.n	8000bf4 <Set_speed_can+0x15c>
	} else
	{
		CAN_FilterTypeDef canfilterconfig;
		canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	623b      	str	r3, [r7, #32]
		canfilterconfig.FilterBank = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
		canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
		canfilterconfig.FilterIdHigh = 0<<5;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	603b      	str	r3, [r7, #0]
		canfilterconfig.FilterIdLow = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
		canfilterconfig.FilterMaskIdHigh = 0<<5;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
		canfilterconfig.FilterMaskIdLow = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
		canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
		canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
		canfilterconfig.SlaveStartFilterBank = 14;
 8000be4:	230e      	movs	r3, #14
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
		HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000be8:	463b      	mov	r3, r7
 8000bea:	4619      	mov	r1, r3
 8000bec:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000bf0:	f000 fbdf 	bl	80013b2 <HAL_CAN_ConfigFilter>
	}
	HAL_CAN_Start(&hcan);
 8000bf4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000bf8:	f000 fca4 	bl	8001544 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000c02:	f000 fe04 	bl	800180e <HAL_CAN_ActivateNotification>
}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	@ 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr
 8000c14:	0001ffe0 	.word	0x0001ffe0

08000c18 <speaker_floor>:
void speaker_floor(uint8_t tenFloor, uint8_t oneFloor)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	460a      	mov	r2, r1
 8000c22:	71fb      	strb	r3, [r7, #7]
 8000c24:	4613      	mov	r3, r2
 8000c26:	71bb      	strb	r3, [r7, #6]
	uint16_t floor;
	if (tenFloor == 0x48) // H
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b48      	cmp	r3, #72	@ 0x48
 8000c2c:	d10b      	bne.n	8000c46 <speaker_floor+0x2e>
	{
		if (oneFloor == 0x31)
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	2b31      	cmp	r3, #49	@ 0x31
 8000c32:	d102      	bne.n	8000c3a <speaker_floor+0x22>
		{
			floor = 33;
 8000c34:	2321      	movs	r3, #33	@ 0x21
 8000c36:	81fb      	strh	r3, [r7, #14]
 8000c38:	e01b      	b.n	8000c72 <speaker_floor+0x5a>
		} else if (oneFloor == 0x32)
 8000c3a:	79bb      	ldrb	r3, [r7, #6]
 8000c3c:	2b32      	cmp	r3, #50	@ 0x32
 8000c3e:	d118      	bne.n	8000c72 <speaker_floor+0x5a>
		{
			floor = 34;
 8000c40:	2322      	movs	r3, #34	@ 0x22
 8000c42:	81fb      	strh	r3, [r7, #14]
 8000c44:	e015      	b.n	8000c72 <speaker_floor+0x5a>
		}
	} else if (tenFloor == 0x20)
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	2b20      	cmp	r3, #32
 8000c4a:	d104      	bne.n	8000c56 <speaker_floor+0x3e>
	{
		floor = oneFloor - 0x30;
 8000c4c:	79bb      	ldrb	r3, [r7, #6]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	3b30      	subs	r3, #48	@ 0x30
 8000c52:	81fb      	strh	r3, [r7, #14]
 8000c54:	e00d      	b.n	8000c72 <speaker_floor+0x5a>
	} else
	{
		floor = (tenFloor - 0x30)*10 + (oneFloor - 0x30);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	3b30      	subs	r3, #48	@ 0x30
 8000c5a:	b29b      	uxth	r3, r3
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	4413      	add	r3, r2
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	79bb      	ldrb	r3, [r7, #6]
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	3b30      	subs	r3, #48	@ 0x30
 8000c70:	81fb      	strh	r3, [r7, #14]
	}
	floor += 100;
 8000c72:	89fb      	ldrh	r3, [r7, #14]
 8000c74:	3364      	adds	r3, #100	@ 0x64
 8000c76:	81fb      	strh	r3, [r7, #14]
	DF_Play(floor);
 8000c78:	89fb      	ldrh	r3, [r7, #14]
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fac0 	bl	8000202 <DF_Play>
	while (feedbackSpeaker != floor);
 8000c82:	bf00      	nop
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <speaker_floor+0x84>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	89fa      	ldrh	r2, [r7, #14]
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d1fa      	bne.n	8000c84 <speaker_floor+0x6c>
	feedbackSpeaker = 0;
 8000c8e:	4b03      	ldr	r3, [pc, #12]	@ (8000c9c <speaker_floor+0x84>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	801a      	strh	r2, [r3, #0]
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200001c6 	.word	0x200001c6

08000ca0 <speaker_push_button>:
void speaker_push_button(uint8_t speakerButton[5][4])
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if (speakerButton[0][0] == 1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d14c      	bne.n	8000d4a <speaker_push_button+0xaa>
		if (speakerButton[0][1] == 1)
		{
			// đọc cancel
		}
		// đọc tầng
		speaker_floor(speakerButton[0][2], speakerButton[0][3]);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	789a      	ldrb	r2, [r3, #2]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	78db      	ldrb	r3, [r3, #3]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4610      	mov	r0, r2
 8000cbc:	f7ff ffac 	bl	8000c18 <speaker_floor>
		for (uint8_t i=0; i<4; i++)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	73fb      	strb	r3, [r7, #15]
 8000cc4:	e02e      	b.n	8000d24 <speaker_push_button+0x84>
		{
			speakerButton[i][0] = speakerButton[i+1][0];
 8000cc6:	7bfb      	ldrb	r3, [r7, #15]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	441a      	add	r2, r3
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	6879      	ldr	r1, [r7, #4]
 8000cd6:	440b      	add	r3, r1
 8000cd8:	7812      	ldrb	r2, [r2, #0]
 8000cda:	701a      	strb	r2, [r3, #0]
			speakerButton[i][1] = speakerButton[i+1][1];
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	441a      	add	r2, r3
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	440b      	add	r3, r1
 8000cee:	7852      	ldrb	r2, [r2, #1]
 8000cf0:	705a      	strb	r2, [r3, #1]
			speakerButton[i][2] = speakerButton[i+1][2];
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	441a      	add	r2, r3
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	440b      	add	r3, r1
 8000d04:	7892      	ldrb	r2, [r2, #2]
 8000d06:	709a      	strb	r2, [r3, #2]
			speakerButton[i][3] = speakerButton[i+1][3];
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	441a      	add	r2, r3
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	6879      	ldr	r1, [r7, #4]
 8000d18:	440b      	add	r3, r1
 8000d1a:	78d2      	ldrb	r2, [r2, #3]
 8000d1c:	70da      	strb	r2, [r3, #3]
		for (uint8_t i=0; i<4; i++)
 8000d1e:	7bfb      	ldrb	r3, [r7, #15]
 8000d20:	3301      	adds	r3, #1
 8000d22:	73fb      	strb	r3, [r7, #15]
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d9cd      	bls.n	8000cc6 <speaker_push_button+0x26>
		}
		speakerButton[4][0] = 0;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3310      	adds	r3, #16
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
		speakerButton[4][1] = 0;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3310      	adds	r3, #16
 8000d36:	2200      	movs	r2, #0
 8000d38:	705a      	strb	r2, [r3, #1]
		speakerButton[4][2] = 0;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3310      	adds	r3, #16
 8000d3e:	2200      	movs	r2, #0
 8000d40:	709a      	strb	r2, [r3, #2]
		speakerButton[4][3] = 0;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3310      	adds	r3, #16
 8000d46:	2200      	movs	r2, #0
 8000d48:	70da      	strb	r2, [r3, #3]
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d56:	b672      	cpsid	i
}
 8000d58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5a:	bf00      	nop
 8000d5c:	e7fd      	b.n	8000d5a <Error_Handler+0x8>
	...

08000d60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <HAL_MspInit+0x5c>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	4a14      	ldr	r2, [pc, #80]	@ (8000dbc <HAL_MspInit+0x5c>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6193      	str	r3, [r2, #24]
 8000d72:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <HAL_MspInit+0x5c>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dbc <HAL_MspInit+0x5c>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	4a0e      	ldr	r2, [pc, #56]	@ (8000dbc <HAL_MspInit+0x5c>)
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d88:	61d3      	str	r3, [r2, #28]
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <HAL_MspInit+0x5c>)
 8000d8c:	69db      	ldr	r3, [r3, #28]
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <HAL_MspInit+0x60>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <HAL_MspInit+0x60>)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010000 	.word	0x40010000

08000dc4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a20      	ldr	r2, [pc, #128]	@ (8000e60 <HAL_CAN_MspInit+0x9c>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d139      	bne.n	8000e58 <HAL_CAN_MspInit+0x94>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000de4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <HAL_CAN_MspInit+0xa0>)
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	4a1e      	ldr	r2, [pc, #120]	@ (8000e64 <HAL_CAN_MspInit+0xa0>)
 8000dea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dee:	61d3      	str	r3, [r2, #28]
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <HAL_CAN_MspInit+0xa0>)
 8000df2:	69db      	ldr	r3, [r3, #28]
 8000df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfc:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <HAL_CAN_MspInit+0xa0>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a18      	ldr	r2, [pc, #96]	@ (8000e64 <HAL_CAN_MspInit+0xa0>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <HAL_CAN_MspInit+0xa0>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e14:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	4619      	mov	r1, r3
 8000e28:	480f      	ldr	r0, [pc, #60]	@ (8000e68 <HAL_CAN_MspInit+0xa4>)
 8000e2a:	f001 fb03 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	4809      	ldr	r0, [pc, #36]	@ (8000e68 <HAL_CAN_MspInit+0xa4>)
 8000e44:	f001 faf6 	bl	8002434 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	2014      	movs	r0, #20
 8000e4e:	f001 f814 	bl	8001e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000e52:	2014      	movs	r0, #20
 8000e54:	f001 f82d 	bl	8001eb2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40006400 	.word	0x40006400
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010800 	.word	0x40010800

08000e6c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <HAL_TIM_Base_MspInit+0x44>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d113      	bne.n	8000ea6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x48>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x48>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	61d3      	str	r3, [r2, #28]
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <HAL_TIM_Base_MspInit+0x48>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2103      	movs	r1, #3
 8000e9a:	201d      	movs	r0, #29
 8000e9c:	f000 ffed 	bl	8001e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ea0:	201d      	movs	r0, #29
 8000ea2:	f001 f806 	bl	8001eb2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40000400 	.word	0x40000400
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a32      	ldr	r2, [pc, #200]	@ (8000f9c <HAL_UART_MspInit+0xe4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d15d      	bne.n	8000f94 <HAL_UART_MspInit+0xdc>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ed8:	4b31      	ldr	r3, [pc, #196]	@ (8000fa0 <HAL_UART_MspInit+0xe8>)
 8000eda:	69db      	ldr	r3, [r3, #28]
 8000edc:	4a30      	ldr	r2, [pc, #192]	@ (8000fa0 <HAL_UART_MspInit+0xe8>)
 8000ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee2:	61d3      	str	r3, [r2, #28]
 8000ee4:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa0 <HAL_UART_MspInit+0xe8>)
 8000ee6:	69db      	ldr	r3, [r3, #28]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8000fa0 <HAL_UART_MspInit+0xe8>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a2a      	ldr	r2, [pc, #168]	@ (8000fa0 <HAL_UART_MspInit+0xe8>)
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b28      	ldr	r3, [pc, #160]	@ (8000fa0 <HAL_UART_MspInit+0xe8>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4822      	ldr	r0, [pc, #136]	@ (8000fa4 <HAL_UART_MspInit+0xec>)
 8000f1c:	f001 fa8a 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f20:	2308      	movs	r3, #8
 8000f22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	481c      	ldr	r0, [pc, #112]	@ (8000fa4 <HAL_UART_MspInit+0xec>)
 8000f34:	f001 fa7e 	bl	8002434 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <HAL_UART_MspInit+0xf0>)
 8000f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fac <HAL_UART_MspInit+0xf4>)
 8000f3c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <HAL_UART_MspInit+0xf0>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <HAL_UART_MspInit+0xf0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <HAL_UART_MspInit+0xf0>)
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f50:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <HAL_UART_MspInit+0xf0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f56:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <HAL_UART_MspInit+0xf0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <HAL_UART_MspInit+0xf0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_UART_MspInit+0xf0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f68:	480f      	ldr	r0, [pc, #60]	@ (8000fa8 <HAL_UART_MspInit+0xf0>)
 8000f6a:	f000 ffc1 	bl	8001ef0 <HAL_DMA_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000f74:	f7ff feed 	bl	8000d52 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <HAL_UART_MspInit+0xf0>)
 8000f7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <HAL_UART_MspInit+0xf0>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2102      	movs	r1, #2
 8000f88:	2026      	movs	r0, #38	@ 0x26
 8000f8a:	f000 ff76 	bl	8001e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f8e:	2026      	movs	r0, #38	@ 0x26
 8000f90:	f000 ff8f 	bl	8001eb2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40004400 	.word	0x40004400
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010800 	.word	0x40010800
 8000fa8:	200000ec 	.word	0x200000ec
 8000fac:	4002006c 	.word	0x4002006c

08000fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <NMI_Handler+0x4>

08000fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <HardFault_Handler+0x4>

08000fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <MemManage_Handler+0x4>

08000fc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <BusFault_Handler+0x4>

08000fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <UsageFault_Handler+0x4>

08000fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001000:	f000 f89c 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800100c:	4802      	ldr	r0, [pc, #8]	@ (8001018 <DMA1_Channel6_IRQHandler+0x10>)
 800100e:	f001 f8dd 	bl	80021cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000ec 	.word	0x200000ec

0800101c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001020:	4802      	ldr	r0, [pc, #8]	@ (800102c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001022:	f000 fc19 	bl	8001858 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000028 	.word	0x20000028

08001030 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <TIM3_IRQHandler+0x10>)
 8001036:	f002 f8a1 	bl	800317c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000005c 	.word	0x2000005c

08001044 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001048:	4802      	ldr	r0, [pc, #8]	@ (8001054 <USART2_IRQHandler+0x10>)
 800104a:	f002 fd1b 	bl	8003a84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000a4 	.word	0x200000a4

08001058 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001064:	f7ff fff8 	bl	8001058 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480b      	ldr	r0, [pc, #44]	@ (8001098 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800106a:	490c      	ldr	r1, [pc, #48]	@ (800109c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800106c:	4a0c      	ldr	r2, [pc, #48]	@ (80010a0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001080:	4c09      	ldr	r4, [pc, #36]	@ (80010a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800108e:	f003 fbf9 	bl	8004884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001092:	f7ff fa0f 	bl	80004b4 <main>
  bx lr
 8001096:	4770      	bx	lr
  ldr r0, =_sdata
 8001098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800109c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010a0:	08004918 	.word	0x08004918
  ldr r2, =_sbss
 80010a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010a8:	200001d0 	.word	0x200001d0

080010ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ac:	e7fe      	b.n	80010ac <ADC1_2_IRQHandler>
	...

080010b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b4:	4b08      	ldr	r3, [pc, #32]	@ (80010d8 <HAL_Init+0x28>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a07      	ldr	r2, [pc, #28]	@ (80010d8 <HAL_Init+0x28>)
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c0:	2003      	movs	r0, #3
 80010c2:	f000 fecf 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010c6:	200f      	movs	r0, #15
 80010c8:	f000 f808 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010cc:	f7ff fe48 	bl	8000d60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40022000 	.word	0x40022000

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	@ (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 feeb 	bl	8001ed6 <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001118:	f000 feaf 	bl	8001e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	@ (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <HAL_IncTick+0x1c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b05      	ldr	r3, [pc, #20]	@ (800115c <HAL_IncTick+0x20>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a03      	ldr	r2, [pc, #12]	@ (800115c <HAL_IncTick+0x20>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr
 8001158:	20000008 	.word	0x20000008
 800115c:	200001cc 	.word	0x200001cc

08001160 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b02      	ldr	r3, [pc, #8]	@ (8001170 <HAL_GetTick+0x10>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr
 8001170:	200001cc 	.word	0x200001cc

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff fff0 	bl	8001160 <HAL_GetTick>
 8001180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b0a      	ldr	r3, [pc, #40]	@ (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	461a      	mov	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4413      	add	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800119a:	bf00      	nop
 800119c:	f7ff ffe0 	bl	8001160 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000008 	.word	0x20000008

080011bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e0ed      	b.n	80013aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff fdf2 	bl	8000dc4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0201 	orr.w	r2, r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f0:	f7ff ffb6 	bl	8001160 <HAL_GetTick>
 80011f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011f6:	e012      	b.n	800121e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011f8:	f7ff ffb2 	bl	8001160 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b0a      	cmp	r3, #10
 8001204:	d90b      	bls.n	800121e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2205      	movs	r2, #5
 8001216:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e0c5      	b.n	80013aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d0e5      	beq.n	80011f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0202 	bic.w	r2, r2, #2
 800123a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800123c:	f7ff ff90 	bl	8001160 <HAL_GetTick>
 8001240:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001242:	e012      	b.n	800126a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001244:	f7ff ff8c 	bl	8001160 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b0a      	cmp	r3, #10
 8001250:	d90b      	bls.n	800126a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001256:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2205      	movs	r2, #5
 8001262:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e09f      	b.n	80013aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1e5      	bne.n	8001244 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	7e1b      	ldrb	r3, [r3, #24]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d108      	bne.n	8001292 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e007      	b.n	80012a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7e5b      	ldrb	r3, [r3, #25]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d108      	bne.n	80012bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	e007      	b.n	80012cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80012ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	7e9b      	ldrb	r3, [r3, #26]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d108      	bne.n	80012e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0220 	orr.w	r2, r2, #32
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	e007      	b.n	80012f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0220 	bic.w	r2, r2, #32
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	7edb      	ldrb	r3, [r3, #27]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d108      	bne.n	8001310 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0210 	bic.w	r2, r2, #16
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	e007      	b.n	8001320 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0210 	orr.w	r2, r2, #16
 800131e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7f1b      	ldrb	r3, [r3, #28]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d108      	bne.n	800133a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0208 	orr.w	r2, r2, #8
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	e007      	b.n	800134a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f022 0208 	bic.w	r2, r2, #8
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	7f5b      	ldrb	r3, [r3, #29]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d108      	bne.n	8001364 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f042 0204 	orr.w	r2, r2, #4
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	e007      	b.n	8001374 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 0204 	bic.w	r2, r2, #4
 8001372:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	431a      	orrs	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	ea42 0103 	orr.w	r1, r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	1e5a      	subs	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	430a      	orrs	r2, r1
 8001398:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2201      	movs	r2, #1
 80013a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b087      	sub	sp, #28
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
 80013ba:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80013ca:	7cfb      	ldrb	r3, [r7, #19]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d003      	beq.n	80013d8 <HAL_CAN_ConfigFilter+0x26>
 80013d0:	7cfb      	ldrb	r3, [r7, #19]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	f040 80aa 	bne.w	800152c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013de:	f043 0201 	orr.w	r2, r3, #1
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	f003 031f 	and.w	r3, r3, #31
 80013f0:	2201      	movs	r2, #1
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d123      	bne.n	800145a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43db      	mvns	r3, r3
 800141c:	401a      	ands	r2, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001434:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3248      	adds	r2, #72	@ 0x48
 800143a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800144e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001450:	6979      	ldr	r1, [r7, #20]
 8001452:	3348      	adds	r3, #72	@ 0x48
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d122      	bne.n	80014a8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	431a      	orrs	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001482:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3248      	adds	r2, #72	@ 0x48
 8001488:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800149c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800149e:	6979      	ldr	r1, [r7, #20]
 80014a0:	3348      	adds	r3, #72	@ 0x48
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d109      	bne.n	80014c4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80014c2:	e007      	b.n	80014d4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	691b      	ldr	r3, [r3, #16]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d109      	bne.n	80014f0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	401a      	ands	r2, r3
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80014ee:	e007      	b.n	8001500 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d107      	bne.n	8001518 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800151e:	f023 0201 	bic.w	r2, r3, #1
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	e006      	b.n	800153a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001530:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
  }
}
 800153a:	4618      	mov	r0, r3
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d12e      	bne.n	80015b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001570:	f7ff fdf6 	bl	8001160 <HAL_GetTick>
 8001574:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001576:	e012      	b.n	800159e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001578:	f7ff fdf2 	bl	8001160 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b0a      	cmp	r3, #10
 8001584:	d90b      	bls.n	800159e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2205      	movs	r2, #5
 8001596:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e012      	b.n	80015c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1e5      	bne.n	8001578 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e006      	b.n	80015c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ba:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
  }
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d003      	beq.n	80015f0 <HAL_CAN_GetRxMessage+0x24>
 80015e8:	7dfb      	ldrb	r3, [r7, #23]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	f040 8103 	bne.w	80017f6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d10e      	bne.n	8001614 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d116      	bne.n	8001632 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001608:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0f7      	b.n	8001804 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d107      	bne.n	8001632 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001626:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0e8      	b.n	8001804 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	331b      	adds	r3, #27
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4413      	add	r3, r2
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0204 	and.w	r2, r3, #4
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10c      	bne.n	800166a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	331b      	adds	r3, #27
 8001658:	011b      	lsls	r3, r3, #4
 800165a:	4413      	add	r3, r2
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0d5b      	lsrs	r3, r3, #21
 8001660:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	e00b      	b.n	8001682 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	331b      	adds	r3, #27
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	4413      	add	r3, r2
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	331b      	adds	r3, #27
 800168a:	011b      	lsls	r3, r3, #4
 800168c:	4413      	add	r3, r2
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0202 	and.w	r2, r3, #2
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	331b      	adds	r3, #27
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4413      	add	r3, r2
 80016a4:	3304      	adds	r3, #4
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2208      	movs	r2, #8
 80016b4:	611a      	str	r2, [r3, #16]
 80016b6:	e00b      	b.n	80016d0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	331b      	adds	r3, #27
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	4413      	add	r3, r2
 80016c4:	3304      	adds	r3, #4
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 020f 	and.w	r2, r3, #15
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	331b      	adds	r3, #27
 80016d8:	011b      	lsls	r3, r3, #4
 80016da:	4413      	add	r3, r2
 80016dc:	3304      	adds	r3, #4
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	331b      	adds	r3, #27
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	4413      	add	r3, r2
 80016f4:	3304      	adds	r3, #4
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	0c1b      	lsrs	r3, r3, #16
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	4413      	add	r3, r2
 800170a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	4413      	add	r3, r2
 8001720:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	0a1a      	lsrs	r2, r3, #8
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	3301      	adds	r3, #1
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	4413      	add	r3, r2
 800173a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	0c1a      	lsrs	r2, r3, #16
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	3302      	adds	r3, #2
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	011b      	lsls	r3, r3, #4
 8001752:	4413      	add	r3, r2
 8001754:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	0e1a      	lsrs	r2, r3, #24
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	3303      	adds	r3, #3
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	4413      	add	r3, r2
 800176e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	3304      	adds	r3, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	4413      	add	r3, r2
 8001786:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	0a1a      	lsrs	r2, r3, #8
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	3305      	adds	r3, #5
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	011b      	lsls	r3, r3, #4
 800179e:	4413      	add	r3, r2
 80017a0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	0c1a      	lsrs	r2, r3, #16
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	3306      	adds	r3, #6
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	4413      	add	r3, r2
 80017ba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	0e1a      	lsrs	r2, r3, #24
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	3307      	adds	r3, #7
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d108      	bne.n	80017e2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0220 	orr.w	r2, r2, #32
 80017de:	60da      	str	r2, [r3, #12]
 80017e0:	e007      	b.n	80017f2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0220 	orr.w	r2, r2, #32
 80017f0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	e006      	b.n	8001804 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
  }
}
 8001804:	4618      	mov	r0, r3
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800181e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d002      	beq.n	800182c <HAL_CAN_ActivateNotification+0x1e>
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d109      	bne.n	8001840 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6959      	ldr	r1, [r3, #20]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800183c:	2300      	movs	r3, #0
 800183e:	e006      	b.n	800184e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001844:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
  }
}
 800184e:	4618      	mov	r0, r3
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001860:	2300      	movs	r3, #0
 8001862:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001894:	6a3b      	ldr	r3, [r7, #32]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d07c      	beq.n	8001998 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d023      	beq.n	80018f0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f983 	bl	8001bc6 <HAL_CAN_TxMailbox0CompleteCallback>
 80018c0:	e016      	b.n	80018f0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d004      	beq.n	80018d6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d4:	e00c      	b.n	80018f0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d004      	beq.n	80018ea <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e8:	e002      	b.n	80018f0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 f986 	bl	8001bfc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d024      	beq.n	8001944 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001902:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f962 	bl	8001bd8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001914:	e016      	b.n	8001944 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d004      	beq.n	800192a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001922:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001926:	627b      	str	r3, [r7, #36]	@ 0x24
 8001928:	e00c      	b.n	8001944 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001930:	2b00      	cmp	r3, #0
 8001932:	d004      	beq.n	800193e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
 800193c:	e002      	b.n	8001944 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f000 f965 	bl	8001c0e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d024      	beq.n	8001998 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001956:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f941 	bl	8001bea <HAL_CAN_TxMailbox2CompleteCallback>
 8001968:	e016      	b.n	8001998 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
 800197c:	e00c      	b.n	8001998 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d004      	beq.n	8001992 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001990:	e002      	b.n	8001998 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f944 	bl	8001c20 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00c      	beq.n	80019bc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d007      	beq.n	80019bc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2210      	movs	r2, #16
 80019ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00b      	beq.n	80019de <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2208      	movs	r2, #8
 80019d6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f92a 	bl	8001c32 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80019de:	6a3b      	ldr	r3, [r7, #32]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d009      	beq.n	80019fc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f003 0303 	and.w	r3, r3, #3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe fc1a 	bl	8000230 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00c      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d007      	beq.n	8001a20 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2210      	movs	r2, #16
 8001a1e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a20:	6a3b      	ldr	r3, [r7, #32]
 8001a22:	f003 0320 	and.w	r3, r3, #32
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2208      	movs	r2, #8
 8001a3a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f000 f90a 	bl	8001c56 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	f003 0310 	and.w	r3, r3, #16
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	f003 0303 	and.w	r3, r3, #3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f8f2 	bl	8001c44 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00b      	beq.n	8001a82 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d006      	beq.n	8001a82 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2210      	movs	r2, #16
 8001a7a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 f8f3 	bl	8001c68 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00b      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d006      	beq.n	8001aa4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8eb 	bl	8001c7a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d07b      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d072      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ab8:	6a3b      	ldr	r3, [r7, #32]
 8001aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d003      	beq.n	8001ad4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d008      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b06:	f043 0304 	orr.w	r3, r3, #4
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d043      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d03e      	beq.n	8001b9e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b26:	2b60      	cmp	r3, #96	@ 0x60
 8001b28:	d02b      	beq.n	8001b82 <HAL_CAN_IRQHandler+0x32a>
 8001b2a:	2b60      	cmp	r3, #96	@ 0x60
 8001b2c:	d82e      	bhi.n	8001b8c <HAL_CAN_IRQHandler+0x334>
 8001b2e:	2b50      	cmp	r3, #80	@ 0x50
 8001b30:	d022      	beq.n	8001b78 <HAL_CAN_IRQHandler+0x320>
 8001b32:	2b50      	cmp	r3, #80	@ 0x50
 8001b34:	d82a      	bhi.n	8001b8c <HAL_CAN_IRQHandler+0x334>
 8001b36:	2b40      	cmp	r3, #64	@ 0x40
 8001b38:	d019      	beq.n	8001b6e <HAL_CAN_IRQHandler+0x316>
 8001b3a:	2b40      	cmp	r3, #64	@ 0x40
 8001b3c:	d826      	bhi.n	8001b8c <HAL_CAN_IRQHandler+0x334>
 8001b3e:	2b30      	cmp	r3, #48	@ 0x30
 8001b40:	d010      	beq.n	8001b64 <HAL_CAN_IRQHandler+0x30c>
 8001b42:	2b30      	cmp	r3, #48	@ 0x30
 8001b44:	d822      	bhi.n	8001b8c <HAL_CAN_IRQHandler+0x334>
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d002      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x2f8>
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d005      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001b4e:	e01d      	b.n	8001b8c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b58:	e019      	b.n	8001b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	f043 0310 	orr.w	r3, r3, #16
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b62:	e014      	b.n	8001b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b66:	f043 0320 	orr.w	r3, r3, #32
 8001b6a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b6c:	e00f      	b.n	8001b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b74:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b76:	e00a      	b.n	8001b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b80:	e005      	b.n	8001b8e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001b8a:	e000      	b.n	8001b8e <HAL_CAN_IRQHandler+0x336>
            break;
 8001b8c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	699a      	ldr	r2, [r3, #24]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001b9c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f867 	bl	8001c8c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	3728      	adds	r7, #40	@ 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
	...

08001ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bc80      	pop	{r7}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cec:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <__NVIC_GetPriorityGrouping+0x18>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	f003 0307 	and.w	r3, r3, #7
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0b      	blt.n	8001d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	f003 021f 	and.w	r2, r3, #31
 8001d1c:	4906      	ldr	r1, [pc, #24]	@ (8001d38 <__NVIC_EnableIRQ+0x34>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2001      	movs	r0, #1
 8001d26:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bc80      	pop	{r7}
 8001d36:	4770      	bx	lr
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	@ (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	@ (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	@ 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	@ 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <__NVIC_SystemReset+0x24>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e06:	4904      	ldr	r1, [pc, #16]	@ (8001e18 <__NVIC_SystemReset+0x24>)
 8001e08:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <__NVIC_SystemReset+0x28>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e0e:	f3bf 8f4f 	dsb	sy
}
 8001e12:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001e14:	bf00      	nop
 8001e16:	e7fd      	b.n	8001e14 <__NVIC_SystemReset+0x20>
 8001e18:	e000ed00 	.word	0xe000ed00
 8001e1c:	05fa0004 	.word	0x05fa0004

08001e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e30:	d301      	bcc.n	8001e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e36:	4a0a      	ldr	r2, [pc, #40]	@ (8001e60 <SysTick_Config+0x40>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e44:	f7ff ff7a 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e48:	4b05      	ldr	r3, [pc, #20]	@ (8001e60 <SysTick_Config+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4e:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <SysTick_Config+0x40>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff17 	bl	8001ca0 <__NVIC_SetPriorityGrouping>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8c:	f7ff ff2c 	bl	8001ce8 <__NVIC_GetPriorityGrouping>
 8001e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff7a 	bl	8001d90 <NVIC_EncodePriority>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff49 	bl	8001d3c <__NVIC_SetPriority>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ff1f 	bl	8001d04 <__NVIC_EnableIRQ>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001ed2:	f7ff ff8f 	bl	8001df4 <__NVIC_SystemReset>

08001ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff ff9e 	bl	8001e20 <SysTick_Config>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e043      	b.n	8001f8e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <HAL_DMA_Init+0xa8>)
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a22      	ldr	r2, [pc, #136]	@ (8001f9c <HAL_DMA_Init+0xac>)
 8001f12:	fba2 2303 	umull	r2, r3, r2, r3
 8001f16:	091b      	lsrs	r3, r3, #4
 8001f18:	009a      	lsls	r2, r3, #2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <HAL_DMA_Init+0xb0>)
 8001f22:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f3a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001f3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001f48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	bffdfff8 	.word	0xbffdfff8
 8001f9c:	cccccccd 	.word	0xcccccccd
 8001fa0:	40020000 	.word	0x40020000

08001fa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_DMA_Start_IT+0x20>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e04b      	b.n	800205c <HAL_DMA_Start_IT+0xb8>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d13a      	bne.n	800204e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0201 	bic.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f000 f9eb 	bl	80023d8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d008      	beq.n	800201c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 020e 	orr.w	r2, r2, #14
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e00f      	b.n	800203c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0204 	bic.w	r2, r2, #4
 800202a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 020a 	orr.w	r2, r2, #10
 800203a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	e005      	b.n	800205a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002056:	2302      	movs	r3, #2
 8002058:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800205a:	7dfb      	ldrb	r3, [r7, #23]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d008      	beq.n	800208e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2204      	movs	r2, #4
 8002080:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e020      	b.n	80020d0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 020e 	bic.w	r2, r2, #14
 800209c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b6:	2101      	movs	r1, #1
 80020b8:	fa01 f202 	lsl.w	r2, r1, r2
 80020bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bc80      	pop	{r7}
 80020d8:	4770      	bx	lr
	...

080020dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d005      	beq.n	8002100 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2204      	movs	r2, #4
 80020f8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	e051      	b.n	80021a4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 020e 	bic.w	r2, r2, #14
 800210e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a22      	ldr	r2, [pc, #136]	@ (80021b0 <HAL_DMA_Abort_IT+0xd4>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d029      	beq.n	800217e <HAL_DMA_Abort_IT+0xa2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a21      	ldr	r2, [pc, #132]	@ (80021b4 <HAL_DMA_Abort_IT+0xd8>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d022      	beq.n	800217a <HAL_DMA_Abort_IT+0x9e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a1f      	ldr	r2, [pc, #124]	@ (80021b8 <HAL_DMA_Abort_IT+0xdc>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d01a      	beq.n	8002174 <HAL_DMA_Abort_IT+0x98>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1e      	ldr	r2, [pc, #120]	@ (80021bc <HAL_DMA_Abort_IT+0xe0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d012      	beq.n	800216e <HAL_DMA_Abort_IT+0x92>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1c      	ldr	r2, [pc, #112]	@ (80021c0 <HAL_DMA_Abort_IT+0xe4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00a      	beq.n	8002168 <HAL_DMA_Abort_IT+0x8c>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a1b      	ldr	r2, [pc, #108]	@ (80021c4 <HAL_DMA_Abort_IT+0xe8>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d102      	bne.n	8002162 <HAL_DMA_Abort_IT+0x86>
 800215c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002160:	e00e      	b.n	8002180 <HAL_DMA_Abort_IT+0xa4>
 8002162:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002166:	e00b      	b.n	8002180 <HAL_DMA_Abort_IT+0xa4>
 8002168:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800216c:	e008      	b.n	8002180 <HAL_DMA_Abort_IT+0xa4>
 800216e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002172:	e005      	b.n	8002180 <HAL_DMA_Abort_IT+0xa4>
 8002174:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002178:	e002      	b.n	8002180 <HAL_DMA_Abort_IT+0xa4>
 800217a:	2310      	movs	r3, #16
 800217c:	e000      	b.n	8002180 <HAL_DMA_Abort_IT+0xa4>
 800217e:	2301      	movs	r3, #1
 8002180:	4a11      	ldr	r2, [pc, #68]	@ (80021c8 <HAL_DMA_Abort_IT+0xec>)
 8002182:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	4798      	blx	r3
    } 
  }
  return status;
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40020008 	.word	0x40020008
 80021b4:	4002001c 	.word	0x4002001c
 80021b8:	40020030 	.word	0x40020030
 80021bc:	40020044 	.word	0x40020044
 80021c0:	40020058 	.word	0x40020058
 80021c4:	4002006c 	.word	0x4002006c
 80021c8:	40020000 	.word	0x40020000

080021cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	2204      	movs	r2, #4
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d04f      	beq.n	8002294 <HAL_DMA_IRQHandler+0xc8>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d04a      	beq.n	8002294 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d107      	bne.n	800221c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0204 	bic.w	r2, r2, #4
 800221a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a66      	ldr	r2, [pc, #408]	@ (80023bc <HAL_DMA_IRQHandler+0x1f0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d029      	beq.n	800227a <HAL_DMA_IRQHandler+0xae>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a65      	ldr	r2, [pc, #404]	@ (80023c0 <HAL_DMA_IRQHandler+0x1f4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d022      	beq.n	8002276 <HAL_DMA_IRQHandler+0xaa>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a63      	ldr	r2, [pc, #396]	@ (80023c4 <HAL_DMA_IRQHandler+0x1f8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01a      	beq.n	8002270 <HAL_DMA_IRQHandler+0xa4>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a62      	ldr	r2, [pc, #392]	@ (80023c8 <HAL_DMA_IRQHandler+0x1fc>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d012      	beq.n	800226a <HAL_DMA_IRQHandler+0x9e>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a60      	ldr	r2, [pc, #384]	@ (80023cc <HAL_DMA_IRQHandler+0x200>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d00a      	beq.n	8002264 <HAL_DMA_IRQHandler+0x98>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a5f      	ldr	r2, [pc, #380]	@ (80023d0 <HAL_DMA_IRQHandler+0x204>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d102      	bne.n	800225e <HAL_DMA_IRQHandler+0x92>
 8002258:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800225c:	e00e      	b.n	800227c <HAL_DMA_IRQHandler+0xb0>
 800225e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002262:	e00b      	b.n	800227c <HAL_DMA_IRQHandler+0xb0>
 8002264:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002268:	e008      	b.n	800227c <HAL_DMA_IRQHandler+0xb0>
 800226a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800226e:	e005      	b.n	800227c <HAL_DMA_IRQHandler+0xb0>
 8002270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002274:	e002      	b.n	800227c <HAL_DMA_IRQHandler+0xb0>
 8002276:	2340      	movs	r3, #64	@ 0x40
 8002278:	e000      	b.n	800227c <HAL_DMA_IRQHandler+0xb0>
 800227a:	2304      	movs	r3, #4
 800227c:	4a55      	ldr	r2, [pc, #340]	@ (80023d4 <HAL_DMA_IRQHandler+0x208>)
 800227e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 8094 	beq.w	80023b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002292:	e08e      	b.n	80023b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002298:	2202      	movs	r2, #2
 800229a:	409a      	lsls	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4013      	ands	r3, r2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d056      	beq.n	8002352 <HAL_DMA_IRQHandler+0x186>
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d051      	beq.n	8002352 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d10b      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 020a 	bic.w	r2, r2, #10
 80022ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a38      	ldr	r2, [pc, #224]	@ (80023bc <HAL_DMA_IRQHandler+0x1f0>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d029      	beq.n	8002332 <HAL_DMA_IRQHandler+0x166>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a37      	ldr	r2, [pc, #220]	@ (80023c0 <HAL_DMA_IRQHandler+0x1f4>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d022      	beq.n	800232e <HAL_DMA_IRQHandler+0x162>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a35      	ldr	r2, [pc, #212]	@ (80023c4 <HAL_DMA_IRQHandler+0x1f8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d01a      	beq.n	8002328 <HAL_DMA_IRQHandler+0x15c>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a34      	ldr	r2, [pc, #208]	@ (80023c8 <HAL_DMA_IRQHandler+0x1fc>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d012      	beq.n	8002322 <HAL_DMA_IRQHandler+0x156>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a32      	ldr	r2, [pc, #200]	@ (80023cc <HAL_DMA_IRQHandler+0x200>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d00a      	beq.n	800231c <HAL_DMA_IRQHandler+0x150>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a31      	ldr	r2, [pc, #196]	@ (80023d0 <HAL_DMA_IRQHandler+0x204>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d102      	bne.n	8002316 <HAL_DMA_IRQHandler+0x14a>
 8002310:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002314:	e00e      	b.n	8002334 <HAL_DMA_IRQHandler+0x168>
 8002316:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800231a:	e00b      	b.n	8002334 <HAL_DMA_IRQHandler+0x168>
 800231c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002320:	e008      	b.n	8002334 <HAL_DMA_IRQHandler+0x168>
 8002322:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002326:	e005      	b.n	8002334 <HAL_DMA_IRQHandler+0x168>
 8002328:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800232c:	e002      	b.n	8002334 <HAL_DMA_IRQHandler+0x168>
 800232e:	2320      	movs	r3, #32
 8002330:	e000      	b.n	8002334 <HAL_DMA_IRQHandler+0x168>
 8002332:	2302      	movs	r3, #2
 8002334:	4a27      	ldr	r2, [pc, #156]	@ (80023d4 <HAL_DMA_IRQHandler+0x208>)
 8002336:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d034      	beq.n	80023b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002350:	e02f      	b.n	80023b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002356:	2208      	movs	r2, #8
 8002358:	409a      	lsls	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d028      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x1e8>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d023      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 020e 	bic.w	r2, r2, #14
 800237a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002384:	2101      	movs	r1, #1
 8002386:	fa01 f202 	lsl.w	r2, r1, r2
 800238a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d004      	beq.n	80023b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	4798      	blx	r3
    }
  }
  return;
 80023b2:	bf00      	nop
 80023b4:	bf00      	nop
}
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40020008 	.word	0x40020008
 80023c0:	4002001c 	.word	0x4002001c
 80023c4:	40020030 	.word	0x40020030
 80023c8:	40020044 	.word	0x40020044
 80023cc:	40020058 	.word	0x40020058
 80023d0:	4002006c 	.word	0x4002006c
 80023d4:	40020000 	.word	0x40020000

080023d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
 80023e4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f202 	lsl.w	r2, r1, r2
 80023f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b10      	cmp	r3, #16
 8002404:	d108      	bne.n	8002418 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002416:	e007      	b.n	8002428 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	60da      	str	r2, [r3, #12]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr
	...

08002434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002434:	b480      	push	{r7}
 8002436:	b08b      	sub	sp, #44	@ 0x2c
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800243e:	2300      	movs	r3, #0
 8002440:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002442:	2300      	movs	r3, #0
 8002444:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002446:	e169      	b.n	800271c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002448:	2201      	movs	r2, #1
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69fa      	ldr	r2, [r7, #28]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	429a      	cmp	r2, r3
 8002462:	f040 8158 	bne.w	8002716 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	4a9a      	ldr	r2, [pc, #616]	@ (80026d4 <HAL_GPIO_Init+0x2a0>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d05e      	beq.n	800252e <HAL_GPIO_Init+0xfa>
 8002470:	4a98      	ldr	r2, [pc, #608]	@ (80026d4 <HAL_GPIO_Init+0x2a0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d875      	bhi.n	8002562 <HAL_GPIO_Init+0x12e>
 8002476:	4a98      	ldr	r2, [pc, #608]	@ (80026d8 <HAL_GPIO_Init+0x2a4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d058      	beq.n	800252e <HAL_GPIO_Init+0xfa>
 800247c:	4a96      	ldr	r2, [pc, #600]	@ (80026d8 <HAL_GPIO_Init+0x2a4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d86f      	bhi.n	8002562 <HAL_GPIO_Init+0x12e>
 8002482:	4a96      	ldr	r2, [pc, #600]	@ (80026dc <HAL_GPIO_Init+0x2a8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d052      	beq.n	800252e <HAL_GPIO_Init+0xfa>
 8002488:	4a94      	ldr	r2, [pc, #592]	@ (80026dc <HAL_GPIO_Init+0x2a8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d869      	bhi.n	8002562 <HAL_GPIO_Init+0x12e>
 800248e:	4a94      	ldr	r2, [pc, #592]	@ (80026e0 <HAL_GPIO_Init+0x2ac>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d04c      	beq.n	800252e <HAL_GPIO_Init+0xfa>
 8002494:	4a92      	ldr	r2, [pc, #584]	@ (80026e0 <HAL_GPIO_Init+0x2ac>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d863      	bhi.n	8002562 <HAL_GPIO_Init+0x12e>
 800249a:	4a92      	ldr	r2, [pc, #584]	@ (80026e4 <HAL_GPIO_Init+0x2b0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d046      	beq.n	800252e <HAL_GPIO_Init+0xfa>
 80024a0:	4a90      	ldr	r2, [pc, #576]	@ (80026e4 <HAL_GPIO_Init+0x2b0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d85d      	bhi.n	8002562 <HAL_GPIO_Init+0x12e>
 80024a6:	2b12      	cmp	r3, #18
 80024a8:	d82a      	bhi.n	8002500 <HAL_GPIO_Init+0xcc>
 80024aa:	2b12      	cmp	r3, #18
 80024ac:	d859      	bhi.n	8002562 <HAL_GPIO_Init+0x12e>
 80024ae:	a201      	add	r2, pc, #4	@ (adr r2, 80024b4 <HAL_GPIO_Init+0x80>)
 80024b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b4:	0800252f 	.word	0x0800252f
 80024b8:	08002509 	.word	0x08002509
 80024bc:	0800251b 	.word	0x0800251b
 80024c0:	0800255d 	.word	0x0800255d
 80024c4:	08002563 	.word	0x08002563
 80024c8:	08002563 	.word	0x08002563
 80024cc:	08002563 	.word	0x08002563
 80024d0:	08002563 	.word	0x08002563
 80024d4:	08002563 	.word	0x08002563
 80024d8:	08002563 	.word	0x08002563
 80024dc:	08002563 	.word	0x08002563
 80024e0:	08002563 	.word	0x08002563
 80024e4:	08002563 	.word	0x08002563
 80024e8:	08002563 	.word	0x08002563
 80024ec:	08002563 	.word	0x08002563
 80024f0:	08002563 	.word	0x08002563
 80024f4:	08002563 	.word	0x08002563
 80024f8:	08002511 	.word	0x08002511
 80024fc:	08002525 	.word	0x08002525
 8002500:	4a79      	ldr	r2, [pc, #484]	@ (80026e8 <HAL_GPIO_Init+0x2b4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d013      	beq.n	800252e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002506:	e02c      	b.n	8002562 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	623b      	str	r3, [r7, #32]
          break;
 800250e:	e029      	b.n	8002564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	3304      	adds	r3, #4
 8002516:	623b      	str	r3, [r7, #32]
          break;
 8002518:	e024      	b.n	8002564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	3308      	adds	r3, #8
 8002520:	623b      	str	r3, [r7, #32]
          break;
 8002522:	e01f      	b.n	8002564 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	330c      	adds	r3, #12
 800252a:	623b      	str	r3, [r7, #32]
          break;
 800252c:	e01a      	b.n	8002564 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d102      	bne.n	800253c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002536:	2304      	movs	r3, #4
 8002538:	623b      	str	r3, [r7, #32]
          break;
 800253a:	e013      	b.n	8002564 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d105      	bne.n	8002550 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002544:	2308      	movs	r3, #8
 8002546:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	611a      	str	r2, [r3, #16]
          break;
 800254e:	e009      	b.n	8002564 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002550:	2308      	movs	r3, #8
 8002552:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	615a      	str	r2, [r3, #20]
          break;
 800255a:	e003      	b.n	8002564 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800255c:	2300      	movs	r3, #0
 800255e:	623b      	str	r3, [r7, #32]
          break;
 8002560:	e000      	b.n	8002564 <HAL_GPIO_Init+0x130>
          break;
 8002562:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	2bff      	cmp	r3, #255	@ 0xff
 8002568:	d801      	bhi.n	800256e <HAL_GPIO_Init+0x13a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	e001      	b.n	8002572 <HAL_GPIO_Init+0x13e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	2bff      	cmp	r3, #255	@ 0xff
 8002578:	d802      	bhi.n	8002580 <HAL_GPIO_Init+0x14c>
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	e002      	b.n	8002586 <HAL_GPIO_Init+0x152>
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	3b08      	subs	r3, #8
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	210f      	movs	r1, #15
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	fa01 f303 	lsl.w	r3, r1, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	401a      	ands	r2, r3
 8002598:	6a39      	ldr	r1, [r7, #32]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	fa01 f303 	lsl.w	r3, r1, r3
 80025a0:	431a      	orrs	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 80b1 	beq.w	8002716 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025b4:	4b4d      	ldr	r3, [pc, #308]	@ (80026ec <HAL_GPIO_Init+0x2b8>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	4a4c      	ldr	r2, [pc, #304]	@ (80026ec <HAL_GPIO_Init+0x2b8>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6193      	str	r3, [r2, #24]
 80025c0:	4b4a      	ldr	r3, [pc, #296]	@ (80026ec <HAL_GPIO_Init+0x2b8>)
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025cc:	4a48      	ldr	r2, [pc, #288]	@ (80026f0 <HAL_GPIO_Init+0x2bc>)
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	089b      	lsrs	r3, r3, #2
 80025d2:	3302      	adds	r3, #2
 80025d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	220f      	movs	r2, #15
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	4013      	ands	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a40      	ldr	r2, [pc, #256]	@ (80026f4 <HAL_GPIO_Init+0x2c0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d013      	beq.n	8002620 <HAL_GPIO_Init+0x1ec>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a3f      	ldr	r2, [pc, #252]	@ (80026f8 <HAL_GPIO_Init+0x2c4>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d00d      	beq.n	800261c <HAL_GPIO_Init+0x1e8>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a3e      	ldr	r2, [pc, #248]	@ (80026fc <HAL_GPIO_Init+0x2c8>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d007      	beq.n	8002618 <HAL_GPIO_Init+0x1e4>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a3d      	ldr	r2, [pc, #244]	@ (8002700 <HAL_GPIO_Init+0x2cc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d101      	bne.n	8002614 <HAL_GPIO_Init+0x1e0>
 8002610:	2303      	movs	r3, #3
 8002612:	e006      	b.n	8002622 <HAL_GPIO_Init+0x1ee>
 8002614:	2304      	movs	r3, #4
 8002616:	e004      	b.n	8002622 <HAL_GPIO_Init+0x1ee>
 8002618:	2302      	movs	r3, #2
 800261a:	e002      	b.n	8002622 <HAL_GPIO_Init+0x1ee>
 800261c:	2301      	movs	r3, #1
 800261e:	e000      	b.n	8002622 <HAL_GPIO_Init+0x1ee>
 8002620:	2300      	movs	r3, #0
 8002622:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002624:	f002 0203 	and.w	r2, r2, #3
 8002628:	0092      	lsls	r2, r2, #2
 800262a:	4093      	lsls	r3, r2
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002632:	492f      	ldr	r1, [pc, #188]	@ (80026f0 <HAL_GPIO_Init+0x2bc>)
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	089b      	lsrs	r3, r3, #2
 8002638:	3302      	adds	r3, #2
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d006      	beq.n	800265a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800264c:	4b2d      	ldr	r3, [pc, #180]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	492c      	ldr	r1, [pc, #176]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	4313      	orrs	r3, r2
 8002656:	608b      	str	r3, [r1, #8]
 8002658:	e006      	b.n	8002668 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800265a:	4b2a      	ldr	r3, [pc, #168]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	43db      	mvns	r3, r3
 8002662:	4928      	ldr	r1, [pc, #160]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 8002664:	4013      	ands	r3, r2
 8002666:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002674:	4b23      	ldr	r3, [pc, #140]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	4922      	ldr	r1, [pc, #136]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	4313      	orrs	r3, r2
 800267e:	60cb      	str	r3, [r1, #12]
 8002680:	e006      	b.n	8002690 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002682:	4b20      	ldr	r3, [pc, #128]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 8002684:	68da      	ldr	r2, [r3, #12]
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	43db      	mvns	r3, r3
 800268a:	491e      	ldr	r1, [pc, #120]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 800268c:	4013      	ands	r3, r2
 800268e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800269c:	4b19      	ldr	r3, [pc, #100]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	4918      	ldr	r1, [pc, #96]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	604b      	str	r3, [r1, #4]
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026aa:	4b16      	ldr	r3, [pc, #88]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 80026ac:	685a      	ldr	r2, [r3, #4]
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	43db      	mvns	r3, r3
 80026b2:	4914      	ldr	r1, [pc, #80]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d021      	beq.n	8002708 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	490e      	ldr	r1, [pc, #56]	@ (8002704 <HAL_GPIO_Init+0x2d0>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
 80026d0:	e021      	b.n	8002716 <HAL_GPIO_Init+0x2e2>
 80026d2:	bf00      	nop
 80026d4:	10320000 	.word	0x10320000
 80026d8:	10310000 	.word	0x10310000
 80026dc:	10220000 	.word	0x10220000
 80026e0:	10210000 	.word	0x10210000
 80026e4:	10120000 	.word	0x10120000
 80026e8:	10110000 	.word	0x10110000
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40010000 	.word	0x40010000
 80026f4:	40010800 	.word	0x40010800
 80026f8:	40010c00 	.word	0x40010c00
 80026fc:	40011000 	.word	0x40011000
 8002700:	40011400 	.word	0x40011400
 8002704:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <HAL_GPIO_Init+0x304>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	43db      	mvns	r3, r3
 8002710:	4909      	ldr	r1, [pc, #36]	@ (8002738 <HAL_GPIO_Init+0x304>)
 8002712:	4013      	ands	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	3301      	adds	r3, #1
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	f47f ae8e 	bne.w	8002448 <HAL_GPIO_Init+0x14>
  }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	372c      	adds	r7, #44	@ 0x2c
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	40010400 	.word	0x40010400

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	611a      	str	r2, [r3, #16]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	bc80      	pop	{r7}
 800276a:	4770      	bx	lr

0800276c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e036      	b.n	80027ec <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002786:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002790:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6852      	ldr	r2, [r2, #4]
 800279a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6892      	ldr	r2, [r2, #8]
 80027a4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80027a6:	f7fe fcdb 	bl	8001160 <HAL_GetTick>
 80027aa:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027ac:	e011      	b.n	80027d2 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80027ae:	f7fe fcd7 	bl	8001160 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	f241 323c 	movw	r2, #4924	@ 0x133c
 80027bc:	4293      	cmp	r3, r2
 80027be:	d908      	bls.n	80027d2 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e00c      	b.n	80027ec <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e6      	bne.n	80027ae <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80027e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002804:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
	...

08002814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e272      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8087 	beq.w	8002942 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002834:	4b92      	ldr	r3, [pc, #584]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 030c 	and.w	r3, r3, #12
 800283c:	2b04      	cmp	r3, #4
 800283e:	d00c      	beq.n	800285a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002840:	4b8f      	ldr	r3, [pc, #572]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 030c 	and.w	r3, r3, #12
 8002848:	2b08      	cmp	r3, #8
 800284a:	d112      	bne.n	8002872 <HAL_RCC_OscConfig+0x5e>
 800284c:	4b8c      	ldr	r3, [pc, #560]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002858:	d10b      	bne.n	8002872 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285a:	4b89      	ldr	r3, [pc, #548]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d06c      	beq.n	8002940 <HAL_RCC_OscConfig+0x12c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d168      	bne.n	8002940 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e24c      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800287a:	d106      	bne.n	800288a <HAL_RCC_OscConfig+0x76>
 800287c:	4b80      	ldr	r3, [pc, #512]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a7f      	ldr	r2, [pc, #508]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002886:	6013      	str	r3, [r2, #0]
 8002888:	e02e      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x98>
 8002892:	4b7b      	ldr	r3, [pc, #492]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a7a      	ldr	r2, [pc, #488]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b78      	ldr	r3, [pc, #480]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a77      	ldr	r2, [pc, #476]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e01d      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0xbc>
 80028b6:	4b72      	ldr	r3, [pc, #456]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a71      	ldr	r2, [pc, #452]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028cc:	6013      	str	r3, [r2, #0]
 80028ce:	e00b      	b.n	80028e8 <HAL_RCC_OscConfig+0xd4>
 80028d0:	4b6b      	ldr	r3, [pc, #428]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	4b68      	ldr	r3, [pc, #416]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a67      	ldr	r2, [pc, #412]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80028e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f0:	f7fe fc36 	bl	8001160 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f8:	f7fe fc32 	bl	8001160 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	@ 0x64
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e200      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0xe4>
 8002916:	e014      	b.n	8002942 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7fe fc22 	bl	8001160 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe fc1e 	bl	8001160 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	@ 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e1ec      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002932:	4b53      	ldr	r3, [pc, #332]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x10c>
 800293e:	e000      	b.n	8002942 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d063      	beq.n	8002a16 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800294e:	4b4c      	ldr	r3, [pc, #304]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00b      	beq.n	8002972 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800295a:	4b49      	ldr	r3, [pc, #292]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b08      	cmp	r3, #8
 8002964:	d11c      	bne.n	80029a0 <HAL_RCC_OscConfig+0x18c>
 8002966:	4b46      	ldr	r3, [pc, #280]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d116      	bne.n	80029a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	4b43      	ldr	r3, [pc, #268]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_RCC_OscConfig+0x176>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d001      	beq.n	800298a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e1c0      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800298a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	4939      	ldr	r1, [pc, #228]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299e:	e03a      	b.n	8002a16 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d020      	beq.n	80029ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a8:	4b36      	ldr	r3, [pc, #216]	@ (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ae:	f7fe fbd7 	bl	8001160 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b6:	f7fe fbd3 	bl	8001160 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e1a1      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d0f0      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4927      	ldr	r1, [pc, #156]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	600b      	str	r3, [r1, #0]
 80029e8:	e015      	b.n	8002a16 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ea:	4b26      	ldr	r3, [pc, #152]	@ (8002a84 <HAL_RCC_OscConfig+0x270>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f0:	f7fe fbb6 	bl	8001160 <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f8:	f7fe fbb2 	bl	8001160 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e180      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f0      	bne.n	80029f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d03a      	beq.n	8002a98 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d019      	beq.n	8002a5e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a2a:	4b17      	ldr	r3, [pc, #92]	@ (8002a88 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a30:	f7fe fb96 	bl	8001160 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a38:	f7fe fb92 	bl	8001160 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e160      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d0f0      	beq.n	8002a38 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a56:	2001      	movs	r0, #1
 8002a58:	f000 fad0 	bl	8002ffc <RCC_Delay>
 8002a5c:	e01c      	b.n	8002a98 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <HAL_RCC_OscConfig+0x274>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a64:	f7fe fb7c 	bl	8001160 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6a:	e00f      	b.n	8002a8c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6c:	f7fe fb78 	bl	8001160 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d908      	bls.n	8002a8c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e146      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	42420000 	.word	0x42420000
 8002a88:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	4b92      	ldr	r3, [pc, #584]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1e9      	bne.n	8002a6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 80a6 	beq.w	8002bf2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aaa:	4b8b      	ldr	r3, [pc, #556]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	69db      	ldr	r3, [r3, #28]
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	4b88      	ldr	r3, [pc, #544]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	4a87      	ldr	r2, [pc, #540]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	61d3      	str	r3, [r2, #28]
 8002ac2:	4b85      	ldr	r3, [pc, #532]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad2:	4b82      	ldr	r3, [pc, #520]	@ (8002cdc <HAL_RCC_OscConfig+0x4c8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d118      	bne.n	8002b10 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ade:	4b7f      	ldr	r3, [pc, #508]	@ (8002cdc <HAL_RCC_OscConfig+0x4c8>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cdc <HAL_RCC_OscConfig+0x4c8>)
 8002ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aea:	f7fe fb39 	bl	8001160 <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af0:	e008      	b.n	8002b04 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af2:	f7fe fb35 	bl	8001160 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b64      	cmp	r3, #100	@ 0x64
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e103      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b04:	4b75      	ldr	r3, [pc, #468]	@ (8002cdc <HAL_RCC_OscConfig+0x4c8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0f0      	beq.n	8002af2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d106      	bne.n	8002b26 <HAL_RCC_OscConfig+0x312>
 8002b18:	4b6f      	ldr	r3, [pc, #444]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4a6e      	ldr	r2, [pc, #440]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6213      	str	r3, [r2, #32]
 8002b24:	e02d      	b.n	8002b82 <HAL_RCC_OscConfig+0x36e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10c      	bne.n	8002b48 <HAL_RCC_OscConfig+0x334>
 8002b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4a69      	ldr	r2, [pc, #420]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	f023 0301 	bic.w	r3, r3, #1
 8002b38:	6213      	str	r3, [r2, #32]
 8002b3a:	4b67      	ldr	r3, [pc, #412]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4a66      	ldr	r2, [pc, #408]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b40:	f023 0304 	bic.w	r3, r3, #4
 8002b44:	6213      	str	r3, [r2, #32]
 8002b46:	e01c      	b.n	8002b82 <HAL_RCC_OscConfig+0x36e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	2b05      	cmp	r3, #5
 8002b4e:	d10c      	bne.n	8002b6a <HAL_RCC_OscConfig+0x356>
 8002b50:	4b61      	ldr	r3, [pc, #388]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4a60      	ldr	r2, [pc, #384]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	6213      	str	r3, [r2, #32]
 8002b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	4a5d      	ldr	r2, [pc, #372]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6213      	str	r3, [r2, #32]
 8002b68:	e00b      	b.n	8002b82 <HAL_RCC_OscConfig+0x36e>
 8002b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a5a      	ldr	r2, [pc, #360]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6213      	str	r3, [r2, #32]
 8002b76:	4b58      	ldr	r3, [pc, #352]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4a57      	ldr	r2, [pc, #348]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	f023 0304 	bic.w	r3, r3, #4
 8002b80:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d015      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fae9 	bl	8001160 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b90:	e00a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b92:	f7fe fae5 	bl	8001160 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e0b1      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ee      	beq.n	8002b92 <HAL_RCC_OscConfig+0x37e>
 8002bb4:	e014      	b.n	8002be0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bb6:	f7fe fad3 	bl	8001160 <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bbc:	e00a      	b.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bbe:	f7fe facf 	bl	8001160 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e09b      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd4:	4b40      	ldr	r3, [pc, #256]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1ee      	bne.n	8002bbe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002be0:	7dfb      	ldrb	r3, [r7, #23]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d105      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002be6:	4b3c      	ldr	r3, [pc, #240]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4a3b      	ldr	r2, [pc, #236]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bf0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 8087 	beq.w	8002d0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bfc:	4b36      	ldr	r3, [pc, #216]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d061      	beq.n	8002ccc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d146      	bne.n	8002c9e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c10:	4b33      	ldr	r3, [pc, #204]	@ (8002ce0 <HAL_RCC_OscConfig+0x4cc>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c16:	f7fe faa3 	bl	8001160 <HAL_GetTick>
 8002c1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c1c:	e008      	b.n	8002c30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1e:	f7fe fa9f 	bl	8001160 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d901      	bls.n	8002c30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e06d      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c30:	4b29      	ldr	r3, [pc, #164]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1f0      	bne.n	8002c1e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c46:	4b24      	ldr	r3, [pc, #144]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	4921      	ldr	r1, [pc, #132]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c58:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a19      	ldr	r1, [r3, #32]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	430b      	orrs	r3, r1
 8002c6a:	491b      	ldr	r1, [pc, #108]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce0 <HAL_RCC_OscConfig+0x4cc>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe fa73 	bl	8001160 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7fe fa6f 	bl	8001160 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e03d      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c90:	4b11      	ldr	r3, [pc, #68]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x46a>
 8002c9c:	e035      	b.n	8002d0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <HAL_RCC_OscConfig+0x4cc>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fa5c 	bl	8001160 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe fa58 	bl	8001160 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e026      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cbe:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x498>
 8002cca:	e01e      	b.n	8002d0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e019      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_OscConfig+0x500>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d106      	bne.n	8002d06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d001      	beq.n	8002d0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40021000 	.word	0x40021000

08002d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e0d0      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d910      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b67      	ldr	r3, [pc, #412]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 0207 	bic.w	r2, r3, #7
 8002d42:	4965      	ldr	r1, [pc, #404]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b63      	ldr	r3, [pc, #396]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d001      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e0b8      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d74:	4b59      	ldr	r3, [pc, #356]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a58      	ldr	r2, [pc, #352]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d8c:	4b53      	ldr	r3, [pc, #332]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4a52      	ldr	r2, [pc, #328]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d98:	4b50      	ldr	r3, [pc, #320]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	494d      	ldr	r1, [pc, #308]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d040      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d107      	bne.n	8002dce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	4b47      	ldr	r3, [pc, #284]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d115      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e07f      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dd6:	4b41      	ldr	r3, [pc, #260]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e073      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de6:	4b3d      	ldr	r3, [pc, #244]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e06b      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df6:	4b39      	ldr	r3, [pc, #228]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f023 0203 	bic.w	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4936      	ldr	r1, [pc, #216]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e08:	f7fe f9aa 	bl	8001160 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0e:	e00a      	b.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e10:	f7fe f9a6 	bl	8001160 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e053      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e26:	4b2d      	ldr	r3, [pc, #180]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f003 020c 	and.w	r2, r3, #12
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d1eb      	bne.n	8002e10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e38:	4b27      	ldr	r3, [pc, #156]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d210      	bcs.n	8002e68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e46:	4b24      	ldr	r3, [pc, #144]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 0207 	bic.w	r2, r3, #7
 8002e4e:	4922      	ldr	r1, [pc, #136]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e56:	4b20      	ldr	r3, [pc, #128]	@ (8002ed8 <HAL_RCC_ClockConfig+0x1c0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d001      	beq.n	8002e68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e032      	b.n	8002ece <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e74:	4b19      	ldr	r3, [pc, #100]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4916      	ldr	r1, [pc, #88]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d009      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e92:	4b12      	ldr	r3, [pc, #72]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	490e      	ldr	r1, [pc, #56]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ea6:	f000 f821 	bl	8002eec <HAL_RCC_GetSysClockFreq>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCC_ClockConfig+0x1c4>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	091b      	lsrs	r3, r3, #4
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	490a      	ldr	r1, [pc, #40]	@ (8002ee0 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb8:	5ccb      	ldrb	r3, [r1, r3]
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	4a09      	ldr	r2, [pc, #36]	@ (8002ee4 <HAL_RCC_ClockConfig+0x1cc>)
 8002ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ec2:	4b09      	ldr	r3, [pc, #36]	@ (8002ee8 <HAL_RCC_ClockConfig+0x1d0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe f908 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40022000 	.word	0x40022000
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	080048e4 	.word	0x080048e4
 8002ee4:	20000000 	.word	0x20000000
 8002ee8:	20000004 	.word	0x20000004

08002eec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b087      	sub	sp, #28
 8002ef0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60bb      	str	r3, [r7, #8]
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	2300      	movs	r3, #0
 8002f00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f06:	4b1e      	ldr	r3, [pc, #120]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f003 030c 	and.w	r3, r3, #12
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d002      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0x30>
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0x36>
 8002f1a:	e027      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f1c:	4b19      	ldr	r3, [pc, #100]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f1e:	613b      	str	r3, [r7, #16]
      break;
 8002f20:	e027      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	0c9b      	lsrs	r3, r3, #18
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	4a17      	ldr	r2, [pc, #92]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
 8002f2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f3a:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	0c5b      	lsrs	r3, r3, #17
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	4a11      	ldr	r2, [pc, #68]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f46:	5cd3      	ldrb	r3, [r2, r3]
 8002f48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f4e:	fb03 f202 	mul.w	r2, r3, r2
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e004      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f60:	fb02 f303 	mul.w	r3, r2, r3
 8002f64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	613b      	str	r3, [r7, #16]
      break;
 8002f6a:	e002      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f6e:	613b      	str	r3, [r7, #16]
      break;
 8002f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f72:	693b      	ldr	r3, [r7, #16]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	371c      	adds	r7, #28
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	080048fc 	.word	0x080048fc
 8002f8c:	0800490c 	.word	0x0800490c
 8002f90:	003d0900 	.word	0x003d0900
 8002f94:	007a1200 	.word	0x007a1200

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b02      	ldr	r3, [pc, #8]	@ (8002fa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	20000000 	.word	0x20000000

08002fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb0:	f7ff fff2 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4903      	ldr	r1, [pc, #12]	@ (8002fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40021000 	.word	0x40021000
 8002fd0:	080048f4 	.word	0x080048f4

08002fd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fd8:	f7ff ffde 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	0adb      	lsrs	r3, r3, #11
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	4903      	ldr	r1, [pc, #12]	@ (8002ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fea:	5ccb      	ldrb	r3, [r1, r3]
 8002fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	080048f4 	.word	0x080048f4

08002ffc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003004:	4b0a      	ldr	r3, [pc, #40]	@ (8003030 <RCC_Delay+0x34>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <RCC_Delay+0x38>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	0a5b      	lsrs	r3, r3, #9
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003018:	bf00      	nop
  }
  while (Delay --);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e5a      	subs	r2, r3, #1
 800301e:	60fa      	str	r2, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f9      	bne.n	8003018 <RCC_Delay+0x1c>
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr
 8003030:	20000000 	.word	0x20000000
 8003034:	10624dd3 	.word	0x10624dd3

08003038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e041      	b.n	80030ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fd ff04 	bl	8000e6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	4619      	mov	r1, r3
 8003076:	4610      	mov	r0, r2
 8003078:	f000 fa5c 	bl	8003534 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d001      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e03a      	b.n	8003166 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <HAL_TIM_Base_Start_IT+0x98>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00e      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x58>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800311a:	d009      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x58>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a14      	ldr	r2, [pc, #80]	@ (8003174 <HAL_TIM_Base_Start_IT+0x9c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x58>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a13      	ldr	r2, [pc, #76]	@ (8003178 <HAL_TIM_Base_Start_IT+0xa0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d111      	bne.n	8003154 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b06      	cmp	r3, #6
 8003140:	d010      	beq.n	8003164 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f042 0201 	orr.w	r2, r2, #1
 8003150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003152:	e007      	b.n	8003164 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr
 8003170:	40012c00 	.word	0x40012c00
 8003174:	40000400 	.word	0x40000400
 8003178:	40000800 	.word	0x40000800

0800317c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d020      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d01b      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0202 	mvn.w	r2, #2
 80031b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f998 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 80031cc:	e005      	b.n	80031da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f98b 	bl	80034ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f99a 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d020      	beq.n	800322c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d01b      	beq.n	800322c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0204 	mvn.w	r2, #4
 80031fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f972 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f965 	bl	80034ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f974 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f003 0308 	and.w	r3, r3, #8
 8003232:	2b00      	cmp	r3, #0
 8003234:	d020      	beq.n	8003278 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 0308 	and.w	r3, r3, #8
 800323c:	2b00      	cmp	r3, #0
 800323e:	d01b      	beq.n	8003278 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f06f 0208 	mvn.w	r2, #8
 8003248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2204      	movs	r2, #4
 800324e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	f003 0303 	and.w	r3, r3, #3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f94c 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 8003264:	e005      	b.n	8003272 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f93f 	bl	80034ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f94e 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b00      	cmp	r3, #0
 8003280:	d020      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01b      	beq.n	80032c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0210 	mvn.w	r2, #16
 8003294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2208      	movs	r2, #8
 800329a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f926 	bl	80034fc <HAL_TIM_IC_CaptureCallback>
 80032b0:	e005      	b.n	80032be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f919 	bl	80034ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f928 	bl	800350e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00c      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d007      	beq.n	80032e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0201 	mvn.w	r2, #1
 80032e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd f8d0 	bl	8000488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00c      	beq.n	800330c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d007      	beq.n	800330c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 fa7f 	bl	800380a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00c      	beq.n	8003330 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8f8 	bl	8003520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00c      	beq.n	8003354 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f06f 0220 	mvn.w	r2, #32
 800334c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fa52 	bl	80037f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003370:	2b01      	cmp	r3, #1
 8003372:	d101      	bne.n	8003378 <HAL_TIM_ConfigClockSource+0x1c>
 8003374:	2302      	movs	r3, #2
 8003376:	e0b4      	b.n	80034e2 <HAL_TIM_ConfigClockSource+0x186>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800339e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68ba      	ldr	r2, [r7, #8]
 80033a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b0:	d03e      	beq.n	8003430 <HAL_TIM_ConfigClockSource+0xd4>
 80033b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033b6:	f200 8087 	bhi.w	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033be:	f000 8086 	beq.w	80034ce <HAL_TIM_ConfigClockSource+0x172>
 80033c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80033c6:	d87f      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033c8:	2b70      	cmp	r3, #112	@ 0x70
 80033ca:	d01a      	beq.n	8003402 <HAL_TIM_ConfigClockSource+0xa6>
 80033cc:	2b70      	cmp	r3, #112	@ 0x70
 80033ce:	d87b      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033d0:	2b60      	cmp	r3, #96	@ 0x60
 80033d2:	d050      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x11a>
 80033d4:	2b60      	cmp	r3, #96	@ 0x60
 80033d6:	d877      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033d8:	2b50      	cmp	r3, #80	@ 0x50
 80033da:	d03c      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0xfa>
 80033dc:	2b50      	cmp	r3, #80	@ 0x50
 80033de:	d873      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033e0:	2b40      	cmp	r3, #64	@ 0x40
 80033e2:	d058      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0x13a>
 80033e4:	2b40      	cmp	r3, #64	@ 0x40
 80033e6:	d86f      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033e8:	2b30      	cmp	r3, #48	@ 0x30
 80033ea:	d064      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x15a>
 80033ec:	2b30      	cmp	r3, #48	@ 0x30
 80033ee:	d86b      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d060      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x15a>
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d867      	bhi.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d05c      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x15a>
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d05a      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x15a>
 8003400:	e062      	b.n	80034c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003412:	f000 f974 	bl	80036fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003424:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	609a      	str	r2, [r3, #8]
      break;
 800342e:	e04f      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003440:	f000 f95d 	bl	80036fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003452:	609a      	str	r2, [r3, #8]
      break;
 8003454:	e03c      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003462:	461a      	mov	r2, r3
 8003464:	f000 f8d4 	bl	8003610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2150      	movs	r1, #80	@ 0x50
 800346e:	4618      	mov	r0, r3
 8003470:	f000 f92b 	bl	80036ca <TIM_ITRx_SetConfig>
      break;
 8003474:	e02c      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003482:	461a      	mov	r2, r3
 8003484:	f000 f8f2 	bl	800366c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2160      	movs	r1, #96	@ 0x60
 800348e:	4618      	mov	r0, r3
 8003490:	f000 f91b 	bl	80036ca <TIM_ITRx_SetConfig>
      break;
 8003494:	e01c      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a2:	461a      	mov	r2, r3
 80034a4:	f000 f8b4 	bl	8003610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2140      	movs	r1, #64	@ 0x40
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f90b 	bl	80036ca <TIM_ITRx_SetConfig>
      break;
 80034b4:	e00c      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4619      	mov	r1, r3
 80034c0:	4610      	mov	r0, r2
 80034c2:	f000 f902 	bl	80036ca <TIM_ITRx_SetConfig>
      break;
 80034c6:	e003      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	73fb      	strb	r3, [r7, #15]
      break;
 80034cc:	e000      	b.n	80034d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f2:	bf00      	nop
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr

080034fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr

0800350e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	bc80      	pop	{r7}
 8003530:	4770      	bx	lr
	...

08003534 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a2f      	ldr	r2, [pc, #188]	@ (8003604 <TIM_Base_SetConfig+0xd0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00b      	beq.n	8003564 <TIM_Base_SetConfig+0x30>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003552:	d007      	beq.n	8003564 <TIM_Base_SetConfig+0x30>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a2c      	ldr	r2, [pc, #176]	@ (8003608 <TIM_Base_SetConfig+0xd4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_Base_SetConfig+0x30>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a2b      	ldr	r2, [pc, #172]	@ (800360c <TIM_Base_SetConfig+0xd8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d108      	bne.n	8003576 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800356a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a22      	ldr	r2, [pc, #136]	@ (8003604 <TIM_Base_SetConfig+0xd0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d00b      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003584:	d007      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1f      	ldr	r2, [pc, #124]	@ (8003608 <TIM_Base_SetConfig+0xd4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d003      	beq.n	8003596 <TIM_Base_SetConfig+0x62>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1e      	ldr	r2, [pc, #120]	@ (800360c <TIM_Base_SetConfig+0xd8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d108      	bne.n	80035a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800359c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003604 <TIM_Base_SetConfig+0xd0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d005      	beq.n	80035fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f023 0201 	bic.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	611a      	str	r2, [r3, #16]
  }
}
 80035fa:	bf00      	nop
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr
 8003604:	40012c00 	.word	0x40012c00
 8003608:	40000400 	.word	0x40000400
 800360c:	40000800 	.word	0x40000800

08003610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	f023 0201 	bic.w	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800363a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4313      	orrs	r3, r2
 8003644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 030a 	bic.w	r3, r3, #10
 800364c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4313      	orrs	r3, r2
 8003654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f023 0210 	bic.w	r2, r3, #16
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	031b      	lsls	r3, r3, #12
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	4313      	orrs	r3, r2
 80036a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80036a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	621a      	str	r2, [r3, #32]
}
 80036c0:	bf00      	nop
 80036c2:	371c      	adds	r7, #28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bc80      	pop	{r7}
 80036c8:	4770      	bx	lr

080036ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b085      	sub	sp, #20
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f043 0307 	orr.w	r3, r3, #7
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	609a      	str	r2, [r3, #8]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036fe:	b480      	push	{r7}
 8003700:	b087      	sub	sp, #28
 8003702:	af00      	add	r7, sp, #0
 8003704:	60f8      	str	r0, [r7, #12]
 8003706:	60b9      	str	r1, [r7, #8]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003718:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	021a      	lsls	r2, r3, #8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	431a      	orrs	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4313      	orrs	r3, r2
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	609a      	str	r2, [r3, #8]
}
 8003732:	bf00      	nop
 8003734:	371c      	adds	r7, #28
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr

0800373c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003750:	2302      	movs	r3, #2
 8003752:	e046      	b.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a16      	ldr	r2, [pc, #88]	@ (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d00e      	beq.n	80037b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a0:	d009      	beq.n	80037b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a12      	ldr	r2, [pc, #72]	@ (80037f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d004      	beq.n	80037b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a10      	ldr	r2, [pc, #64]	@ (80037f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d10c      	bne.n	80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	40012c00 	.word	0x40012c00
 80037f0:	40000400 	.word	0x40000400
 80037f4:	40000800 	.word	0x40000800

080037f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bc80      	pop	{r7}
 8003808:	4770      	bx	lr

0800380a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003812:	bf00      	nop
 8003814:	370c      	adds	r7, #12
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr

0800381c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e042      	b.n	80038b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fb38 	bl	8000eb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	@ 0x24
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800385e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 ff79 	bl	8004758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	@ 0x28
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	4613      	mov	r3, r2
 80038ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d175      	bne.n	80039c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_UART_Transmit+0x2c>
 80038e2:	88fb      	ldrh	r3, [r7, #6]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e06e      	b.n	80039ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2221      	movs	r2, #33	@ 0x21
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038fa:	f7fd fc31 	bl	8001160 <HAL_GetTick>
 80038fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003914:	d108      	bne.n	8003928 <HAL_UART_Transmit+0x6c>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e003      	b.n	8003930 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003930:	e02e      	b.n	8003990 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2200      	movs	r2, #0
 800393a:	2180      	movs	r1, #128	@ 0x80
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fc55 	bl	80041ec <UART_WaitOnFlagUntilTimeout>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2220      	movs	r2, #32
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e03a      	b.n	80039ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003968:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	3302      	adds	r3, #2
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e007      	b.n	8003982 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	781a      	ldrb	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	3301      	adds	r3, #1
 8003980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1cb      	bne.n	8003932 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2140      	movs	r1, #64	@ 0x40
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fc21 	bl	80041ec <UART_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e006      	b.n	80039ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	e000      	b.n	80039ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
  }
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3720      	adds	r7, #32
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b08c      	sub	sp, #48	@ 0x30
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	4613      	mov	r3, r2
 80039de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b20      	cmp	r3, #32
 80039ea:	d146      	bne.n	8003a7a <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d101      	bne.n	80039fc <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e03f      	b.n	8003a7c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2201      	movs	r2, #1
 8003a00:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003a08:	88fb      	ldrh	r3, [r7, #6]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fc46 	bl	80042a0 <UART_Start_Receive_DMA>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d125      	bne.n	8003a6e <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a22:	2300      	movs	r3, #0
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	e853 3f00 	ldrex	r3, [r3]
 8003a46:	617b      	str	r3, [r7, #20]
   return(result);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f043 0310 	orr.w	r3, r3, #16
 8003a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	330c      	adds	r3, #12
 8003a56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a58:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a5a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5c:	6a39      	ldr	r1, [r7, #32]
 8003a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a60:	e841 2300 	strex	r3, r2, [r1]
 8003a64:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1e5      	bne.n	8003a38 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8003a6c:	e002      	b.n	8003a74 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8003a74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003a78:	e000      	b.n	8003a7c <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
  }
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3730      	adds	r7, #48	@ 0x30
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b0ba      	sub	sp, #232	@ 0xe8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10f      	bne.n	8003aea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_UART_IRQHandler+0x66>
 8003ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fd7a 	bl	80045dc <UART_Receive_IT>
      return;
 8003ae8:	e25b      	b.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003aea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 80de 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x22c>
 8003af4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d106      	bne.n	8003b0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80d1 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_UART_IRQHandler+0xae>
 8003b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b36:	f003 0304 	and.w	r3, r3, #4
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <HAL_UART_IRQHandler+0xd2>
 8003b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4e:	f043 0202 	orr.w	r2, r3, #2
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00b      	beq.n	8003b7a <HAL_UART_IRQHandler+0xf6>
 8003b62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	f043 0204 	orr.w	r2, r3, #4
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d011      	beq.n	8003baa <HAL_UART_IRQHandler+0x126>
 8003b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d105      	bne.n	8003b9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	f043 0208 	orr.w	r2, r3, #8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 81f2 	beq.w	8003f98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb8:	f003 0320 	and.w	r3, r3, #32
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x14e>
 8003bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fd05 	bl	80045dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	bf14      	ite	ne
 8003be0:	2301      	movne	r3, #1
 8003be2:	2300      	moveq	r3, #0
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d103      	bne.n	8003bfe <HAL_UART_IRQHandler+0x17a>
 8003bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d04f      	beq.n	8003c9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 fc0f 	bl	8004422 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d041      	beq.n	8003c96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3314      	adds	r3, #20
 8003c18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3314      	adds	r3, #20
 8003c3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1d9      	bne.n	8003c12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d013      	beq.n	8003c8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e64 <HAL_UART_IRQHandler+0x3e0>)
 8003c6c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe fa32 	bl	80020dc <HAL_DMA_Abort_IT>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	e00e      	b.n	8003cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f9a5 	bl	8003fde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	e00a      	b.n	8003cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f9a1 	bl	8003fde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	e006      	b.n	8003cac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f99d 	bl	8003fde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003caa:	e175      	b.n	8003f98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cac:	bf00      	nop
    return;
 8003cae:	e173      	b.n	8003f98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	f040 814f 	bne.w	8003f58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8148 	beq.w	8003f58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 8141 	beq.w	8003f58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	f000 80b6 	beq.w	8003e68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f000 8145 	beq.w	8003f9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	f080 813e 	bcs.w	8003f9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	f000 8088 	beq.w	8003e44 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d42:	e853 3f00 	ldrex	r3, [r3]
 8003d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d60:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d6c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d70:	e841 2300 	strex	r3, r2, [r1]
 8003d74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1d9      	bne.n	8003d34 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3314      	adds	r3, #20
 8003d86:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d8a:	e853 3f00 	ldrex	r3, [r3]
 8003d8e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d90:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d92:	f023 0301 	bic.w	r3, r3, #1
 8003d96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3314      	adds	r3, #20
 8003da0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003da4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003da8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003dac:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003db6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e1      	bne.n	8003d80 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3314      	adds	r3, #20
 8003dc2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dd2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3314      	adds	r3, #20
 8003ddc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003de0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003de2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003de6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003dee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e3      	bne.n	8003dbc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	330c      	adds	r3, #12
 8003e08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e0c:	e853 3f00 	ldrex	r3, [r3]
 8003e10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e14:	f023 0310 	bic.w	r3, r3, #16
 8003e18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003e26:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e28:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e2e:	e841 2300 	strex	r3, r2, [r1]
 8003e32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1e3      	bne.n	8003e02 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fe f910 	bl	8002064 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fc fad8 	bl	8000410 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e60:	e09c      	b.n	8003f9c <HAL_UART_IRQHandler+0x518>
 8003e62:	bf00      	nop
 8003e64:	080044e7 	.word	0x080044e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 808e 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 8089 	beq.w	8003fa0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e98:	e853 3f00 	ldrex	r3, [r3]
 8003e9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ea4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	330c      	adds	r3, #12
 8003eae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003eb2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003eb4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003eb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003eba:	e841 2300 	strex	r3, r2, [r1]
 8003ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1e3      	bne.n	8003e8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3314      	adds	r3, #20
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f023 0301 	bic.w	r3, r3, #1
 8003edc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	3314      	adds	r3, #20
 8003ee6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003eea:	633a      	str	r2, [r7, #48]	@ 0x30
 8003eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef2:	e841 2300 	strex	r3, r2, [r1]
 8003ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1e3      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0310 	bic.w	r3, r3, #16
 8003f22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	330c      	adds	r3, #12
 8003f2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f30:	61fa      	str	r2, [r7, #28]
 8003f32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f34:	69b9      	ldr	r1, [r7, #24]
 8003f36:	69fa      	ldr	r2, [r7, #28]
 8003f38:	e841 2300 	strex	r3, r2, [r1]
 8003f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e3      	bne.n	8003f0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f7fc fa5d 	bl	8000410 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f56:	e023      	b.n	8003fa0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d009      	beq.n	8003f78 <HAL_UART_IRQHandler+0x4f4>
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 facc 	bl	800450e <UART_Transmit_IT>
    return;
 8003f76:	e014      	b.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d008      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 fb0b 	bl	80045ac <UART_EndTransmit_IT>
    return;
 8003f96:	e004      	b.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f98:	bf00      	nop
 8003f9a:	e002      	b.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f9c:	bf00      	nop
 8003f9e:	e000      	b.n	8003fa2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003fa0:	bf00      	nop
  }
}
 8003fa2:	37e8      	adds	r7, #232	@ 0xe8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b083      	sub	sp, #12
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fc2:	bf00      	nop
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bc80      	pop	{r7}
 8003fca:	4770      	bx	lr

08003fcc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr

08003fde <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bc80      	pop	{r7}
 8003fee:	4770      	bx	lr

08003ff0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b09c      	sub	sp, #112	@ 0x70
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b00      	cmp	r3, #0
 800400a:	d172      	bne.n	80040f2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800400c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800400e:	2200      	movs	r2, #0
 8004010:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004012:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	330c      	adds	r3, #12
 8004018:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004022:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800402a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	330c      	adds	r3, #12
 8004030:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004032:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004034:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004038:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e5      	bne.n	8004012 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3314      	adds	r3, #20
 800404c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	667b      	str	r3, [r7, #100]	@ 0x64
 800405e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3314      	adds	r3, #20
 8004064:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004066:	647a      	str	r2, [r7, #68]	@ 0x44
 8004068:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800406c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800407a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3314      	adds	r3, #20
 8004080:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	623b      	str	r3, [r7, #32]
   return(result);
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004090:	663b      	str	r3, [r7, #96]	@ 0x60
 8004092:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3314      	adds	r3, #20
 8004098:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800409a:	633a      	str	r2, [r7, #48]	@ 0x30
 800409c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040a2:	e841 2300 	strex	r3, r2, [r1]
 80040a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1e5      	bne.n	800407a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d119      	bne.n	80040f2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f023 0310 	bic.w	r3, r3, #16
 80040d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	330c      	adds	r3, #12
 80040dc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80040de:	61fa      	str	r2, [r7, #28]
 80040e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	69b9      	ldr	r1, [r7, #24]
 80040e4:	69fa      	ldr	r2, [r7, #28]
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	617b      	str	r3, [r7, #20]
   return(result);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1e5      	bne.n	80040be <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040f4:	2200      	movs	r2, #0
 80040f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d106      	bne.n	800410e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004102:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004104:	4619      	mov	r1, r3
 8004106:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004108:	f7fc f982 	bl	8000410 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800410c:	e002      	b.n	8004114 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800410e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004110:	f7ff ff53 	bl	8003fba <HAL_UART_RxCpltCallback>
}
 8004114:	bf00      	nop
 8004116:	3770      	adds	r7, #112	@ 0x70
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}

0800411c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004128:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004134:	2b01      	cmp	r3, #1
 8004136:	d108      	bne.n	800414a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	b29b      	uxth	r3, r3
 8004140:	4619      	mov	r1, r3
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7fc f964 	bl	8000410 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004148:	e002      	b.n	8004150 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f7ff ff3e 	bl	8003fcc <HAL_UART_RxHalfCpltCallback>
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004174:	2b00      	cmp	r3, #0
 8004176:	bf14      	ite	ne
 8004178:	2301      	movne	r3, #1
 800417a:	2300      	moveq	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b21      	cmp	r3, #33	@ 0x21
 800418a:	d108      	bne.n	800419e <UART_DMAError+0x46>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2200      	movs	r2, #0
 8004196:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004198:	68b8      	ldr	r0, [r7, #8]
 800419a:	f000 f91b 	bl	80043d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bf14      	ite	ne
 80041ac:	2301      	movne	r3, #1
 80041ae:	2300      	moveq	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b22      	cmp	r3, #34	@ 0x22
 80041be:	d108      	bne.n	80041d2 <UART_DMAError+0x7a>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2200      	movs	r2, #0
 80041ca:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80041cc:	68b8      	ldr	r0, [r7, #8]
 80041ce:	f000 f928 	bl	8004422 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d6:	f043 0210 	orr.w	r2, r3, #16
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041de:	68b8      	ldr	r0, [r7, #8]
 80041e0:	f7ff fefd 	bl	8003fde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041e4:	bf00      	nop
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041fc:	e03b      	b.n	8004276 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004204:	d037      	beq.n	8004276 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004206:	f7fc ffab 	bl	8001160 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	6a3a      	ldr	r2, [r7, #32]
 8004212:	429a      	cmp	r2, r3
 8004214:	d302      	bcc.n	800421c <UART_WaitOnFlagUntilTimeout+0x30>
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e03a      	b.n	8004296 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0304 	and.w	r3, r3, #4
 800422a:	2b00      	cmp	r3, #0
 800422c:	d023      	beq.n	8004276 <UART_WaitOnFlagUntilTimeout+0x8a>
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	2b80      	cmp	r3, #128	@ 0x80
 8004232:	d020      	beq.n	8004276 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b40      	cmp	r3, #64	@ 0x40
 8004238:	d01d      	beq.n	8004276 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0308 	and.w	r3, r3, #8
 8004244:	2b08      	cmp	r3, #8
 8004246:	d116      	bne.n	8004276 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f8df 	bl	8004422 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2208      	movs	r2, #8
 8004268:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e00f      	b.n	8004296 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	429a      	cmp	r2, r3
 8004284:	bf0c      	ite	eq
 8004286:	2301      	moveq	r3, #1
 8004288:	2300      	movne	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	79fb      	ldrb	r3, [r7, #7]
 8004290:	429a      	cmp	r2, r3
 8004292:	d0b4      	beq.n	80041fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b098      	sub	sp, #96	@ 0x60
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	88fa      	ldrh	r2, [r7, #6]
 80042b8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2222      	movs	r2, #34	@ 0x22
 80042c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042cc:	4a3e      	ldr	r2, [pc, #248]	@ (80043c8 <UART_Start_Receive_DMA+0x128>)
 80042ce:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d4:	4a3d      	ldr	r2, [pc, #244]	@ (80043cc <UART_Start_Receive_DMA+0x12c>)
 80042d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042dc:	4a3c      	ldr	r2, [pc, #240]	@ (80043d0 <UART_Start_Receive_DMA+0x130>)
 80042de:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e4:	2200      	movs	r2, #0
 80042e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80042e8:	f107 0308 	add.w	r3, r7, #8
 80042ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3304      	adds	r3, #4
 80042f8:	4619      	mov	r1, r3
 80042fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	f7fd fe50 	bl	8001fa4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004304:	2300      	movs	r3, #0
 8004306:	613b      	str	r3, [r7, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d019      	beq.n	8004356 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	330c      	adds	r3, #12
 8004328:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004338:	65bb      	str	r3, [r7, #88]	@ 0x58
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	330c      	adds	r3, #12
 8004340:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004342:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004344:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004346:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004348:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800434a:	e841 2300 	strex	r3, r2, [r1]
 800434e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1e5      	bne.n	8004322 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	3314      	adds	r3, #20
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004360:	e853 3f00 	ldrex	r3, [r3]
 8004364:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	657b      	str	r3, [r7, #84]	@ 0x54
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3314      	adds	r3, #20
 8004374:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004376:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004378:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800437c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e5      	bne.n	8004356 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3314      	adds	r3, #20
 8004390:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	617b      	str	r3, [r7, #20]
   return(result);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	3314      	adds	r3, #20
 80043a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80043aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80043ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	6a39      	ldr	r1, [r7, #32]
 80043b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e5      	bne.n	800438a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3760      	adds	r7, #96	@ 0x60
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	08003ff1 	.word	0x08003ff1
 80043cc:	0800411d 	.word	0x0800411d
 80043d0:	08004159 	.word	0x08004159

080043d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b089      	sub	sp, #36	@ 0x24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	61ba      	str	r2, [r7, #24]
 80043fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6979      	ldr	r1, [r7, #20]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	613b      	str	r3, [r7, #16]
   return(result);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e5      	bne.n	80043dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004418:	bf00      	nop
 800441a:	3724      	adds	r7, #36	@ 0x24
 800441c:	46bd      	mov	sp, r7
 800441e:	bc80      	pop	{r7}
 8004420:	4770      	bx	lr

08004422 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004422:	b480      	push	{r7}
 8004424:	b095      	sub	sp, #84	@ 0x54
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	330c      	adds	r3, #12
 8004430:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	330c      	adds	r3, #12
 8004448:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800444a:	643a      	str	r2, [r7, #64]	@ 0x40
 800444c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004450:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e5      	bne.n	800442a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3314      	adds	r3, #20
 8004464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	61fb      	str	r3, [r7, #28]
   return(result);
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	3314      	adds	r3, #20
 800447c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800447e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004480:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004482:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004486:	e841 2300 	strex	r3, r2, [r1]
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800448c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1e5      	bne.n	800445e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004496:	2b01      	cmp	r3, #1
 8004498:	d119      	bne.n	80044ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	330c      	adds	r3, #12
 80044a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	e853 3f00 	ldrex	r3, [r3]
 80044a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f023 0310 	bic.w	r3, r3, #16
 80044b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	330c      	adds	r3, #12
 80044b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044ba:	61ba      	str	r2, [r7, #24]
 80044bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044be:	6979      	ldr	r1, [r7, #20]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	e841 2300 	strex	r3, r2, [r1]
 80044c6:	613b      	str	r3, [r7, #16]
   return(result);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1e5      	bne.n	800449a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044dc:	bf00      	nop
 80044de:	3754      	adds	r7, #84	@ 0x54
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f7ff fd6c 	bl	8003fde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b21      	cmp	r3, #33	@ 0x21
 8004520:	d13e      	bne.n	80045a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800452a:	d114      	bne.n	8004556 <UART_Transmit_IT+0x48>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d110      	bne.n	8004556 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a1b      	ldr	r3, [r3, #32]
 8004538:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004548:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	1c9a      	adds	r2, r3, #2
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	621a      	str	r2, [r3, #32]
 8004554:	e008      	b.n	8004568 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	1c59      	adds	r1, r3, #1
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	6211      	str	r1, [r2, #32]
 8004560:	781a      	ldrb	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29b      	uxth	r3, r3
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	4619      	mov	r1, r3
 8004576:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10f      	bne.n	800459c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800458a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800459a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	e000      	b.n	80045a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80045a0:	2302      	movs	r3, #2
  }
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bc80      	pop	{r7}
 80045aa:	4770      	bx	lr

080045ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff fceb 	bl	8003fa8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08c      	sub	sp, #48	@ 0x30
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	2b22      	cmp	r3, #34	@ 0x22
 80045ee:	f040 80ae 	bne.w	800474e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045fa:	d117      	bne.n	800462c <UART_Receive_IT+0x50>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d113      	bne.n	800462c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	b29b      	uxth	r3, r3
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	b29a      	uxth	r2, r3
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004624:	1c9a      	adds	r2, r3, #2
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	629a      	str	r2, [r3, #40]	@ 0x28
 800462a:	e026      	b.n	800467a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004630:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800463e:	d007      	beq.n	8004650 <UART_Receive_IT+0x74>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <UART_Receive_IT+0x82>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e008      	b.n	8004670 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	b2db      	uxtb	r3, r3
 8004666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800466a:	b2da      	uxtb	r2, r3
 800466c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29b      	uxth	r3, r3
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	4619      	mov	r1, r3
 8004688:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800468a:	2b00      	cmp	r3, #0
 800468c:	d15d      	bne.n	800474a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0220 	bic.w	r2, r2, #32
 800469c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695a      	ldr	r2, [r3, #20]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d135      	bne.n	8004740 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f023 0310 	bic.w	r3, r3, #16
 80046f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	330c      	adds	r3, #12
 80046f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046fa:	623a      	str	r2, [r7, #32]
 80046fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	69f9      	ldr	r1, [r7, #28]
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	61bb      	str	r3, [r7, #24]
   return(result);
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e5      	bne.n	80046da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0310 	and.w	r3, r3, #16
 8004718:	2b10      	cmp	r3, #16
 800471a:	d10a      	bne.n	8004732 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7fb fe69 	bl	8000410 <HAL_UARTEx_RxEventCallback>
 800473e:	e002      	b.n	8004746 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff fc3a 	bl	8003fba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004746:	2300      	movs	r3, #0
 8004748:	e002      	b.n	8004750 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	e000      	b.n	8004750 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800474e:	2302      	movs	r3, #2
  }
}
 8004750:	4618      	mov	r0, r3
 8004752:	3730      	adds	r7, #48	@ 0x30
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004792:	f023 030c 	bic.w	r3, r3, #12
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	430b      	orrs	r3, r1
 800479e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2c      	ldr	r2, [pc, #176]	@ (800486c <UART_SetConfig+0x114>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d103      	bne.n	80047c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047c0:	f7fe fc08 	bl	8002fd4 <HAL_RCC_GetPCLK2Freq>
 80047c4:	60f8      	str	r0, [r7, #12]
 80047c6:	e002      	b.n	80047ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047c8:	f7fe fbf0 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 80047cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	4613      	mov	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	4413      	add	r3, r2
 80047d6:	009a      	lsls	r2, r3, #2
 80047d8:	441a      	add	r2, r3
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	4a22      	ldr	r2, [pc, #136]	@ (8004870 <UART_SetConfig+0x118>)
 80047e6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	0119      	lsls	r1, r3, #4
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	009a      	lsls	r2, r3, #2
 80047f8:	441a      	add	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	fbb2 f2f3 	udiv	r2, r2, r3
 8004804:	4b1a      	ldr	r3, [pc, #104]	@ (8004870 <UART_SetConfig+0x118>)
 8004806:	fba3 0302 	umull	r0, r3, r3, r2
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2064      	movs	r0, #100	@ 0x64
 800480e:	fb00 f303 	mul.w	r3, r0, r3
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	3332      	adds	r3, #50	@ 0x32
 8004818:	4a15      	ldr	r2, [pc, #84]	@ (8004870 <UART_SetConfig+0x118>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004824:	4419      	add	r1, r3
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	009a      	lsls	r2, r3, #2
 8004830:	441a      	add	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	fbb2 f2f3 	udiv	r2, r2, r3
 800483c:	4b0c      	ldr	r3, [pc, #48]	@ (8004870 <UART_SetConfig+0x118>)
 800483e:	fba3 0302 	umull	r0, r3, r3, r2
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	2064      	movs	r0, #100	@ 0x64
 8004846:	fb00 f303 	mul.w	r3, r0, r3
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	3332      	adds	r3, #50	@ 0x32
 8004850:	4a07      	ldr	r2, [pc, #28]	@ (8004870 <UART_SetConfig+0x118>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	095b      	lsrs	r3, r3, #5
 8004858:	f003 020f 	and.w	r2, r3, #15
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	440a      	add	r2, r1
 8004862:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004864:	bf00      	nop
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40013800 	.word	0x40013800
 8004870:	51eb851f 	.word	0x51eb851f

08004874 <memset>:
 8004874:	4603      	mov	r3, r0
 8004876:	4402      	add	r2, r0
 8004878:	4293      	cmp	r3, r2
 800487a:	d100      	bne.n	800487e <memset+0xa>
 800487c:	4770      	bx	lr
 800487e:	f803 1b01 	strb.w	r1, [r3], #1
 8004882:	e7f9      	b.n	8004878 <memset+0x4>

08004884 <__libc_init_array>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	2600      	movs	r6, #0
 8004888:	4d0c      	ldr	r5, [pc, #48]	@ (80048bc <__libc_init_array+0x38>)
 800488a:	4c0d      	ldr	r4, [pc, #52]	@ (80048c0 <__libc_init_array+0x3c>)
 800488c:	1b64      	subs	r4, r4, r5
 800488e:	10a4      	asrs	r4, r4, #2
 8004890:	42a6      	cmp	r6, r4
 8004892:	d109      	bne.n	80048a8 <__libc_init_array+0x24>
 8004894:	f000 f81a 	bl	80048cc <_init>
 8004898:	2600      	movs	r6, #0
 800489a:	4d0a      	ldr	r5, [pc, #40]	@ (80048c4 <__libc_init_array+0x40>)
 800489c:	4c0a      	ldr	r4, [pc, #40]	@ (80048c8 <__libc_init_array+0x44>)
 800489e:	1b64      	subs	r4, r4, r5
 80048a0:	10a4      	asrs	r4, r4, #2
 80048a2:	42a6      	cmp	r6, r4
 80048a4:	d105      	bne.n	80048b2 <__libc_init_array+0x2e>
 80048a6:	bd70      	pop	{r4, r5, r6, pc}
 80048a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ac:	4798      	blx	r3
 80048ae:	3601      	adds	r6, #1
 80048b0:	e7ee      	b.n	8004890 <__libc_init_array+0xc>
 80048b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b6:	4798      	blx	r3
 80048b8:	3601      	adds	r6, #1
 80048ba:	e7f2      	b.n	80048a2 <__libc_init_array+0x1e>
 80048bc:	08004910 	.word	0x08004910
 80048c0:	08004910 	.word	0x08004910
 80048c4:	08004910 	.word	0x08004910
 80048c8:	08004914 	.word	0x08004914

080048cc <_init>:
 80048cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ce:	bf00      	nop
 80048d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d2:	bc08      	pop	{r3}
 80048d4:	469e      	mov	lr, r3
 80048d6:	4770      	bx	lr

080048d8 <_fini>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr
